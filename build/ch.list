
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000279 	.word	0x08000279
 8000008:	0800027b 	.word	0x0800027b
 800000c:	0800027b 	.word	0x0800027b
 8000010:	0800027b 	.word	0x0800027b
 8000014:	0800027b 	.word	0x0800027b
 8000018:	0800027b 	.word	0x0800027b
 800001c:	0800027b 	.word	0x0800027b
 8000020:	0800027b 	.word	0x0800027b
 8000024:	0800027b 	.word	0x0800027b
 8000028:	0800027b 	.word	0x0800027b
 800002c:	08003501 	.word	0x08003501
 8000030:	0800027b 	.word	0x0800027b
 8000034:	0800027b 	.word	0x0800027b
 8000038:	0800027b 	.word	0x0800027b
 800003c:	0800027b 	.word	0x0800027b
 8000040:	0800027b 	.word	0x0800027b
 8000044:	0800027b 	.word	0x0800027b
 8000048:	0800027b 	.word	0x0800027b
 800004c:	0800027b 	.word	0x0800027b
 8000050:	0800027b 	.word	0x0800027b
 8000054:	0800027b 	.word	0x0800027b
 8000058:	0800027b 	.word	0x0800027b
 800005c:	0800027b 	.word	0x0800027b
 8000060:	0800027b 	.word	0x0800027b
 8000064:	0800027b 	.word	0x0800027b
 8000068:	0800027b 	.word	0x0800027b
 800006c:	0800027b 	.word	0x0800027b
 8000070:	0800027b 	.word	0x0800027b
 8000074:	0800027b 	.word	0x0800027b
 8000078:	0800027b 	.word	0x0800027b
 800007c:	0800027b 	.word	0x0800027b
 8000080:	0800027b 	.word	0x0800027b
 8000084:	0800027b 	.word	0x0800027b
 8000088:	0800027b 	.word	0x0800027b
 800008c:	0800027b 	.word	0x0800027b
 8000090:	0800027b 	.word	0x0800027b
 8000094:	0800027b 	.word	0x0800027b
 8000098:	0800027b 	.word	0x0800027b
 800009c:	0800027b 	.word	0x0800027b
 80000a0:	0800027b 	.word	0x0800027b
 80000a4:	0800027b 	.word	0x0800027b
 80000a8:	0800027b 	.word	0x0800027b
 80000ac:	0800027b 	.word	0x0800027b
 80000b0:	080014e1 	.word	0x080014e1
 80000b4:	0800027b 	.word	0x0800027b
 80000b8:	0800027b 	.word	0x0800027b
 80000bc:	0800027b 	.word	0x0800027b
 80000c0:	0800027b 	.word	0x0800027b
 80000c4:	0800027b 	.word	0x0800027b
 80000c8:	0800027b 	.word	0x0800027b
 80000cc:	0800027b 	.word	0x0800027b
 80000d0:	0800027b 	.word	0x0800027b
 80000d4:	0800027b 	.word	0x0800027b
 80000d8:	08001461 	.word	0x08001461
 80000dc:	0800027b 	.word	0x0800027b
 80000e0:	0800027b 	.word	0x0800027b
 80000e4:	0800027b 	.word	0x0800027b
 80000e8:	0800027b 	.word	0x0800027b
 80000ec:	0800027b 	.word	0x0800027b
 80000f0:	0800027b 	.word	0x0800027b
 80000f4:	0800027b 	.word	0x0800027b
 80000f8:	0800027b 	.word	0x0800027b
 80000fc:	0800027b 	.word	0x0800027b
 8000100:	0800027b 	.word	0x0800027b
 8000104:	0800027b 	.word	0x0800027b
 8000108:	0800027b 	.word	0x0800027b
 800010c:	0800027b 	.word	0x0800027b
 8000110:	0800027b 	.word	0x0800027b
 8000114:	0800027b 	.word	0x0800027b
 8000118:	0800027b 	.word	0x0800027b
 800011c:	0800027b 	.word	0x0800027b
 8000120:	0800027b 	.word	0x0800027b
 8000124:	0800027b 	.word	0x0800027b
 8000128:	0800027b 	.word	0x0800027b
 800012c:	0800027b 	.word	0x0800027b
 8000130:	0800027b 	.word	0x0800027b
 8000134:	0800027b 	.word	0x0800027b
 8000138:	0800027b 	.word	0x0800027b
 800013c:	0800027b 	.word	0x0800027b
 8000140:	0800027b 	.word	0x0800027b
 8000144:	0800027b 	.word	0x0800027b
 8000148:	0800027b 	.word	0x0800027b
 800014c:	0800027b 	.word	0x0800027b
 8000150:	0800027b 	.word	0x0800027b
 8000154:	0800027b 	.word	0x0800027b
 8000158:	0800027b 	.word	0x0800027b
 800015c:	0800027b 	.word	0x0800027b
 8000160:	0800027b 	.word	0x0800027b
 8000164:	0800027b 	.word	0x0800027b
 8000168:	0800027b 	.word	0x0800027b
 800016c:	0800027b 	.word	0x0800027b
 8000170:	0800027b 	.word	0x0800027b
 8000174:	0800027b 	.word	0x0800027b
 8000178:	0800027b 	.word	0x0800027b
 800017c:	0800027b 	.word	0x0800027b
 8000180:	0800027b 	.word	0x0800027b
 8000184:	0800027b 	.word	0x0800027b
 8000188:	0800027b 	.word	0x0800027b
 800018c:	0800027b 	.word	0x0800027b
 8000190:	0800027b 	.word	0x0800027b
 8000194:	0800027b 	.word	0x0800027b
 8000198:	0800027b 	.word	0x0800027b
 800019c:	0800027b 	.word	0x0800027b

Disassembly of section .text:

080001a0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001a0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001a2:	4827      	ldr	r0, [pc, #156]	; (8000240 <endfiniloop+0x4>)
                msr     MSP, r0
 80001a4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001a8:	4826      	ldr	r0, [pc, #152]	; (8000244 <endfiniloop+0x8>)
                msr     PSP, r0
 80001aa:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ae:	4826      	ldr	r0, [pc, #152]	; (8000248 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001b0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001b4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001b8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001ba:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001bc:	f380 8814 	msr	CONTROL, r0
                isb
 80001c0:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 80001c4:	f000 fa8c 	bl	80006e0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 80001c8:	f002 f8b2 	bl	8002330 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 80001cc:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 80001d0:	491e      	ldr	r1, [pc, #120]	; (800024c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 80001d2:	4a1b      	ldr	r2, [pc, #108]	; (8000240 <endfiniloop+0x4>)

080001d4 <msloop>:
msloop:
                cmp     r1, r2
 80001d4:	4291      	cmp	r1, r2
                itt     lo
 80001d6:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001d8:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 80001dc:	e7fa      	bcc.n	80001d4 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80001de:	491c      	ldr	r1, [pc, #112]	; (8000250 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001e0:	4a18      	ldr	r2, [pc, #96]	; (8000244 <endfiniloop+0x8>)

080001e2 <psloop>:
psloop:
                cmp     r1, r2
 80001e2:	4291      	cmp	r1, r2
                itt     lo
 80001e4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001e6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001ea:	e7fa      	bcc.n	80001e2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 80001ec:	4919      	ldr	r1, [pc, #100]	; (8000254 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 80001ee:	4a1a      	ldr	r2, [pc, #104]	; (8000258 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 80001f0:	4b1a      	ldr	r3, [pc, #104]	; (800025c <endfiniloop+0x20>)

080001f2 <dloop>:
dloop:
                cmp     r2, r3
 80001f2:	429a      	cmp	r2, r3
                ittt    lo
 80001f4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001f6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001fa:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001fe:	e7f8      	bcc.n	80001f2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000200:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000202:	4917      	ldr	r1, [pc, #92]	; (8000260 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000204:	4a17      	ldr	r2, [pc, #92]	; (8000264 <endfiniloop+0x28>)

08000206 <bloop>:
bloop:
                cmp     r1, r2
 8000206:	4291      	cmp	r1, r2
                itt     lo
 8000208:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800020a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800020e:	e7fa      	bcc.n	8000206 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000210:	f000 fa7e 	bl	8000710 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000214:	f000 fa6c 	bl	80006f0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000218:	4c13      	ldr	r4, [pc, #76]	; (8000268 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800021a:	4d14      	ldr	r5, [pc, #80]	; (800026c <endfiniloop+0x30>)

0800021c <initloop>:
initloop:
                cmp     r4, r5
 800021c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800021e:	da03      	bge.n	8000228 <endinitloop>
                ldr     r1, [r4], #4
 8000220:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000224:	4788      	blx	r1
                b       initloop
 8000226:	e7f9      	b.n	800021c <initloop>

08000228 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000228:	f007 fb5a 	bl	80078e0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800022c:	4c10      	ldr	r4, [pc, #64]	; (8000270 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800022e:	4d11      	ldr	r5, [pc, #68]	; (8000274 <endfiniloop+0x38>)

08000230 <finiloop>:
finiloop:
                cmp     r4, r5
 8000230:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000232:	da03      	bge.n	800023c <endfiniloop>
                ldr     r1, [r4], #4
 8000234:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000238:	4788      	blx	r1
                b       finiloop
 800023a:	e7f9      	b.n	8000230 <finiloop>

0800023c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800023c:	f000 ba60 	b.w	8000700 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000240:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000244:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000248:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800024c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000250:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000254:	080094c8 	.word	0x080094c8
                ldr     r2, =__data_base__
 8000258:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800025c:	20000800 	.word	0x20000800
                ldr     r1, =__bss_base__
 8000260:	20000800 	.word	0x20000800
                ldr     r2, =__bss_end__
 8000264:	20000fc0 	.word	0x20000fc0
                ldr     r4, =__init_array_base__
 8000268:	080001a0 	.word	0x080001a0
                ldr     r5, =__init_array_end__
 800026c:	080001a0 	.word	0x080001a0
                ldr     r4, =__fini_array_base__
 8000270:	080001a0 	.word	0x080001a0
                ldr     r5, =__fini_array_end__
 8000274:	080001a0 	.word	0x080001a0

08000278 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000278:	e792      	b.n	80001a0 <_crt0_entry>

0800027a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800027a:	f000 f800 	bl	800027e <_unhandled_exception>

0800027e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800027e:	e7fe      	b.n	800027e <_unhandled_exception>

08000280 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000284:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000288:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800028a:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000290 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000290:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000292:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000296:	4628      	mov	r0, r5
                blx     r4
 8000298:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800029a:	2000      	movs	r0, #0
                bl      chThdExit
 800029c:	f002 fe40 	bl	8002f20 <chThdExit>

080002a0 <_zombies>:
_zombies:       b       _zombies
 80002a0:	e7fe      	b.n	80002a0 <_zombies>

080002a2 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002a2:	f002 fcad 	bl	8002c00 <chSchDoReschedule>

080002a6 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002a6:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002a8:	e7fe      	b.n	80002a8 <_port_exit_from_isr+0x2>
	...

080002ac <__aeabi_uldivmod>:
 80002ac:	b953      	cbnz	r3, 80002c4 <__aeabi_uldivmod+0x18>
 80002ae:	b94a      	cbnz	r2, 80002c4 <__aeabi_uldivmod+0x18>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	bf08      	it	eq
 80002b4:	2800      	cmpeq	r0, #0
 80002b6:	bf1c      	itt	ne
 80002b8:	f04f 31ff 	movne.w	r1, #4294967295
 80002bc:	f04f 30ff 	movne.w	r0, #4294967295
 80002c0:	f000 b96c 	b.w	800059c <__aeabi_idiv0>
 80002c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002cc:	f000 f806 	bl	80002dc <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4770      	bx	lr

080002dc <__udivmoddi4>:
 80002dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e0:	9e08      	ldr	r6, [sp, #32]
 80002e2:	460d      	mov	r5, r1
 80002e4:	4604      	mov	r4, r0
 80002e6:	468e      	mov	lr, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	f040 8082 	bne.w	80003f2 <__udivmoddi4+0x116>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4617      	mov	r7, r2
 80002f2:	d946      	bls.n	8000382 <__udivmoddi4+0xa6>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x32>
 80002fa:	f1c2 0120 	rsb	r1, r2, #32
 80002fe:	fa05 f302 	lsl.w	r3, r5, r2
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	4097      	lsls	r7, r2
 8000308:	ea41 0e03 	orr.w	lr, r1, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbe fcf8 	udiv	ip, lr, r8
 8000318:	b2b9      	uxth	r1, r7
 800031a:	fb08 ee1c 	mls	lr, r8, ip, lr
 800031e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000322:	fb0c f001 	mul.w	r0, ip, r1
 8000326:	4298      	cmp	r0, r3
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x64>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000330:	f080 8116 	bcs.w	8000560 <__udivmoddi4+0x284>
 8000334:	4298      	cmp	r0, r3
 8000336:	f240 8113 	bls.w	8000560 <__udivmoddi4+0x284>
 800033a:	f1ac 0c02 	sub.w	ip, ip, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a1b      	subs	r3, r3, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 f101 	mul.w	r1, r0, r1
 8000354:	42a1      	cmp	r1, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x90>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8101 	bcs.w	8000564 <__udivmoddi4+0x288>
 8000362:	42a1      	cmp	r1, r4
 8000364:	f240 80fe 	bls.w	8000564 <__udivmoddi4+0x288>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	1a64      	subs	r4, r4, r1
 800036e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000372:	2100      	movs	r1, #0
 8000374:	b11e      	cbz	r6, 800037e <__udivmoddi4+0xa2>
 8000376:	40d4      	lsrs	r4, r2
 8000378:	2300      	movs	r3, #0
 800037a:	e9c6 4300 	strd	r4, r3, [r6]
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xaa>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f282 	clz	r2, r2
 800038a:	2a00      	cmp	r2, #0
 800038c:	d14f      	bne.n	800042e <__udivmoddi4+0x152>
 800038e:	1bcb      	subs	r3, r1, r7
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	fa1f f887 	uxth.w	r8, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb3 fcfe 	udiv	ip, r3, lr
 800039e:	0c25      	lsrs	r5, r4, #16
 80003a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003a8:	fb08 f30c 	mul.w	r3, r8, ip
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0xe4>
 80003b0:	197d      	adds	r5, r7, r5
 80003b2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0xe2>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	f200 80e7 	bhi.w	800058c <__udivmoddi4+0x2b0>
 80003be:	4684      	mov	ip, r0
 80003c0:	1aed      	subs	r5, r5, r3
 80003c2:	b2a3      	uxth	r3, r4
 80003c4:	fbb5 f0fe 	udiv	r0, r5, lr
 80003c8:	fb0e 5510 	mls	r5, lr, r0, r5
 80003cc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003d0:	fb08 f800 	mul.w	r8, r8, r0
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0x10c>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f100 33ff 	add.w	r3, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x10a>
 80003e0:	45a0      	cmp	r8, r4
 80003e2:	f200 80d7 	bhi.w	8000594 <__udivmoddi4+0x2b8>
 80003e6:	4618      	mov	r0, r3
 80003e8:	eba4 0408 	sub.w	r4, r4, r8
 80003ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f0:	e7c0      	b.n	8000374 <__udivmoddi4+0x98>
 80003f2:	428b      	cmp	r3, r1
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x12c>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f000 80af 	beq.w	800055a <__udivmoddi4+0x27e>
 80003fc:	2100      	movs	r1, #0
 80003fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000402:	4608      	mov	r0, r1
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	fab3 f183 	clz	r1, r3
 800040c:	2900      	cmp	r1, #0
 800040e:	d14b      	bne.n	80004a8 <__udivmoddi4+0x1cc>
 8000410:	42ab      	cmp	r3, r5
 8000412:	d302      	bcc.n	800041a <__udivmoddi4+0x13e>
 8000414:	4282      	cmp	r2, r0
 8000416:	f200 80b7 	bhi.w	8000588 <__udivmoddi4+0x2ac>
 800041a:	1a84      	subs	r4, r0, r2
 800041c:	eb65 0303 	sbc.w	r3, r5, r3
 8000420:	2001      	movs	r0, #1
 8000422:	469e      	mov	lr, r3
 8000424:	2e00      	cmp	r6, #0
 8000426:	d0aa      	beq.n	800037e <__udivmoddi4+0xa2>
 8000428:	e9c6 4e00 	strd	r4, lr, [r6]
 800042c:	e7a7      	b.n	800037e <__udivmoddi4+0xa2>
 800042e:	f1c2 0c20 	rsb	ip, r2, #32
 8000432:	fa01 f302 	lsl.w	r3, r1, r2
 8000436:	4097      	lsls	r7, r2
 8000438:	fa20 f00c 	lsr.w	r0, r0, ip
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000444:	4318      	orrs	r0, r3
 8000446:	fbbc f1fe 	udiv	r1, ip, lr
 800044a:	0c05      	lsrs	r5, r0, #16
 800044c:	fb0e cc11 	mls	ip, lr, r1, ip
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000458:	fb01 f308 	mul.w	r3, r1, r8
 800045c:	42ab      	cmp	r3, r5
 800045e:	fa04 f402 	lsl.w	r4, r4, r2
 8000462:	d909      	bls.n	8000478 <__udivmoddi4+0x19c>
 8000464:	197d      	adds	r5, r7, r5
 8000466:	f101 3cff 	add.w	ip, r1, #4294967295
 800046a:	f080 808b 	bcs.w	8000584 <__udivmoddi4+0x2a8>
 800046e:	42ab      	cmp	r3, r5
 8000470:	f240 8088 	bls.w	8000584 <__udivmoddi4+0x2a8>
 8000474:	3902      	subs	r1, #2
 8000476:	443d      	add	r5, r7
 8000478:	1aeb      	subs	r3, r5, r3
 800047a:	b285      	uxth	r5, r0
 800047c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000480:	fb0e 3310 	mls	r3, lr, r0, r3
 8000484:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000488:	fb00 f308 	mul.w	r3, r0, r8
 800048c:	42ab      	cmp	r3, r5
 800048e:	d907      	bls.n	80004a0 <__udivmoddi4+0x1c4>
 8000490:	197d      	adds	r5, r7, r5
 8000492:	f100 3cff 	add.w	ip, r0, #4294967295
 8000496:	d271      	bcs.n	800057c <__udivmoddi4+0x2a0>
 8000498:	42ab      	cmp	r3, r5
 800049a:	d96f      	bls.n	800057c <__udivmoddi4+0x2a0>
 800049c:	3802      	subs	r0, #2
 800049e:	443d      	add	r5, r7
 80004a0:	1aeb      	subs	r3, r5, r3
 80004a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a6:	e778      	b.n	800039a <__udivmoddi4+0xbe>
 80004a8:	f1c1 0c20 	rsb	ip, r1, #32
 80004ac:	408b      	lsls	r3, r1
 80004ae:	fa22 f70c 	lsr.w	r7, r2, ip
 80004b2:	431f      	orrs	r7, r3
 80004b4:	fa20 f40c 	lsr.w	r4, r0, ip
 80004b8:	fa05 f301 	lsl.w	r3, r5, r1
 80004bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c0:	fa25 f50c 	lsr.w	r5, r5, ip
 80004c4:	431c      	orrs	r4, r3
 80004c6:	0c23      	lsrs	r3, r4, #16
 80004c8:	fbb5 f9fe 	udiv	r9, r5, lr
 80004cc:	fa1f f887 	uxth.w	r8, r7
 80004d0:	fb0e 5519 	mls	r5, lr, r9, r5
 80004d4:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80004d8:	fb09 fa08 	mul.w	sl, r9, r8
 80004dc:	45aa      	cmp	sl, r5
 80004de:	fa02 f201 	lsl.w	r2, r2, r1
 80004e2:	fa00 f301 	lsl.w	r3, r0, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x21e>
 80004e8:	197d      	adds	r5, r7, r5
 80004ea:	f109 30ff 	add.w	r0, r9, #4294967295
 80004ee:	d247      	bcs.n	8000580 <__udivmoddi4+0x2a4>
 80004f0:	45aa      	cmp	sl, r5
 80004f2:	d945      	bls.n	8000580 <__udivmoddi4+0x2a4>
 80004f4:	f1a9 0902 	sub.w	r9, r9, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	eba5 050a 	sub.w	r5, r5, sl
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb5 f0fe 	udiv	r0, r5, lr
 8000504:	fb0e 5510 	mls	r5, lr, r0, r5
 8000508:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800050c:	fb00 f808 	mul.w	r8, r0, r8
 8000510:	45a0      	cmp	r8, r4
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x248>
 8000514:	193c      	adds	r4, r7, r4
 8000516:	f100 35ff 	add.w	r5, r0, #4294967295
 800051a:	d22d      	bcs.n	8000578 <__udivmoddi4+0x29c>
 800051c:	45a0      	cmp	r8, r4
 800051e:	d92b      	bls.n	8000578 <__udivmoddi4+0x29c>
 8000520:	3802      	subs	r0, #2
 8000522:	443c      	add	r4, r7
 8000524:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000528:	eba4 0408 	sub.w	r4, r4, r8
 800052c:	fba0 8902 	umull	r8, r9, r0, r2
 8000530:	454c      	cmp	r4, r9
 8000532:	46c6      	mov	lr, r8
 8000534:	464d      	mov	r5, r9
 8000536:	d319      	bcc.n	800056c <__udivmoddi4+0x290>
 8000538:	d016      	beq.n	8000568 <__udivmoddi4+0x28c>
 800053a:	b15e      	cbz	r6, 8000554 <__udivmoddi4+0x278>
 800053c:	ebb3 020e 	subs.w	r2, r3, lr
 8000540:	eb64 0405 	sbc.w	r4, r4, r5
 8000544:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000548:	40ca      	lsrs	r2, r1
 800054a:	ea4c 0202 	orr.w	r2, ip, r2
 800054e:	40cc      	lsrs	r4, r1
 8000550:	e9c6 2400 	strd	r2, r4, [r6]
 8000554:	2100      	movs	r1, #0
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e70e      	b.n	800037e <__udivmoddi4+0xa2>
 8000560:	46ac      	mov	ip, r5
 8000562:	e6ed      	b.n	8000340 <__udivmoddi4+0x64>
 8000564:	4618      	mov	r0, r3
 8000566:	e701      	b.n	800036c <__udivmoddi4+0x90>
 8000568:	4543      	cmp	r3, r8
 800056a:	d2e6      	bcs.n	800053a <__udivmoddi4+0x25e>
 800056c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000570:	eb69 0507 	sbc.w	r5, r9, r7
 8000574:	3801      	subs	r0, #1
 8000576:	e7e0      	b.n	800053a <__udivmoddi4+0x25e>
 8000578:	4628      	mov	r0, r5
 800057a:	e7d3      	b.n	8000524 <__udivmoddi4+0x248>
 800057c:	4660      	mov	r0, ip
 800057e:	e78f      	b.n	80004a0 <__udivmoddi4+0x1c4>
 8000580:	4681      	mov	r9, r0
 8000582:	e7ba      	b.n	80004fa <__udivmoddi4+0x21e>
 8000584:	4661      	mov	r1, ip
 8000586:	e777      	b.n	8000478 <__udivmoddi4+0x19c>
 8000588:	4608      	mov	r0, r1
 800058a:	e74b      	b.n	8000424 <__udivmoddi4+0x148>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443d      	add	r5, r7
 8000592:	e715      	b.n	80003c0 <__udivmoddi4+0xe4>
 8000594:	3802      	subs	r0, #2
 8000596:	443c      	add	r4, r7
 8000598:	e726      	b.n	80003e8 <__udivmoddi4+0x10c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <memcpy>:
 80005a0:	4684      	mov	ip, r0
 80005a2:	ea41 0300 	orr.w	r3, r1, r0
 80005a6:	f013 0303 	ands.w	r3, r3, #3
 80005aa:	d16d      	bne.n	8000688 <memcpy+0xe8>
 80005ac:	3a40      	subs	r2, #64	; 0x40
 80005ae:	d341      	bcc.n	8000634 <memcpy+0x94>
 80005b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80005b4:	f840 3b04 	str.w	r3, [r0], #4
 80005b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80005bc:	f840 3b04 	str.w	r3, [r0], #4
 80005c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80005c4:	f840 3b04 	str.w	r3, [r0], #4
 80005c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80005cc:	f840 3b04 	str.w	r3, [r0], #4
 80005d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80005d4:	f840 3b04 	str.w	r3, [r0], #4
 80005d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80005dc:	f840 3b04 	str.w	r3, [r0], #4
 80005e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80005e4:	f840 3b04 	str.w	r3, [r0], #4
 80005e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80005ec:	f840 3b04 	str.w	r3, [r0], #4
 80005f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80005f4:	f840 3b04 	str.w	r3, [r0], #4
 80005f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80005fc:	f840 3b04 	str.w	r3, [r0], #4
 8000600:	f851 3b04 	ldr.w	r3, [r1], #4
 8000604:	f840 3b04 	str.w	r3, [r0], #4
 8000608:	f851 3b04 	ldr.w	r3, [r1], #4
 800060c:	f840 3b04 	str.w	r3, [r0], #4
 8000610:	f851 3b04 	ldr.w	r3, [r1], #4
 8000614:	f840 3b04 	str.w	r3, [r0], #4
 8000618:	f851 3b04 	ldr.w	r3, [r1], #4
 800061c:	f840 3b04 	str.w	r3, [r0], #4
 8000620:	f851 3b04 	ldr.w	r3, [r1], #4
 8000624:	f840 3b04 	str.w	r3, [r0], #4
 8000628:	f851 3b04 	ldr.w	r3, [r1], #4
 800062c:	f840 3b04 	str.w	r3, [r0], #4
 8000630:	3a40      	subs	r2, #64	; 0x40
 8000632:	d2bd      	bcs.n	80005b0 <memcpy+0x10>
 8000634:	3230      	adds	r2, #48	; 0x30
 8000636:	d311      	bcc.n	800065c <memcpy+0xbc>
 8000638:	f851 3b04 	ldr.w	r3, [r1], #4
 800063c:	f840 3b04 	str.w	r3, [r0], #4
 8000640:	f851 3b04 	ldr.w	r3, [r1], #4
 8000644:	f840 3b04 	str.w	r3, [r0], #4
 8000648:	f851 3b04 	ldr.w	r3, [r1], #4
 800064c:	f840 3b04 	str.w	r3, [r0], #4
 8000650:	f851 3b04 	ldr.w	r3, [r1], #4
 8000654:	f840 3b04 	str.w	r3, [r0], #4
 8000658:	3a10      	subs	r2, #16
 800065a:	d2ed      	bcs.n	8000638 <memcpy+0x98>
 800065c:	320c      	adds	r2, #12
 800065e:	d305      	bcc.n	800066c <memcpy+0xcc>
 8000660:	f851 3b04 	ldr.w	r3, [r1], #4
 8000664:	f840 3b04 	str.w	r3, [r0], #4
 8000668:	3a04      	subs	r2, #4
 800066a:	d2f9      	bcs.n	8000660 <memcpy+0xc0>
 800066c:	3204      	adds	r2, #4
 800066e:	d008      	beq.n	8000682 <memcpy+0xe2>
 8000670:	07d2      	lsls	r2, r2, #31
 8000672:	bf1c      	itt	ne
 8000674:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000678:	f800 3b01 	strbne.w	r3, [r0], #1
 800067c:	d301      	bcc.n	8000682 <memcpy+0xe2>
 800067e:	880b      	ldrh	r3, [r1, #0]
 8000680:	8003      	strh	r3, [r0, #0]
 8000682:	4660      	mov	r0, ip
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	2a08      	cmp	r2, #8
 800068a:	d313      	bcc.n	80006b4 <memcpy+0x114>
 800068c:	078b      	lsls	r3, r1, #30
 800068e:	d08d      	beq.n	80005ac <memcpy+0xc>
 8000690:	f010 0303 	ands.w	r3, r0, #3
 8000694:	d08a      	beq.n	80005ac <memcpy+0xc>
 8000696:	f1c3 0304 	rsb	r3, r3, #4
 800069a:	1ad2      	subs	r2, r2, r3
 800069c:	07db      	lsls	r3, r3, #31
 800069e:	bf1c      	itt	ne
 80006a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80006a4:	f800 3b01 	strbne.w	r3, [r0], #1
 80006a8:	d380      	bcc.n	80005ac <memcpy+0xc>
 80006aa:	f831 3b02 	ldrh.w	r3, [r1], #2
 80006ae:	f820 3b02 	strh.w	r3, [r0], #2
 80006b2:	e77b      	b.n	80005ac <memcpy+0xc>
 80006b4:	3a04      	subs	r2, #4
 80006b6:	d3d9      	bcc.n	800066c <memcpy+0xcc>
 80006b8:	3a01      	subs	r2, #1
 80006ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80006be:	f800 3b01 	strb.w	r3, [r0], #1
 80006c2:	d2f9      	bcs.n	80006b8 <memcpy+0x118>
 80006c4:	780b      	ldrb	r3, [r1, #0]
 80006c6:	7003      	strb	r3, [r0, #0]
 80006c8:	784b      	ldrb	r3, [r1, #1]
 80006ca:	7043      	strb	r3, [r0, #1]
 80006cc:	788b      	ldrb	r3, [r1, #2]
 80006ce:	7083      	strb	r3, [r0, #2]
 80006d0:	4660      	mov	r0, ip
 80006d2:	4770      	bx	lr
	...

080006e0 <__core_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
	...

080006f0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
	...

08000700 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8000700:	e7fe      	b.n	8000700 <__default_exit>
 8000702:	bf00      	nop
	...

08000710 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8000710:	b084      	sub	sp, #16
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <__init_ram_areas+0x5c>)
 8000714:	9303      	str	r3, [sp, #12]

  do {
    uint32_t *tp = rap->init_text_area;
 8000716:	9b03      	ldr	r3, [sp, #12]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	9302      	str	r3, [sp, #8]
    uint32_t *p = rap->init_area;
 800071c:	9b03      	ldr	r3, [sp, #12]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	9301      	str	r3, [sp, #4]
 8000722:	e009      	b.n	8000738 <__init_ram_areas+0x28>

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
      *p = *tp;
 8000724:	9b02      	ldr	r3, [sp, #8]
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	9b01      	ldr	r3, [sp, #4]
 800072a:	601a      	str	r2, [r3, #0]
      p++;
 800072c:	9b01      	ldr	r3, [sp, #4]
 800072e:	3304      	adds	r3, #4
 8000730:	9301      	str	r3, [sp, #4]
      tp++;
 8000732:	9b02      	ldr	r3, [sp, #8]
 8000734:	3304      	adds	r3, #4
 8000736:	9302      	str	r3, [sp, #8]
    while (p < rap->clear_area) {
 8000738:	9b03      	ldr	r3, [sp, #12]
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	9a01      	ldr	r2, [sp, #4]
 800073e:	429a      	cmp	r2, r3
 8000740:	d3f0      	bcc.n	8000724 <__init_ram_areas+0x14>
 8000742:	e005      	b.n	8000750 <__init_ram_areas+0x40>
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8000744:	9b01      	ldr	r3, [sp, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
      p++;
 800074a:	9b01      	ldr	r3, [sp, #4]
 800074c:	3304      	adds	r3, #4
 800074e:	9301      	str	r3, [sp, #4]
    while (p < rap->no_init_area) {
 8000750:	9b03      	ldr	r3, [sp, #12]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	9a01      	ldr	r2, [sp, #4]
 8000756:	429a      	cmp	r2, r3
 8000758:	d3f4      	bcc.n	8000744 <__init_ram_areas+0x34>
    }
    rap++;
 800075a:	9b03      	ldr	r3, [sp, #12]
 800075c:	3310      	adds	r3, #16
 800075e:	9303      	str	r3, [sp, #12]
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8000760:	9b03      	ldr	r3, [sp, #12]
 8000762:	4a03      	ldr	r2, [pc, #12]	; (8000770 <__init_ram_areas+0x60>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d3d6      	bcc.n	8000716 <__init_ram_areas+0x6>
#endif
}
 8000768:	b004      	add	sp, #16
 800076a:	4770      	bx	lr
 800076c:	080079a4 	.word	0x080079a4
 8000770:	08007a24 	.word	0x08007a24
	...

08000780 <osalInit>:
 *
 * @api
 */
static inline void osalInit(void) {

}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
	...

08000790 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8000790:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
 8000792:	f7ff fff5 	bl	8000780 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
 8000796:	f000 ff4b 	bl	8001630 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
 800079a:	f001 fad1 	bl	8001d40 <_pal_lld_init>
#endif
#if (HAL_USE_DAC == TRUE) || defined(__DOXYGEN__)
  dacInit();
#endif
#if (HAL_USE_EFL == TRUE) || defined(__DOXYGEN__)
  eflInit();
 800079e:	f000 fc2f 	bl	8001000 <eflInit>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 80007a2:	f000 fd65 	bl	8001270 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 80007a6:	f001 fdcb 	bl	8002340 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 80007aa:	f000 f829 	bl	8000800 <stInit>
#endif
}
 80007ae:	bd08      	pop	{r3, pc}

080007b0 <st_lld_get_counter>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80007b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	0000      	movs	r0, r0
	...

080007c0 <st_lld_start_alarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t abstime) {
 80007c0:	b082      	sub	sp, #8
 80007c2:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80007c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c8:	9b01      	ldr	r3, [sp, #4]
 80007ca:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80007cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80007d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007d8:	2202      	movs	r2, #2
 80007da:	60da      	str	r2, [r3, #12]
#else
  STM32_ST_TIM->DIER  |= STM32_TIM_DIER_CC1IE;
#endif
}
 80007dc:	b002      	add	sp, #8
 80007de:	4770      	bx	lr

080007e0 <st_lld_stop_alarm>:
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER = 0U;
 80007e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
#else
 STM32_ST_TIM->DIER &= ~STM32_TIM_DIER_CC1IE;
#endif
}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	0000      	movs	r0, r0
	...

080007f0 <st_lld_set_alarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {
 80007f0:	b082      	sub	sp, #8
 80007f2:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80007f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f8:	9b01      	ldr	r3, [sp, #4]
 80007fa:	6353      	str	r3, [r2, #52]	; 0x34
}
 80007fc:	b002      	add	sp, #8
 80007fe:	4770      	bx	lr

08000800 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 8000800:	b508      	push	{r3, lr}

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS - 1U; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
 8000802:	f001 facd 	bl	8001da0 <st_lld_init>
}
 8000806:	bd08      	pop	{r3, pc}
	...

08000810 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 8000810:	b500      	push	{lr}
 8000812:	b083      	sub	sp, #12
 8000814:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
 8000816:	9801      	ldr	r0, [sp, #4]
 8000818:	f7ff ffd2 	bl	80007c0 <st_lld_start_alarm>
}
 800081c:	b003      	add	sp, #12
 800081e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000822:	bf00      	nop
	...

08000830 <stStopAlarm>:
 * @note    This functionality is only available in free running mode, the
 *          behavior in periodic mode is undefined.
 *
 * @api
 */
void stStopAlarm(void) {
 8000830:	b508      	push	{r3, lr}

  st_lld_stop_alarm();
 8000832:	f7ff ffd5 	bl	80007e0 <st_lld_stop_alarm>
}
 8000836:	bd08      	pop	{r3, pc}
	...

08000840 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8000840:	b500      	push	{lr}
 8000842:	b083      	sub	sp, #12
 8000844:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
 8000846:	9801      	ldr	r0, [sp, #4]
 8000848:	f7ff ffd2 	bl	80007f0 <st_lld_set_alarm>
}
 800084c:	b003      	add	sp, #12
 800084e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000852:	bf00      	nop
	...

08000860 <stGetCounter>:
 *
 * @return              The counter value.
 *
 * @api
 */
systime_t stGetCounter(void) {
 8000860:	b508      	push	{r3, lr}

  return st_lld_get_counter();
 8000862:	f7ff ffa5 	bl	80007b0 <st_lld_get_counter>
 8000866:	4603      	mov	r3, r0
}
 8000868:	4618      	mov	r0, r3
 800086a:	bd08      	pop	{r3, pc}
 800086c:	0000      	movs	r0, r0
	...

08000870 <queue_init.lto_priv.1>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 8000870:	b082      	sub	sp, #8
 8000872:	9001      	str	r0, [sp, #4]

  tqp->next = (thread_t *)tqp;
 8000874:	9b01      	ldr	r3, [sp, #4]
 8000876:	9a01      	ldr	r2, [sp, #4]
 8000878:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 800087a:	9b01      	ldr	r3, [sp, #4]
 800087c:	9a01      	ldr	r2, [sp, #4]
 800087e:	605a      	str	r2, [r3, #4]
}
 8000880:	b002      	add	sp, #8
 8000882:	4770      	bx	lr
	...

08000890 <chSysLock.lto_priv.1>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void) {
 8000890:	b082      	sub	sp, #8
 8000892:	2320      	movs	r3, #32
 8000894:	9301      	str	r3, [sp, #4]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000896:	9b01      	ldr	r3, [sp, #4]
 8000898:	f383 8811 	msr	BASEPRI, r3

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
}
 800089c:	b002      	add	sp, #8
 800089e:	4770      	bx	lr

080008a0 <chSysUnlock.lto_priv.1>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 80008a0:	b082      	sub	sp, #8
 80008a2:	2300      	movs	r3, #0
 80008a4:	9301      	str	r3, [sp, #4]
 80008a6:	9b01      	ldr	r3, [sp, #4]
 80008a8:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  port_unlock();
}
 80008ac:	b002      	add	sp, #8
 80008ae:	4770      	bx	lr

080008b0 <chThdQueueObjectInit.lto_priv.1>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 80008b0:	b500      	push	{lr}
 80008b2:	b083      	sub	sp, #12
 80008b4:	9001      	str	r0, [sp, #4]

  queue_init(tqp);
 80008b6:	9801      	ldr	r0, [sp, #4]
 80008b8:	f7ff ffda 	bl	8000870 <queue_init.lto_priv.1>
}
 80008bc:	b003      	add	sp, #12
 80008be:	f85d fb04 	ldr.w	pc, [sp], #4
 80008c2:	bf00      	nop
	...

080008d0 <osalSysLock.lto_priv.1>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 80008d0:	b508      	push	{r3, lr}

  chSysLock();
 80008d2:	f7ff ffdd 	bl	8000890 <chSysLock.lto_priv.1>
}
 80008d6:	bd08      	pop	{r3, pc}
	...

080008e0 <osalSysUnlock.lto_priv.1>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 80008e0:	b508      	push	{r3, lr}

  chSysUnlock();
 80008e2:	f7ff ffdd 	bl	80008a0 <chSysUnlock.lto_priv.1>
}
 80008e6:	bd08      	pop	{r3, pc}
	...

080008f0 <osalThreadQueueObjectInit.lto_priv.1>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 80008f0:	b500      	push	{lr}
 80008f2:	b083      	sub	sp, #12
 80008f4:	9001      	str	r0, [sp, #4]

  chThdQueueObjectInit(tqp);
 80008f6:	9801      	ldr	r0, [sp, #4]
 80008f8:	f7ff ffda 	bl	80008b0 <chThdQueueObjectInit.lto_priv.1>
}
 80008fc:	b003      	add	sp, #12
 80008fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000902:	bf00      	nop
	...

08000910 <osalThreadEnqueueTimeoutS.lto_priv.1>:
 *                      specification.
 *
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {
 8000910:	b500      	push	{lr}
 8000912:	b083      	sub	sp, #12
 8000914:	9001      	str	r0, [sp, #4]
 8000916:	9100      	str	r1, [sp, #0]

  return chThdEnqueueTimeoutS(tqp, timeout);
 8000918:	9900      	ldr	r1, [sp, #0]
 800091a:	9801      	ldr	r0, [sp, #4]
 800091c:	f002 fb60 	bl	8002fe0 <chThdEnqueueTimeoutS>
 8000920:	4603      	mov	r3, r0
}
 8000922:	4618      	mov	r0, r3
 8000924:	b003      	add	sp, #12
 8000926:	f85d fb04 	ldr.w	pc, [sp], #4
 800092a:	bf00      	nop
 800092c:	0000      	movs	r0, r0
	...

08000930 <osalThreadDequeueNextI.lto_priv.1>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8000930:	b500      	push	{lr}
 8000932:	b083      	sub	sp, #12
 8000934:	9001      	str	r0, [sp, #4]
 8000936:	9100      	str	r1, [sp, #0]

  chThdDequeueNextI(tqp, msg);
 8000938:	9900      	ldr	r1, [sp, #0]
 800093a:	9801      	ldr	r0, [sp, #4]
 800093c:	f002 fb70 	bl	8003020 <chThdDequeueNextI>
}
 8000940:	b003      	add	sp, #12
 8000942:	f85d fb04 	ldr.w	pc, [sp], #4
 8000946:	bf00      	nop
	...

08000950 <iq_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
 8000950:	b500      	push	{lr}
 8000952:	b087      	sub	sp, #28
 8000954:	9003      	str	r0, [sp, #12]
 8000956:	9102      	str	r1, [sp, #8]
 8000958:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 800095a:	9b03      	ldr	r3, [sp, #12]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	9a01      	ldr	r2, [sp, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	d902      	bls.n	800096a <iq_read+0x1a>
    n = iqGetFullI(iqp);
 8000964:	9b03      	ldr	r3, [sp, #12]
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800096a:	9b03      	ldr	r3, [sp, #12]
 800096c:	691a      	ldr	r2, [r3, #16]
 800096e:	9b03      	ldr	r3, [sp, #12]
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 8000976:	9a01      	ldr	r2, [sp, #4]
 8000978:	9b05      	ldr	r3, [sp, #20]
 800097a:	429a      	cmp	r2, r3
 800097c:	d20d      	bcs.n	800099a <iq_read+0x4a>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800097e:	9b03      	ldr	r3, [sp, #12]
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	9a01      	ldr	r2, [sp, #4]
 8000984:	4619      	mov	r1, r3
 8000986:	9802      	ldr	r0, [sp, #8]
 8000988:	f7ff fe0a 	bl	80005a0 <memcpy>
    iqp->q_rdptr += n;
 800098c:	9b03      	ldr	r3, [sp, #12]
 800098e:	699a      	ldr	r2, [r3, #24]
 8000990:	9b01      	ldr	r3, [sp, #4]
 8000992:	441a      	add	r2, r3
 8000994:	9b03      	ldr	r3, [sp, #12]
 8000996:	619a      	str	r2, [r3, #24]
 8000998:	e02b      	b.n	80009f2 <iq_read+0xa2>
  }
  else if (n > s1) {
 800099a:	9a01      	ldr	r2, [sp, #4]
 800099c:	9b05      	ldr	r3, [sp, #20]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d91c      	bls.n	80009dc <iq_read+0x8c>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80009a2:	9b03      	ldr	r3, [sp, #12]
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	9a05      	ldr	r2, [sp, #20]
 80009a8:	4619      	mov	r1, r3
 80009aa:	9802      	ldr	r0, [sp, #8]
 80009ac:	f7ff fdf8 	bl	80005a0 <memcpy>
    bp += s1;
 80009b0:	9a02      	ldr	r2, [sp, #8]
 80009b2:	9b05      	ldr	r3, [sp, #20]
 80009b4:	4413      	add	r3, r2
 80009b6:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 80009b8:	9a01      	ldr	r2, [sp, #4]
 80009ba:	9b05      	ldr	r3, [sp, #20]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	9304      	str	r3, [sp, #16]
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80009c0:	9b03      	ldr	r3, [sp, #12]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	9a04      	ldr	r2, [sp, #16]
 80009c6:	4619      	mov	r1, r3
 80009c8:	9802      	ldr	r0, [sp, #8]
 80009ca:	f7ff fde9 	bl	80005a0 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 80009ce:	9b03      	ldr	r3, [sp, #12]
 80009d0:	68da      	ldr	r2, [r3, #12]
 80009d2:	9b04      	ldr	r3, [sp, #16]
 80009d4:	441a      	add	r2, r3
 80009d6:	9b03      	ldr	r3, [sp, #12]
 80009d8:	619a      	str	r2, [r3, #24]
 80009da:	e00a      	b.n	80009f2 <iq_read+0xa2>
  }
  else {
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80009dc:	9b03      	ldr	r3, [sp, #12]
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	9a01      	ldr	r2, [sp, #4]
 80009e2:	4619      	mov	r1, r3
 80009e4:	9802      	ldr	r0, [sp, #8]
 80009e6:	f7ff fddb 	bl	80005a0 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 80009ea:	9b03      	ldr	r3, [sp, #12]
 80009ec:	68da      	ldr	r2, [r3, #12]
 80009ee:	9b03      	ldr	r3, [sp, #12]
 80009f0:	619a      	str	r2, [r3, #24]
  }

  iqp->q_counter -= n;
 80009f2:	9b03      	ldr	r3, [sp, #12]
 80009f4:	689a      	ldr	r2, [r3, #8]
 80009f6:	9b01      	ldr	r3, [sp, #4]
 80009f8:	1ad2      	subs	r2, r2, r3
 80009fa:	9b03      	ldr	r3, [sp, #12]
 80009fc:	609a      	str	r2, [r3, #8]
  return n;
 80009fe:	9b01      	ldr	r3, [sp, #4]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	b007      	add	sp, #28
 8000a04:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000a10 <oq_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 8000a10:	b500      	push	{lr}
 8000a12:	b087      	sub	sp, #28
 8000a14:	9003      	str	r0, [sp, #12]
 8000a16:	9102      	str	r1, [sp, #8]
 8000a18:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 8000a1a:	9b03      	ldr	r3, [sp, #12]
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	9a01      	ldr	r2, [sp, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d902      	bls.n	8000a2a <oq_write+0x1a>
    n = oqGetEmptyI(oqp);
 8000a24:	9b03      	ldr	r3, [sp, #12]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8000a2a:	9b03      	ldr	r3, [sp, #12]
 8000a2c:	691a      	ldr	r2, [r3, #16]
 8000a2e:	9b03      	ldr	r3, [sp, #12]
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 8000a36:	9a01      	ldr	r2, [sp, #4]
 8000a38:	9b05      	ldr	r3, [sp, #20]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d20d      	bcs.n	8000a5a <oq_write+0x4a>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000a3e:	9b03      	ldr	r3, [sp, #12]
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	9a01      	ldr	r2, [sp, #4]
 8000a44:	9902      	ldr	r1, [sp, #8]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fdaa 	bl	80005a0 <memcpy>
    oqp->q_wrptr += n;
 8000a4c:	9b03      	ldr	r3, [sp, #12]
 8000a4e:	695a      	ldr	r2, [r3, #20]
 8000a50:	9b01      	ldr	r3, [sp, #4]
 8000a52:	441a      	add	r2, r3
 8000a54:	9b03      	ldr	r3, [sp, #12]
 8000a56:	615a      	str	r2, [r3, #20]
 8000a58:	e02b      	b.n	8000ab2 <oq_write+0xa2>
  }
  else if (n > s1) {
 8000a5a:	9a01      	ldr	r2, [sp, #4]
 8000a5c:	9b05      	ldr	r3, [sp, #20]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d91c      	bls.n	8000a9c <oq_write+0x8c>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8000a62:	9b03      	ldr	r3, [sp, #12]
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	9a05      	ldr	r2, [sp, #20]
 8000a68:	9902      	ldr	r1, [sp, #8]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fd98 	bl	80005a0 <memcpy>
    bp += s1;
 8000a70:	9a02      	ldr	r2, [sp, #8]
 8000a72:	9b05      	ldr	r3, [sp, #20]
 8000a74:	4413      	add	r3, r2
 8000a76:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 8000a78:	9a01      	ldr	r2, [sp, #4]
 8000a7a:	9b05      	ldr	r3, [sp, #20]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	9304      	str	r3, [sp, #16]
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8000a80:	9b03      	ldr	r3, [sp, #12]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	9a04      	ldr	r2, [sp, #16]
 8000a86:	9902      	ldr	r1, [sp, #8]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fd89 	bl	80005a0 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8000a8e:	9b03      	ldr	r3, [sp, #12]
 8000a90:	68da      	ldr	r2, [r3, #12]
 8000a92:	9b04      	ldr	r3, [sp, #16]
 8000a94:	441a      	add	r2, r3
 8000a96:	9b03      	ldr	r3, [sp, #12]
 8000a98:	615a      	str	r2, [r3, #20]
 8000a9a:	e00a      	b.n	8000ab2 <oq_write+0xa2>
  }
  else {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000a9c:	9b03      	ldr	r3, [sp, #12]
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	9a01      	ldr	r2, [sp, #4]
 8000aa2:	9902      	ldr	r1, [sp, #8]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fd7b 	bl	80005a0 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8000aaa:	9b03      	ldr	r3, [sp, #12]
 8000aac:	68da      	ldr	r2, [r3, #12]
 8000aae:	9b03      	ldr	r3, [sp, #12]
 8000ab0:	615a      	str	r2, [r3, #20]
  }

  oqp->q_counter -= n;
 8000ab2:	9b03      	ldr	r3, [sp, #12]
 8000ab4:	689a      	ldr	r2, [r3, #8]
 8000ab6:	9b01      	ldr	r3, [sp, #4]
 8000ab8:	1ad2      	subs	r2, r2, r3
 8000aba:	9b03      	ldr	r3, [sp, #12]
 8000abc:	609a      	str	r2, [r3, #8]
  return n;
 8000abe:	9b01      	ldr	r3, [sp, #4]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	b007      	add	sp, #28
 8000ac4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000ad0 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
 8000ad0:	b500      	push	{lr}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	9003      	str	r0, [sp, #12]
 8000ad6:	9102      	str	r1, [sp, #8]
 8000ad8:	9201      	str	r2, [sp, #4]
 8000ada:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&iqp->q_waiting);
 8000adc:	9b03      	ldr	r3, [sp, #12]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ff06 	bl	80008f0 <osalThreadQueueObjectInit.lto_priv.1>
  iqp->q_counter = 0;
 8000ae4:	9b03      	ldr	r3, [sp, #12]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
 8000aea:	9b03      	ldr	r3, [sp, #12]
 8000aec:	9a02      	ldr	r2, [sp, #8]
 8000aee:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 8000af0:	9b03      	ldr	r3, [sp, #12]
 8000af2:	9a02      	ldr	r2, [sp, #8]
 8000af4:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 8000af6:	9b03      	ldr	r3, [sp, #12]
 8000af8:	9a02      	ldr	r2, [sp, #8]
 8000afa:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
 8000afc:	9a02      	ldr	r2, [sp, #8]
 8000afe:	9b01      	ldr	r3, [sp, #4]
 8000b00:	441a      	add	r2, r3
 8000b02:	9b03      	ldr	r3, [sp, #12]
 8000b04:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
 8000b06:	9b03      	ldr	r3, [sp, #12]
 8000b08:	9a00      	ldr	r2, [sp, #0]
 8000b0a:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 8000b0c:	9b03      	ldr	r3, [sp, #12]
 8000b0e:	9a06      	ldr	r2, [sp, #24]
 8000b10:	621a      	str	r2, [r3, #32]
}
 8000b12:	b005      	add	sp, #20
 8000b14:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000b20 <iqPutI>:
 * @retval MSG_OK       if the operation has been completed with success.
 * @retval MSG_TIMEOUT  if the queue is full.
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 8000b20:	b500      	push	{lr}
 8000b22:	b083      	sub	sp, #12
 8000b24:	9001      	str	r0, [sp, #4]
 8000b26:	460b      	mov	r3, r1
 8000b28:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 8000b2c:	9b01      	ldr	r3, [sp, #4]
 8000b2e:	695a      	ldr	r2, [r3, #20]
 8000b30:	9b01      	ldr	r3, [sp, #4]
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d105      	bne.n	8000b44 <iqPutI+0x24>
 8000b38:	9b01      	ldr	r3, [sp, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <iqPutI+0x24>
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <iqPutI+0x26>
 8000b44:	2300      	movs	r3, #0
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	f083 0301 	eor.w	r3, r3, #1
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d01d      	beq.n	8000b92 <iqPutI+0x72>
    iqp->q_counter++;
 8000b56:	9b01      	ldr	r3, [sp, #4]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	9b01      	ldr	r3, [sp, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
    *iqp->q_wrptr++ = b;
 8000b60:	9b01      	ldr	r3, [sp, #4]
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	1c59      	adds	r1, r3, #1
 8000b66:	9a01      	ldr	r2, [sp, #4]
 8000b68:	6151      	str	r1, [r2, #20]
 8000b6a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000b6e:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8000b70:	9b01      	ldr	r3, [sp, #4]
 8000b72:	695a      	ldr	r2, [r3, #20]
 8000b74:	9b01      	ldr	r3, [sp, #4]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d303      	bcc.n	8000b84 <iqPutI+0x64>
      iqp->q_wrptr = iqp->q_buffer;
 8000b7c:	9b01      	ldr	r3, [sp, #4]
 8000b7e:	68da      	ldr	r2, [r3, #12]
 8000b80:	9b01      	ldr	r3, [sp, #4]
 8000b82:	615a      	str	r2, [r3, #20]
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 8000b84:	9b01      	ldr	r3, [sp, #4]
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fed1 	bl	8000930 <osalThreadDequeueNextI.lto_priv.1>

    return MSG_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e001      	b.n	8000b96 <iqPutI+0x76>
  }

  return MSG_TIMEOUT;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	b003      	add	sp, #12
 8000b9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b9e:	bf00      	nop

08000ba0 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8000ba0:	b500      	push	{lr}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	9001      	str	r0, [sp, #4]
 8000ba6:	9100      	str	r1, [sp, #0]
  uint8_t b;

  osalSysLock();
 8000ba8:	f7ff fe92 	bl	80008d0 <osalSysLock.lto_priv.1>
 8000bac:	e00c      	b.n	8000bc8 <iqGetTimeout+0x28>

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8000bae:	9b01      	ldr	r3, [sp, #4]
 8000bb0:	9900      	ldr	r1, [sp, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff feac 	bl	8000910 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8000bb8:	9002      	str	r0, [sp, #8]
    if (msg < MSG_OK) {
 8000bba:	9b02      	ldr	r3, [sp, #8]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	da03      	bge.n	8000bc8 <iqGetTimeout+0x28>
      osalSysUnlock();
 8000bc0:	f7ff fe8e 	bl	80008e0 <osalSysUnlock.lto_priv.1>
      return msg;
 8000bc4:	9b02      	ldr	r3, [sp, #8]
 8000bc6:	e026      	b.n	8000c16 <iqGetTimeout+0x76>
  while (iqIsEmptyI(iqp)) {
 8000bc8:	9b01      	ldr	r3, [sp, #4]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0ee      	beq.n	8000bae <iqGetTimeout+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8000bd0:	9b01      	ldr	r3, [sp, #4]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	1e5a      	subs	r2, r3, #1
 8000bd6:	9b01      	ldr	r3, [sp, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
 8000bda:	9b01      	ldr	r3, [sp, #4]
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	1c59      	adds	r1, r3, #1
 8000be0:	9a01      	ldr	r2, [sp, #4]
 8000be2:	6191      	str	r1, [r2, #24]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	f88d 300f 	strb.w	r3, [sp, #15]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000bea:	9b01      	ldr	r3, [sp, #4]
 8000bec:	699a      	ldr	r2, [r3, #24]
 8000bee:	9b01      	ldr	r3, [sp, #4]
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d303      	bcc.n	8000bfe <iqGetTimeout+0x5e>
    iqp->q_rdptr = iqp->q_buffer;
 8000bf6:	9b01      	ldr	r3, [sp, #4]
 8000bf8:	68da      	ldr	r2, [r3, #12]
 8000bfa:	9b01      	ldr	r3, [sp, #4]
 8000bfc:	619a      	str	r2, [r3, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 8000bfe:	9b01      	ldr	r3, [sp, #4]
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <iqGetTimeout+0x6e>
    iqp->q_notify(iqp);
 8000c06:	9b01      	ldr	r3, [sp, #4]
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	9801      	ldr	r0, [sp, #4]
 8000c0c:	4798      	blx	r3
  }

  osalSysUnlock();
 8000c0e:	f7ff fe67 	bl	80008e0 <osalSysUnlock.lto_priv.1>

  return (msg_t)b;
 8000c12:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	b005      	add	sp, #20
 8000c1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c1e:	bf00      	nop

08000c20 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 8000c20:	b500      	push	{lr}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	9003      	str	r0, [sp, #12]
 8000c26:	9102      	str	r1, [sp, #8]
 8000c28:	9201      	str	r2, [sp, #4]
 8000c2a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = iqp->q_notify;
 8000c2c:	9b03      	ldr	r3, [sp, #12]
 8000c2e:	69db      	ldr	r3, [r3, #28]
 8000c30:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8000c32:	9b01      	ldr	r3, [sp, #4]
 8000c34:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);

  osalSysLock();
 8000c36:	f7ff fe4b 	bl	80008d0 <osalSysLock.lto_priv.1>
 8000c3a:	e024      	b.n	8000c86 <iqReadTimeout+0x66>

  while (n > 0U) {
    size_t done;

    done = iq_read(iqp, bp, n);
 8000c3c:	9a01      	ldr	r2, [sp, #4]
 8000c3e:	9902      	ldr	r1, [sp, #8]
 8000c40:	9803      	ldr	r0, [sp, #12]
 8000c42:	f7ff fe85 	bl	8000950 <iq_read>
 8000c46:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 8000c48:	9b05      	ldr	r3, [sp, #20]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d109      	bne.n	8000c62 <iqReadTimeout+0x42>
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8000c4e:	9b03      	ldr	r3, [sp, #12]
 8000c50:	9900      	ldr	r1, [sp, #0]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fe5c 	bl	8000910 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8000c58:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8000c5a:	9b04      	ldr	r3, [sp, #16]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d115      	bne.n	8000c8c <iqReadTimeout+0x6c>
 8000c60:	e011      	b.n	8000c86 <iqReadTimeout+0x66>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 8000c62:	9b07      	ldr	r3, [sp, #28]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d002      	beq.n	8000c6e <iqReadTimeout+0x4e>
        nfy(iqp);
 8000c68:	9b07      	ldr	r3, [sp, #28]
 8000c6a:	9803      	ldr	r0, [sp, #12]
 8000c6c:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 8000c6e:	f7ff fe37 	bl	80008e0 <osalSysUnlock.lto_priv.1>

      n  -= done;
 8000c72:	9a01      	ldr	r2, [sp, #4]
 8000c74:	9b05      	ldr	r3, [sp, #20]
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	9301      	str	r3, [sp, #4]
      bp += done;
 8000c7a:	9a02      	ldr	r2, [sp, #8]
 8000c7c:	9b05      	ldr	r3, [sp, #20]
 8000c7e:	4413      	add	r3, r2
 8000c80:	9302      	str	r3, [sp, #8]

      osalSysLock();
 8000c82:	f7ff fe25 	bl	80008d0 <osalSysLock.lto_priv.1>
  while (n > 0U) {
 8000c86:	9b01      	ldr	r3, [sp, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1d7      	bne.n	8000c3c <iqReadTimeout+0x1c>
    }
  }

  osalSysUnlock();
 8000c8c:	f7ff fe28 	bl	80008e0 <osalSysUnlock.lto_priv.1>
  return max - n;
 8000c90:	9a06      	ldr	r2, [sp, #24]
 8000c92:	9b01      	ldr	r3, [sp, #4]
 8000c94:	1ad3      	subs	r3, r2, r3
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	b009      	add	sp, #36	; 0x24
 8000c9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c9e:	bf00      	nop

08000ca0 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
 8000ca0:	b500      	push	{lr}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	9003      	str	r0, [sp, #12]
 8000ca6:	9102      	str	r1, [sp, #8]
 8000ca8:	9201      	str	r2, [sp, #4]
 8000caa:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&oqp->q_waiting);
 8000cac:	9b03      	ldr	r3, [sp, #12]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fe1e 	bl	80008f0 <osalThreadQueueObjectInit.lto_priv.1>
  oqp->q_counter = size;
 8000cb4:	9b03      	ldr	r3, [sp, #12]
 8000cb6:	9a01      	ldr	r2, [sp, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
 8000cba:	9b03      	ldr	r3, [sp, #12]
 8000cbc:	9a02      	ldr	r2, [sp, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 8000cc0:	9b03      	ldr	r3, [sp, #12]
 8000cc2:	9a02      	ldr	r2, [sp, #8]
 8000cc4:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 8000cc6:	9b03      	ldr	r3, [sp, #12]
 8000cc8:	9a02      	ldr	r2, [sp, #8]
 8000cca:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
 8000ccc:	9a02      	ldr	r2, [sp, #8]
 8000cce:	9b01      	ldr	r3, [sp, #4]
 8000cd0:	441a      	add	r2, r3
 8000cd2:	9b03      	ldr	r3, [sp, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
 8000cd6:	9b03      	ldr	r3, [sp, #12]
 8000cd8:	9a00      	ldr	r2, [sp, #0]
 8000cda:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
 8000cdc:	9b03      	ldr	r3, [sp, #12]
 8000cde:	9a06      	ldr	r2, [sp, #24]
 8000ce0:	621a      	str	r2, [r3, #32]
}
 8000ce2:	b005      	add	sp, #20
 8000ce4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000cf0 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8000cf0:	b500      	push	{lr}
 8000cf2:	b087      	sub	sp, #28
 8000cf4:	9003      	str	r0, [sp, #12]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	9201      	str	r2, [sp, #4]
 8000cfa:	f88d 300b 	strb.w	r3, [sp, #11]

  osalSysLock();
 8000cfe:	f7ff fde7 	bl	80008d0 <osalSysLock.lto_priv.1>
 8000d02:	e00c      	b.n	8000d1e <oqPutTimeout+0x2e>

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000d04:	9b03      	ldr	r3, [sp, #12]
 8000d06:	9901      	ldr	r1, [sp, #4]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fe01 	bl	8000910 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8000d0e:	9005      	str	r0, [sp, #20]
    if (msg < MSG_OK) {
 8000d10:	9b05      	ldr	r3, [sp, #20]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	da03      	bge.n	8000d1e <oqPutTimeout+0x2e>
      osalSysUnlock();
 8000d16:	f7ff fde3 	bl	80008e0 <osalSysUnlock.lto_priv.1>
      return msg;
 8000d1a:	9b05      	ldr	r3, [sp, #20]
 8000d1c:	e025      	b.n	8000d6a <oqPutTimeout+0x7a>
  while (oqIsFullI(oqp)) {
 8000d1e:	9b03      	ldr	r3, [sp, #12]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0ee      	beq.n	8000d04 <oqPutTimeout+0x14>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8000d26:	9b03      	ldr	r3, [sp, #12]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	1e5a      	subs	r2, r3, #1
 8000d2c:	9b03      	ldr	r3, [sp, #12]
 8000d2e:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
 8000d30:	9b03      	ldr	r3, [sp, #12]
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	1c59      	adds	r1, r3, #1
 8000d36:	9a03      	ldr	r2, [sp, #12]
 8000d38:	6151      	str	r1, [r2, #20]
 8000d3a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8000d3e:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000d40:	9b03      	ldr	r3, [sp, #12]
 8000d42:	695a      	ldr	r2, [r3, #20]
 8000d44:	9b03      	ldr	r3, [sp, #12]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d303      	bcc.n	8000d54 <oqPutTimeout+0x64>
    oqp->q_wrptr = oqp->q_buffer;
 8000d4c:	9b03      	ldr	r3, [sp, #12]
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	9b03      	ldr	r3, [sp, #12]
 8000d52:	615a      	str	r2, [r3, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8000d54:	9b03      	ldr	r3, [sp, #12]
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <oqPutTimeout+0x74>
    oqp->q_notify(oqp);
 8000d5c:	9b03      	ldr	r3, [sp, #12]
 8000d5e:	69db      	ldr	r3, [r3, #28]
 8000d60:	9803      	ldr	r0, [sp, #12]
 8000d62:	4798      	blx	r3
  }

  osalSysUnlock();
 8000d64:	f7ff fdbc 	bl	80008e0 <osalSysUnlock.lto_priv.1>

  return MSG_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	b007      	add	sp, #28
 8000d6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d72:	bf00      	nop
	...

08000d80 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
 8000d80:	b500      	push	{lr}
 8000d82:	b085      	sub	sp, #20
 8000d84:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8000d86:	9b01      	ldr	r3, [sp, #4]
 8000d88:	695a      	ldr	r2, [r3, #20]
 8000d8a:	9b01      	ldr	r3, [sp, #4]
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d105      	bne.n	8000d9e <oqGetI+0x1e>
 8000d92:	9b01      	ldr	r3, [sp, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <oqGetI+0x1e>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <oqGetI+0x20>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	f083 0301 	eor.w	r3, r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d01e      	beq.n	8000dee <oqGetI+0x6e>
    uint8_t b;

    oqp->q_counter++;
 8000db0:	9b01      	ldr	r3, [sp, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	9b01      	ldr	r3, [sp, #4]
 8000db8:	609a      	str	r2, [r3, #8]
    b = *oqp->q_rdptr++;
 8000dba:	9b01      	ldr	r3, [sp, #4]
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	1c59      	adds	r1, r3, #1
 8000dc0:	9a01      	ldr	r2, [sp, #4]
 8000dc2:	6191      	str	r1, [r2, #24]
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	f88d 300f 	strb.w	r3, [sp, #15]
    if (oqp->q_rdptr >= oqp->q_top) {
 8000dca:	9b01      	ldr	r3, [sp, #4]
 8000dcc:	699a      	ldr	r2, [r3, #24]
 8000dce:	9b01      	ldr	r3, [sp, #4]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d303      	bcc.n	8000dde <oqGetI+0x5e>
      oqp->q_rdptr = oqp->q_buffer;
 8000dd6:	9b01      	ldr	r3, [sp, #4]
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	9b01      	ldr	r3, [sp, #4]
 8000ddc:	619a      	str	r2, [r3, #24]
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 8000dde:	9b01      	ldr	r3, [sp, #4]
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fda4 	bl	8000930 <osalThreadDequeueNextI.lto_priv.1>

    return (msg_t)b;
 8000de8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000dec:	e001      	b.n	8000df2 <oqGetI+0x72>
  }

  return MSG_TIMEOUT;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	b005      	add	sp, #20
 8000df6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dfa:	bf00      	nop
 8000dfc:	0000      	movs	r0, r0
	...

08000e00 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8000e00:	b500      	push	{lr}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	9003      	str	r0, [sp, #12]
 8000e06:	9102      	str	r1, [sp, #8]
 8000e08:	9201      	str	r2, [sp, #4]
 8000e0a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = oqp->q_notify;
 8000e0c:	9b03      	ldr	r3, [sp, #12]
 8000e0e:	69db      	ldr	r3, [r3, #28]
 8000e10:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8000e12:	9b01      	ldr	r3, [sp, #4]
 8000e14:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);

  osalSysLock();
 8000e16:	f7ff fd5b 	bl	80008d0 <osalSysLock.lto_priv.1>
 8000e1a:	e024      	b.n	8000e66 <oqWriteTimeout+0x66>

  while (n > 0U) {
    size_t done;

    done = oq_write(oqp, bp, n);
 8000e1c:	9a01      	ldr	r2, [sp, #4]
 8000e1e:	9902      	ldr	r1, [sp, #8]
 8000e20:	9803      	ldr	r0, [sp, #12]
 8000e22:	f7ff fdf5 	bl	8000a10 <oq_write>
 8000e26:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 8000e28:	9b05      	ldr	r3, [sp, #20]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d109      	bne.n	8000e42 <oqWriteTimeout+0x42>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000e2e:	9b03      	ldr	r3, [sp, #12]
 8000e30:	9900      	ldr	r1, [sp, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fd6c 	bl	8000910 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8000e38:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8000e3a:	9b04      	ldr	r3, [sp, #16]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d115      	bne.n	8000e6c <oqWriteTimeout+0x6c>
 8000e40:	e011      	b.n	8000e66 <oqWriteTimeout+0x66>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8000e42:	9b07      	ldr	r3, [sp, #28]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <oqWriteTimeout+0x4e>
        nfy(oqp);
 8000e48:	9b07      	ldr	r3, [sp, #28]
 8000e4a:	9803      	ldr	r0, [sp, #12]
 8000e4c:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 8000e4e:	f7ff fd47 	bl	80008e0 <osalSysUnlock.lto_priv.1>

      n  -= done;
 8000e52:	9a01      	ldr	r2, [sp, #4]
 8000e54:	9b05      	ldr	r3, [sp, #20]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	9301      	str	r3, [sp, #4]
      bp += done;
 8000e5a:	9a02      	ldr	r2, [sp, #8]
 8000e5c:	9b05      	ldr	r3, [sp, #20]
 8000e5e:	4413      	add	r3, r2
 8000e60:	9302      	str	r3, [sp, #8]

      osalSysLock();
 8000e62:	f7ff fd35 	bl	80008d0 <osalSysLock.lto_priv.1>
  while (n > 0U) {
 8000e66:	9b01      	ldr	r3, [sp, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1d7      	bne.n	8000e1c <oqWriteTimeout+0x1c>
    }
  }

  osalSysUnlock();
 8000e6c:	f7ff fd38 	bl	80008e0 <osalSysUnlock.lto_priv.1>
  return max - n;
 8000e70:	9a06      	ldr	r2, [sp, #24]
 8000e72:	9b01      	ldr	r3, [sp, #4]
 8000e74:	1ad3      	subs	r3, r2, r3
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	b009      	add	sp, #36	; 0x24
 8000e7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e7e:	bf00      	nop

08000e80 <osalThreadSleep.lto_priv.0>:
static inline void osalThreadSleep(sysinterval_t delay) {
 8000e80:	b500      	push	{lr}
 8000e82:	b083      	sub	sp, #12
 8000e84:	9001      	str	r0, [sp, #4]
  chThdSleep(delay);
 8000e86:	9801      	ldr	r0, [sp, #4]
 8000e88:	f002 f89a 	bl	8002fc0 <chThdSleep>
}
 8000e8c:	b003      	add	sp, #12
 8000e8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e92:	bf00      	nop
	...

08000ea0 <flashWaitErase>:
 * @return              An error code.
 * @retval FLASH_NO_ERROR if there is no erase operation in progress.
 * @retval FLASH_ERROR_ERASE if the erase operation failed.
 * @retval FLASH_ERROR_HW_FAILURE if access to the memory failed.
 */
flash_error_t flashWaitErase(BaseFlash *devp) {
 8000ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	9001      	str	r0, [sp, #4]
  while (true) {
    flash_error_t err;
    uint32_t msec;

    /* Checking operation state.*/
    err = flashQueryErase(devp, &msec);
 8000ea6:	9b01      	ldr	r3, [sp, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	aa02      	add	r2, sp, #8
 8000eae:	4611      	mov	r1, r2
 8000eb0:	9801      	ldr	r0, [sp, #4]
 8000eb2:	4798      	blx	r3
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	f88d 300f 	strb.w	r3, [sp, #15]
    if (err != FLASH_BUSY_ERASING) {
 8000eba:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d002      	beq.n	8000ec8 <flashWaitErase+0x28>
      return err;
 8000ec2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000ec6:	e04e      	b.n	8000f66 <flashWaitErase+0xc6>
    }

    /* Interval because nice waiting.*/
    osalThreadSleepMilliseconds(msec);
 8000ec8:	9b02      	ldr	r3, [sp, #8]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f04f 0100 	mov.w	r1, #0
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	f04f 0400 	mov.w	r4, #0
 8000ed8:	f04f 0500 	mov.w	r5, #0
 8000edc:	009d      	lsls	r5, r3, #2
 8000ede:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8000ee2:	0094      	lsls	r4, r2, #2
 8000ee4:	4622      	mov	r2, r4
 8000ee6:	462b      	mov	r3, r5
 8000ee8:	1812      	adds	r2, r2, r0
 8000eea:	eb41 0303 	adc.w	r3, r1, r3
 8000eee:	f04f 0400 	mov.w	r4, #0
 8000ef2:	f04f 0500 	mov.w	r5, #0
 8000ef6:	00dd      	lsls	r5, r3, #3
 8000ef8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8000efc:	00d4      	lsls	r4, r2, #3
 8000efe:	4622      	mov	r2, r4
 8000f00:	462b      	mov	r3, r5
 8000f02:	1a12      	subs	r2, r2, r0
 8000f04:	eb63 0301 	sbc.w	r3, r3, r1
 8000f08:	f04f 0400 	mov.w	r4, #0
 8000f0c:	f04f 0500 	mov.w	r5, #0
 8000f10:	011d      	lsls	r5, r3, #4
 8000f12:	ea45 7512 	orr.w	r5, r5, r2, lsr #28
 8000f16:	0114      	lsls	r4, r2, #4
 8000f18:	4622      	mov	r2, r4
 8000f1a:	462b      	mov	r3, r5
 8000f1c:	1812      	adds	r2, r2, r0
 8000f1e:	eb41 0303 	adc.w	r3, r1, r3
 8000f22:	f04f 0000 	mov.w	r0, #0
 8000f26:	f04f 0100 	mov.w	r1, #0
 8000f2a:	0119      	lsls	r1, r3, #4
 8000f2c:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8000f30:	0110      	lsls	r0, r2, #4
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	1886      	adds	r6, r0, r2
 8000f44:	eb41 0703 	adc.w	r7, r1, r3
 8000f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	4630      	mov	r0, r6
 8000f52:	4639      	mov	r1, r7
 8000f54:	f7ff f9aa 	bl	80002ac <__aeabi_uldivmod>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff8e 	bl	8000e80 <osalThreadSleep.lto_priv.0>
 8000f64:	e79f      	b.n	8000ea6 <flashWaitErase+0x6>
  }
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	b005      	add	sp, #20
 8000f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6c:	0000      	movs	r0, r0
	...

08000f70 <flashGetSectorOffset>:
 * @param[in] sector    flash sector number
 *
 * @return the offset of the sector
 */
flash_offset_t flashGetSectorOffset(BaseFlash *devp,
                                    flash_sector_t sector) {
 8000f70:	b500      	push	{lr}
 8000f72:	b085      	sub	sp, #20
 8000f74:	9001      	str	r0, [sp, #4]
 8000f76:	9100      	str	r1, [sp, #0]
  flash_offset_t offset;
  const flash_descriptor_t *descriptor = flashGetDescriptor(devp);
 8000f78:	9b01      	ldr	r3, [sp, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	9801      	ldr	r0, [sp, #4]
 8000f80:	4798      	blx	r3
 8000f82:	9002      	str	r0, [sp, #8]

  osalDbgAssert(sector < descriptor->sectors_count, "invalid sector");

  if (descriptor->sectors != NULL) {
 8000f84:	9b02      	ldr	r3, [sp, #8]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d007      	beq.n	8000f9c <flashGetSectorOffset+0x2c>
    offset = descriptor->sectors[sector].offset;
 8000f8c:	9b02      	ldr	r3, [sp, #8]
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	9b00      	ldr	r3, [sp, #0]
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4413      	add	r3, r2
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	9303      	str	r3, [sp, #12]
 8000f9a:	e005      	b.n	8000fa8 <flashGetSectorOffset+0x38>
  }
  else {
    offset = (flash_offset_t)sector * (flash_offset_t)descriptor->sectors_size;
 8000f9c:	9b02      	ldr	r3, [sp, #8]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	9b00      	ldr	r3, [sp, #0]
 8000fa2:	fb02 f303 	mul.w	r3, r2, r3
 8000fa6:	9303      	str	r3, [sp, #12]
  }

  return offset;
 8000fa8:	9b03      	ldr	r3, [sp, #12]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	b005      	add	sp, #20
 8000fae:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fb2:	bf00      	nop
	...

08000fc0 <chSysLock.lto_priv.2>:
static inline void chSysLock(void) {
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	2320      	movs	r3, #32
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	9b01      	ldr	r3, [sp, #4]
 8000fc8:	f383 8811 	msr	BASEPRI, r3
}
 8000fcc:	b002      	add	sp, #8
 8000fce:	4770      	bx	lr

08000fd0 <chSysUnlock.lto_priv.2>:
static inline void chSysUnlock(void) {
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	9b01      	ldr	r3, [sp, #4]
 8000fd8:	f383 8811 	msr	BASEPRI, r3
}
 8000fdc:	b002      	add	sp, #8
 8000fde:	4770      	bx	lr

08000fe0 <osalSysLock.lto_priv.2>:
static inline void osalSysLock(void) {
 8000fe0:	b508      	push	{r3, lr}
  chSysLock();
 8000fe2:	f7ff ffed 	bl	8000fc0 <chSysLock.lto_priv.2>
}
 8000fe6:	bd08      	pop	{r3, pc}
	...

08000ff0 <osalSysUnlock.lto_priv.2>:
static inline void osalSysUnlock(void) {
 8000ff0:	b508      	push	{r3, lr}
  chSysUnlock();
 8000ff2:	f7ff ffed 	bl	8000fd0 <chSysUnlock.lto_priv.2>
}
 8000ff6:	bd08      	pop	{r3, pc}
	...

08001000 <eflInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void eflInit(void) {
 8001000:	b508      	push	{r3, lr}

  efl_lld_init();
 8001002:	f000 fcd5 	bl	80019b0 <efl_lld_init>
}
 8001006:	bd08      	pop	{r3, pc}
	...

08001010 <eflObjectInit>:
 *
 * @param[out] eflp     pointer to a @p EFlashDriver structure
 *
 * @init
 */
void eflObjectInit(EFlashDriver *eflp) {
 8001010:	b082      	sub	sp, #8
 8001012:	9001      	str	r0, [sp, #4]

  eflp->vmt = &vmt;
 8001014:	9b01      	ldr	r3, [sp, #4]
 8001016:	4a03      	ldr	r2, [pc, #12]	; (8001024 <eflObjectInit+0x14>)
 8001018:	601a      	str	r2, [r3, #0]
  eflp->state = FLASH_STOP;
 800101a:	9b01      	ldr	r3, [sp, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	711a      	strb	r2, [r3, #4]
}
 8001020:	b002      	add	sp, #8
 8001022:	4770      	bx	lr
 8001024:	08007a24 	.word	0x08007a24
	...

08001030 <eflStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void eflStart(EFlashDriver *eflp, const EFlashConfig *config) {
 8001030:	b500      	push	{lr}
 8001032:	b083      	sub	sp, #12
 8001034:	9001      	str	r0, [sp, #4]
 8001036:	9100      	str	r1, [sp, #0]

  osalDbgCheck(eflp != NULL);

  osalSysLock();
 8001038:	f7ff ffd2 	bl	8000fe0 <osalSysLock.lto_priv.2>

  osalDbgAssert((eflp->state == FLASH_STOP) || (eflp->state == FLASH_READY),
                "invalid state");
  eflp->config = config;
 800103c:	9b01      	ldr	r3, [sp, #4]
 800103e:	9a00      	ldr	r2, [sp, #0]
 8001040:	609a      	str	r2, [r3, #8]
  efl_lld_start(eflp);
 8001042:	9801      	ldr	r0, [sp, #4]
 8001044:	f000 fcc4 	bl	80019d0 <efl_lld_start>
  eflp->state = FLASH_READY;
 8001048:	9b01      	ldr	r3, [sp, #4]
 800104a:	2202      	movs	r2, #2
 800104c:	711a      	strb	r2, [r3, #4]

  osalSysUnlock();
 800104e:	f7ff ffcf 	bl	8000ff0 <osalSysUnlock.lto_priv.2>
}
 8001052:	b003      	add	sp, #12
 8001054:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001060 <chSysLock.lto_priv.3>:
static inline void chSysLock(void) {
 8001060:	b082      	sub	sp, #8
 8001062:	2320      	movs	r3, #32
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	9b01      	ldr	r3, [sp, #4]
 8001068:	f383 8811 	msr	BASEPRI, r3
}
 800106c:	b002      	add	sp, #8
 800106e:	4770      	bx	lr

08001070 <chSysUnlock.lto_priv.3>:
static inline void chSysUnlock(void) {
 8001070:	b082      	sub	sp, #8
 8001072:	2300      	movs	r3, #0
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	9b01      	ldr	r3, [sp, #4]
 8001078:	f383 8811 	msr	BASEPRI, r3
}
 800107c:	b002      	add	sp, #8
 800107e:	4770      	bx	lr

08001080 <chEvtObjectInit.lto_priv.0>:
 *
 * @param[in] esp       pointer to the @p event_source_t structure
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {
 8001080:	b082      	sub	sp, #8
 8001082:	9001      	str	r0, [sp, #4]

  esp->next = (event_listener_t *)esp;
 8001084:	9b01      	ldr	r3, [sp, #4]
 8001086:	9a01      	ldr	r2, [sp, #4]
 8001088:	601a      	str	r2, [r3, #0]
}
 800108a:	b002      	add	sp, #8
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <osalSysLock.lto_priv.3>:
static inline void osalSysLock(void) {
 8001090:	b508      	push	{r3, lr}
  chSysLock();
 8001092:	f7ff ffe5 	bl	8001060 <chSysLock.lto_priv.3>
}
 8001096:	bd08      	pop	{r3, pc}
	...

080010a0 <osalSysUnlock.lto_priv.3>:
static inline void osalSysUnlock(void) {
 80010a0:	b508      	push	{r3, lr}
  chSysUnlock();
 80010a2:	f7ff ffe5 	bl	8001070 <chSysUnlock.lto_priv.3>
}
 80010a6:	bd08      	pop	{r3, pc}
	...

080010b0 <osalEventObjectInit>:
 *
 * @param[out] esp      pointer to the event source object
 *
 * @init
 */
static inline void osalEventObjectInit(event_source_t *esp) {
 80010b0:	b500      	push	{lr}
 80010b2:	b083      	sub	sp, #12
 80010b4:	9001      	str	r0, [sp, #4]

  chEvtObjectInit(esp);
 80010b6:	9801      	ldr	r0, [sp, #4]
 80010b8:	f7ff ffe2 	bl	8001080 <chEvtObjectInit.lto_priv.0>
}
 80010bc:	b003      	add	sp, #12
 80010be:	f85d fb04 	ldr.w	pc, [sp], #4
 80010c2:	bf00      	nop
	...

080010d0 <osalEventBroadcastFlagsI.lto_priv.0>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
 80010d0:	b500      	push	{lr}
 80010d2:	b083      	sub	sp, #12
 80010d4:	9001      	str	r0, [sp, #4]
 80010d6:	9100      	str	r1, [sp, #0]

  chEvtBroadcastFlagsI(esp, flags);
 80010d8:	9900      	ldr	r1, [sp, #0]
 80010da:	9801      	ldr	r0, [sp, #4]
 80010dc:	f002 f878 	bl	80031d0 <chEvtBroadcastFlagsI>
}
 80010e0:	b003      	add	sp, #12
 80010e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80010e6:	bf00      	nop
	...

080010f0 <_write>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 80010f0:	b500      	push	{lr}
 80010f2:	b085      	sub	sp, #20
 80010f4:	9003      	str	r0, [sp, #12]
 80010f6:	9102      	str	r1, [sp, #8]
 80010f8:	9201      	str	r2, [sp, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80010fa:	9b03      	ldr	r3, [sp, #12]
 80010fc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	9a01      	ldr	r2, [sp, #4]
 8001106:	9902      	ldr	r1, [sp, #8]
 8001108:	f7ff fe7a 	bl	8000e00 <oqWriteTimeout>
 800110c:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
 800110e:	4618      	mov	r0, r3
 8001110:	b005      	add	sp, #20
 8001112:	f85d fb04 	ldr.w	pc, [sp], #4
 8001116:	bf00      	nop
	...

08001120 <_read>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8001120:	b500      	push	{lr}
 8001122:	b085      	sub	sp, #20
 8001124:	9003      	str	r0, [sp, #12]
 8001126:	9102      	str	r1, [sp, #8]
 8001128:	9201      	str	r2, [sp, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 800112a:	9b03      	ldr	r3, [sp, #12]
 800112c:	f103 000c 	add.w	r0, r3, #12
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	9a01      	ldr	r2, [sp, #4]
 8001136:	9902      	ldr	r1, [sp, #8]
 8001138:	f7ff fd72 	bl	8000c20 <iqReadTimeout>
 800113c:	4603      	mov	r3, r0
                       n, TIME_INFINITE);
}
 800113e:	4618      	mov	r0, r3
 8001140:	b005      	add	sp, #20
 8001142:	f85d fb04 	ldr.w	pc, [sp], #4
 8001146:	bf00      	nop
	...

08001150 <_put.lto_priv.0>:

static msg_t _put(void *ip, uint8_t b) {
 8001150:	b500      	push	{lr}
 8001152:	b083      	sub	sp, #12
 8001154:	9001      	str	r0, [sp, #4]
 8001156:	460b      	mov	r3, r1
 8001158:	f88d 3003 	strb.w	r3, [sp, #3]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 800115c:	9b01      	ldr	r3, [sp, #4]
 800115e:	3330      	adds	r3, #48	; 0x30
 8001160:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8001164:	f04f 32ff 	mov.w	r2, #4294967295
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fdc1 	bl	8000cf0 <oqPutTimeout>
 800116e:	4603      	mov	r3, r0
}
 8001170:	4618      	mov	r0, r3
 8001172:	b003      	add	sp, #12
 8001174:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001180 <_get.lto_priv.0>:

static msg_t _get(void *ip) {
 8001180:	b500      	push	{lr}
 8001182:	b083      	sub	sp, #12
 8001184:	9001      	str	r0, [sp, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001186:	9b01      	ldr	r3, [sp, #4]
 8001188:	330c      	adds	r3, #12
 800118a:	f04f 31ff 	mov.w	r1, #4294967295
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fd06 	bl	8000ba0 <iqGetTimeout>
 8001194:	4603      	mov	r3, r0
}
 8001196:	4618      	mov	r0, r3
 8001198:	b003      	add	sp, #12
 800119a:	f85d fb04 	ldr.w	pc, [sp], #4
 800119e:	bf00      	nop

080011a0 <_putt>:

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 80011a0:	b500      	push	{lr}
 80011a2:	b085      	sub	sp, #20
 80011a4:	9003      	str	r0, [sp, #12]
 80011a6:	460b      	mov	r3, r1
 80011a8:	9201      	str	r2, [sp, #4]
 80011aa:	f88d 300b 	strb.w	r3, [sp, #11]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80011ae:	9b03      	ldr	r3, [sp, #12]
 80011b0:	3330      	adds	r3, #48	; 0x30
 80011b2:	f89d 100b 	ldrb.w	r1, [sp, #11]
 80011b6:	9a01      	ldr	r2, [sp, #4]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fd99 	bl	8000cf0 <oqPutTimeout>
 80011be:	4603      	mov	r3, r0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	b005      	add	sp, #20
 80011c4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080011d0 <_gett>:

static msg_t _gett(void *ip, sysinterval_t timeout) {
 80011d0:	b500      	push	{lr}
 80011d2:	b083      	sub	sp, #12
 80011d4:	9001      	str	r0, [sp, #4]
 80011d6:	9100      	str	r1, [sp, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80011d8:	9b01      	ldr	r3, [sp, #4]
 80011da:	330c      	adds	r3, #12
 80011dc:	9900      	ldr	r1, [sp, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fcde 	bl	8000ba0 <iqGetTimeout>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	b003      	add	sp, #12
 80011ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80011ee:	bf00      	nop

080011f0 <_writet>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {
 80011f0:	b500      	push	{lr}
 80011f2:	b085      	sub	sp, #20
 80011f4:	9003      	str	r0, [sp, #12]
 80011f6:	9102      	str	r1, [sp, #8]
 80011f8:	9201      	str	r2, [sp, #4]
 80011fa:	9300      	str	r3, [sp, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80011fc:	9b03      	ldr	r3, [sp, #12]
 80011fe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001202:	9b00      	ldr	r3, [sp, #0]
 8001204:	9a01      	ldr	r2, [sp, #4]
 8001206:	9902      	ldr	r1, [sp, #8]
 8001208:	f7ff fdfa 	bl	8000e00 <oqWriteTimeout>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	b005      	add	sp, #20
 8001212:	f85d fb04 	ldr.w	pc, [sp], #4
 8001216:	bf00      	nop
	...

08001220 <_readt>:

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {
 8001220:	b500      	push	{lr}
 8001222:	b085      	sub	sp, #20
 8001224:	9003      	str	r0, [sp, #12]
 8001226:	9102      	str	r1, [sp, #8]
 8001228:	9201      	str	r2, [sp, #4]
 800122a:	9300      	str	r3, [sp, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 800122c:	9b03      	ldr	r3, [sp, #12]
 800122e:	f103 000c 	add.w	r0, r3, #12
 8001232:	9b00      	ldr	r3, [sp, #0]
 8001234:	9a01      	ldr	r2, [sp, #4]
 8001236:	9902      	ldr	r1, [sp, #8]
 8001238:	f7ff fcf2 	bl	8000c20 <iqReadTimeout>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	b005      	add	sp, #20
 8001242:	f85d fb04 	ldr.w	pc, [sp], #4
 8001246:	bf00      	nop
	...

08001250 <_ctl>:

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8001250:	b086      	sub	sp, #24
 8001252:	9003      	str	r0, [sp, #12]
 8001254:	9102      	str	r1, [sp, #8]
 8001256:	9201      	str	r2, [sp, #4]
  SerialDriver *sdp = (SerialDriver *)ip;
 8001258:	9b03      	ldr	r3, [sp, #12]
 800125a:	9305      	str	r3, [sp, #20]

  osalDbgCheck(sdp != NULL);

  switch (operation) {
 800125c:	9b02      	ldr	r3, [sp, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <_ctl+0x16>
 8001262:	9b02      	ldr	r3, [sp, #8]
 8001264:	2b01      	cmp	r3, #1
    return sd_lld_control(sdp, operation, arg);
#else
    break;
#endif
  }
  return MSG_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	b006      	add	sp, #24
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop

08001270 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
 8001270:	b508      	push	{r3, lr}

  sd_lld_init();
 8001272:	f000 fecd 	bl	8002010 <sd_lld_init>
}
 8001276:	bd08      	pop	{r3, pc}
	...

08001280 <sdObjectInit>:
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {
 8001280:	b500      	push	{lr}
 8001282:	b083      	sub	sp, #12
 8001284:	9001      	str	r0, [sp, #4]

  sdp->vmt = &vmt;
 8001286:	9b01      	ldr	r3, [sp, #4]
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <sdObjectInit+0x24>)
 800128a:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
 800128c:	9b01      	ldr	r3, [sp, #4]
 800128e:	3304      	adds	r3, #4
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff0d 	bl	80010b0 <osalEventObjectInit>
  sdp->state = SD_STOP;
 8001296:	9b01      	ldr	r3, [sp, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	721a      	strb	r2, [r3, #8]
}
 800129c:	b003      	add	sp, #12
 800129e:	f85d fb04 	ldr.w	pc, [sp], #4
 80012a2:	bf00      	nop
 80012a4:	08007a44 	.word	0x08007a44
	...

080012b0 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 80012b0:	b500      	push	{lr}
 80012b2:	b083      	sub	sp, #12
 80012b4:	9001      	str	r0, [sp, #4]
 80012b6:	9100      	str	r1, [sp, #0]

  osalDbgCheck(sdp != NULL);

  osalSysLock();
 80012b8:	f7ff feea 	bl	8001090 <osalSysLock.lto_priv.3>
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
 80012bc:	9900      	ldr	r1, [sp, #0]
 80012be:	9801      	ldr	r0, [sp, #4]
 80012c0:	f000 fed6 	bl	8002070 <sd_lld_start>
  sdp->state = SD_READY;
 80012c4:	9b01      	ldr	r3, [sp, #4]
 80012c6:	2202      	movs	r2, #2
 80012c8:	721a      	strb	r2, [r3, #8]
  osalSysUnlock();
 80012ca:	f7ff fee9 	bl	80010a0 <osalSysUnlock.lto_priv.3>
}
 80012ce:	b003      	add	sp, #12
 80012d0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080012e0 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 80012e0:	b500      	push	{lr}
 80012e2:	b083      	sub	sp, #12
 80012e4:	9001      	str	r0, [sp, #4]
 80012e6:	460b      	mov	r3, r1
 80012e8:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80012ec:	9b01      	ldr	r3, [sp, #4]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d105      	bne.n	8001300 <sdIncomingDataI+0x20>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 80012f4:	9b01      	ldr	r3, [sp, #4]
 80012f6:	3304      	adds	r3, #4
 80012f8:	2104      	movs	r1, #4
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fee8 	bl	80010d0 <osalEventBroadcastFlagsI.lto_priv.0>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8001300:	9b01      	ldr	r3, [sp, #4]
 8001302:	330c      	adds	r3, #12
 8001304:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fc08 	bl	8000b20 <iqPutI>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	da06      	bge.n	8001324 <sdIncomingDataI+0x44>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 8001316:	9b01      	ldr	r3, [sp, #4]
 8001318:	3304      	adds	r3, #4
 800131a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fed6 	bl	80010d0 <osalEventBroadcastFlagsI.lto_priv.0>
}
 8001324:	b003      	add	sp, #12
 8001326:	f85d fb04 	ldr.w	pc, [sp], #4
 800132a:	bf00      	nop
 800132c:	0000      	movs	r0, r0
	...

08001330 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8001330:	b082      	sub	sp, #8
 8001332:	9001      	str	r0, [sp, #4]
 8001334:	9100      	str	r1, [sp, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001336:	9b00      	ldr	r3, [sp, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	4a11      	ldr	r2, [pc, #68]	; (8001380 <nvicEnableVector+0x50>)
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	b2d9      	uxtb	r1, r3
 8001340:	9b01      	ldr	r3, [sp, #4]
 8001342:	4413      	add	r3, r2
 8001344:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001348:	460a      	mov	r2, r1
 800134a:	701a      	strb	r2, [r3, #0]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800134c:	9b01      	ldr	r3, [sp, #4]
 800134e:	f003 021f 	and.w	r2, r3, #31
 8001352:	490b      	ldr	r1, [pc, #44]	; (8001380 <nvicEnableVector+0x50>)
 8001354:	9b01      	ldr	r3, [sp, #4]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	3360      	adds	r3, #96	; 0x60
 8001360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001364:	9b01      	ldr	r3, [sp, #4]
 8001366:	f003 021f 	and.w	r2, r3, #31
 800136a:	4905      	ldr	r1, [pc, #20]	; (8001380 <nvicEnableVector+0x50>)
 800136c:	9b01      	ldr	r3, [sp, #4]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800137a:	b002      	add	sp, #8
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000e100 	.word	0xe000e100
	...

08001390 <exti0_irq_init>:

static inline void exti0_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI0_NUMBER, STM32_IRQ_EXTI0_PRIORITY);
#endif
}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
	...

080013a0 <exti1_irq_init>:

static inline void exti1_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI1_NUMBER, STM32_IRQ_EXTI1_PRIORITY);
#endif
}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
	...

080013b0 <exti2_irq_init>:

static inline void exti2_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI2_NUMBER, STM32_IRQ_EXTI2_PRIORITY);
#endif
}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
	...

080013c0 <exti3_irq_init>:

static inline void exti3_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI3_NUMBER, STM32_IRQ_EXTI3_PRIORITY);
#endif
}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
	...

080013d0 <exti4_irq_init>:

static inline void exti4_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI4_NUMBER, STM32_IRQ_EXTI4_PRIORITY);
#endif
}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
	...

080013e0 <exti5_9_irq_init>:

static inline void exti5_9_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI5_9_NUMBER, STM32_IRQ_EXTI5_9_PRIORITY);
#endif
}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
	...

080013f0 <exti10_15_irq_init>:

static inline void exti10_15_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI10_15_NUMBER, STM32_IRQ_EXTI10_15_PRIORITY);
#endif
}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
	...

08001400 <exti16_exti35_38_irq_init>:
#if defined(STM32_EXTI16_IS_USED) || defined(STM32_EXTI35_IS_USED) ||       \
    defined(STM32_EXTI36_IS_USED) || defined(STM32_EXTI37_IS_USED) ||       \
    defined(STM32_EXTI38_IS_USED)
  nvicEnableVector(STM32_EXTI1635_38_NUMBER, STM32_IRQ_EXTI1635_38_PRIORITY);
#endif
}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
	...

08001410 <exti18_irq_init>:

static inline void exti18_irq_init(void) {
#if defined(STM32_EXTI18_IS_USED)
  nvicEnableVector(STM32_EXTI18_NUMBER, STM32_IRQ_EXTI18_PRIORITY);
#endif
}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
	...

08001420 <exti19_irq_init>:

static inline void exti19_irq_init(void) {
#if defined(STM32_EXTI19_IS_USED)
  nvicEnableVector(STM32_EXTI19_NUMBER, STM32_IRQ_EXTI19_PRIORITY);
#endif
}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
	...

08001430 <exti21_22_irq_init>:

static inline void exti21_22_irq_init(void) {
#if defined(STM32_EXTI21_IS_USED) || defined(STM32_EXTI22_IS_USED)
  nvicEnableVector(STM32_EXTI21_22_NUMBER, STM32_IRQ_EXTI21_22_PRIORITY);
#endif
}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
	...

08001440 <usart1_irq_init>:

static inline void usart1_irq_init(void) {
#if STM32_USART1_IS_USED
  nvicEnableVector(STM32_USART1_NUMBER, STM32_IRQ_USART1_PRIORITY);
#endif
}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
	...

08001450 <usart2_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void usart2_irq_init(void) {
 8001450:	b508      	push	{r3, lr}
#if STM32_USART2_IS_USED
  nvicEnableVector(STM32_USART2_NUMBER, STM32_IRQ_USART2_PRIORITY);
 8001452:	210c      	movs	r1, #12
 8001454:	2026      	movs	r0, #38	; 0x26
 8001456:	f7ff ff6b 	bl	8001330 <nvicEnableVector>
#endif
}
 800145a:	bd08      	pop	{r3, pc}
 800145c:	0000      	movs	r0, r0
	...

08001460 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8001460:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART2
  sd_lld_serve_interrupt(&SD2);
 8001462:	4803      	ldr	r0, [pc, #12]	; (8001470 <VectorD8+0x10>)
 8001464:	f000 fe34 	bl	80020d0 <sd_lld_serve_interrupt>
#if STM32_UART_USE_USART2
  uart_lld_serve_interrupt(&UARTD2);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 8001468:	f002 f88a 	bl	8003580 <_port_irq_epilogue>
}
 800146c:	bd08      	pop	{r3, pc}
 800146e:	bf00      	nop
 8001470:	20000810 	.word	0x20000810
	...

08001480 <usart3_irq_init>:

static inline void usart3_irq_init(void) {
#if STM32_USART3_IS_USED
  nvicEnableVector(STM32_USART3_NUMBER, STM32_IRQ_USART3_PRIORITY);
#endif
}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
	...

08001490 <uart4_irq_init>:

static inline void uart4_irq_init(void) {
#if STM32_UART4_IS_USED
  nvicEnableVector(STM32_UART4_NUMBER, STM32_IRQ_UART4_PRIORITY);
#endif
}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
	...

080014a0 <uart5_irq_init>:

static inline void uart5_irq_init(void) {
#if STM32_UART5_IS_USED
  nvicEnableVector(STM32_UART5_NUMBER, STM32_IRQ_UART5_PRIORITY);
#endif
}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
	...

080014b0 <lpuart1_irq_init>:

static inline void lpuart1_irq_init(void) {
#if STM32_LPUART1_IS_USED
  nvicEnableVector(STM32_LPUART1_NUMBER, STM32_IRQ_LPUART1_PRIORITY);
#endif
}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
	...

080014c0 <tim1_tim15_tim16_tim17_irq_init>:
#endif
#if defined(STM32_TIM1_IS_USED)
  nvicEnableVector(STM32_TIM1_CC_NUMBER,
                   STM32_IRQ_TIM1_CC_PRIORITY);
#endif
}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
	...

080014d0 <tim2_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void tim2_irq_init(void) {
 80014d0:	b508      	push	{r3, lr}
#if defined(STM32_TIM2_IS_USED)
  nvicEnableVector(STM32_TIM2_NUMBER, STM32_IRQ_TIM2_PRIORITY);
 80014d2:	2107      	movs	r1, #7
 80014d4:	201c      	movs	r0, #28
 80014d6:	f7ff ff2b 	bl	8001330 <nvicEnableVector>
#endif
}
 80014da:	bd08      	pop	{r3, pc}
 80014dc:	0000      	movs	r0, r0
	...

080014e0 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 80014e0:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD2);
#endif
#endif
#if 1
#if STM32_ST_USE_TIM2
  st_lld_serve_interrupt();
 80014e2:	f000 fc9d 	bl	8001e20 <st_lld_serve_interrupt>
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 80014e6:	f002 f84b 	bl	8003580 <_port_irq_epilogue>
}
 80014ea:	bd08      	pop	{r3, pc}
 80014ec:	0000      	movs	r0, r0
	...

080014f0 <tim3_irq_init>:

static inline void tim3_irq_init(void) {
#if defined(STM32_TIM3_IS_USED)
  nvicEnableVector(STM32_TIM3_NUMBER, STM32_IRQ_TIM3_PRIORITY);
#endif
}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
	...

08001500 <tim4_irq_init>:

static inline void tim4_irq_init(void) {
#if defined(STM32_TIM4_IS_USED)
  nvicEnableVector(STM32_TIM4_NUMBER, STM32_IRQ_TIM4_PRIORITY);
#endif
}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
	...

08001510 <tim5_irq_init>:

static inline void tim5_irq_init(void) {
#if defined(STM32_TIM5_IS_USED)
  nvicEnableVector(STM32_TIM5_NUMBER, STM32_IRQ_TIM5_PRIORITY);
#endif
}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
	...

08001520 <tim6_irq_init>:

static inline void tim6_irq_init(void) {
#if defined(STM32_TIM6_IS_USED)
  nvicEnableVector(STM32_TIM6_NUMBER, STM32_IRQ_TIM6_PRIORITY);
#endif
}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
	...

08001530 <tim7_irq_init>:

static inline void tim7_irq_init(void) {
#if defined(STM32_TIM7_IS_USED)
  nvicEnableVector(STM32_TIM7_NUMBER, STM32_IRQ_TIM7_PRIORITY);
#endif
}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
	...

08001540 <tim8_irq_init>:
static inline void tim8_irq_init(void) {
#if defined(STM32_TIM8_IS_USED)
  nvicEnableVector(STM32_TIM8_UP_NUMBER, STM32_IRQ_TIM8_UP_PRIORITY);
  nvicEnableVector(STM32_TIM8_CC_NUMBER, STM32_IRQ_TIM8_CC_PRIORITY);
#endif
}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
	...

08001550 <irqInit>:
/**
 * @brief   Enables IRQ sources.
 *
 * @notapi
 */
void irqInit(void) {
 8001550:	b508      	push	{r3, lr}

  exti0_irq_init();
 8001552:	f7ff ff1d 	bl	8001390 <exti0_irq_init>
  exti1_irq_init();
 8001556:	f7ff ff23 	bl	80013a0 <exti1_irq_init>
  exti2_irq_init();
 800155a:	f7ff ff29 	bl	80013b0 <exti2_irq_init>
  exti3_irq_init();
 800155e:	f7ff ff2f 	bl	80013c0 <exti3_irq_init>
  exti4_irq_init();
 8001562:	f7ff ff35 	bl	80013d0 <exti4_irq_init>
  exti5_9_irq_init();
 8001566:	f7ff ff3b 	bl	80013e0 <exti5_9_irq_init>
  exti10_15_irq_init();
 800156a:	f7ff ff41 	bl	80013f0 <exti10_15_irq_init>
  exti16_exti35_38_irq_init();
 800156e:	f7ff ff47 	bl	8001400 <exti16_exti35_38_irq_init>
  exti18_irq_init();
 8001572:	f7ff ff4d 	bl	8001410 <exti18_irq_init>
  exti19_irq_init();
 8001576:	f7ff ff53 	bl	8001420 <exti19_irq_init>
  exti21_22_irq_init();
 800157a:	f7ff ff59 	bl	8001430 <exti21_22_irq_init>

  tim1_tim15_tim16_tim17_irq_init();
 800157e:	f7ff ff9f 	bl	80014c0 <tim1_tim15_tim16_tim17_irq_init>
  tim2_irq_init();
 8001582:	f7ff ffa5 	bl	80014d0 <tim2_irq_init>
  tim3_irq_init();
 8001586:	f7ff ffb3 	bl	80014f0 <tim3_irq_init>
  tim4_irq_init();
 800158a:	f7ff ffb9 	bl	8001500 <tim4_irq_init>
  tim5_irq_init();
 800158e:	f7ff ffbf 	bl	8001510 <tim5_irq_init>
  tim6_irq_init();
 8001592:	f7ff ffc5 	bl	8001520 <tim6_irq_init>
  tim7_irq_init();
 8001596:	f7ff ffcb 	bl	8001530 <tim7_irq_init>
  tim8_irq_init();
 800159a:	f7ff ffd1 	bl	8001540 <tim8_irq_init>

  usart1_irq_init();
 800159e:	f7ff ff4f 	bl	8001440 <usart1_irq_init>
  usart2_irq_init();
 80015a2:	f7ff ff55 	bl	8001450 <usart2_irq_init>
  usart3_irq_init();
 80015a6:	f7ff ff6b 	bl	8001480 <usart3_irq_init>
  uart4_irq_init();
 80015aa:	f7ff ff71 	bl	8001490 <uart4_irq_init>
  uart5_irq_init();
 80015ae:	f7ff ff77 	bl	80014a0 <uart5_irq_init>
  lpuart1_irq_init();
 80015b2:	f7ff ff7d 	bl	80014b0 <lpuart1_irq_init>
}
 80015b6:	bd08      	pop	{r3, pc}
	...

080015c0 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <hal_lld_backup_domain_init+0x68>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ce:	d008      	beq.n	80015e2 <hal_lld_backup_domain_init+0x22>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <hal_lld_backup_domain_init+0x68>)
 80015d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    RCC->BDCR = 0;
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <hal_lld_backup_domain_init+0x68>)
 80015dc:	2200      	movs	r2, #0
 80015de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if defined(STM32_LSE_BYPASS)
  /* LSE Bypass.*/
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON | RCC_BDCR_LSEBYP;
#else
  /* No LSE Bypass.*/
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <hal_lld_backup_domain_init+0x68>)
 80015e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e8:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <hal_lld_backup_domain_init+0x68>)
 80015ea:	f043 0319 	orr.w	r3, r3, #25
 80015ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <hal_lld_backup_domain_init+0x68>)
 80015f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f8      	beq.n	80015f2 <hal_lld_backup_domain_init+0x32>
#endif

#if STM32_MSIPLL_ENABLED
  /* MSI PLL activation depends on LSE. Reactivating and checking for
     MSI stability.*/
  RCC->CR |= RCC_CR_MSIPLLEN;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <hal_lld_backup_domain_init+0x68>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a08      	ldr	r2, [pc, #32]	; (8001628 <hal_lld_backup_domain_init+0x68>)
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_MSIRDY) == 0)
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <hal_lld_backup_domain_init+0x68>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f9      	beq.n	800160c <hal_lld_backup_domain_init+0x4c>
    RCC->BDCR |= RCC_BDCR_RTCEN;
  }
#endif /* HAL_USE_RTC */

  /* Low speed output mode.*/
  RCC->BDCR |= STM32_LSCOSEL;
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <hal_lld_backup_domain_init+0x68>)
 800161a:	4a03      	ldr	r2, [pc, #12]	; (8001628 <hal_lld_backup_domain_init+0x68>)
 800161c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	00000000 	.word	0x00000000

08001630 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8001630:	b508      	push	{r3, lr}

  /* Reset of all peripherals.
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~0);
 8001632:	4b35      	ldr	r3, [pc, #212]	; (8001708 <hal_lld_init+0xd8>)
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	4b34      	ldr	r3, [pc, #208]	; (8001708 <hal_lld_init+0xd8>)
 8001638:	f04f 32ff 	mov.w	r2, #4294967295
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
 800163e:	4b32      	ldr	r3, [pc, #200]	; (8001708 <hal_lld_init+0xd8>)
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	4b31      	ldr	r3, [pc, #196]	; (8001708 <hal_lld_init+0xd8>)
 8001644:	2200      	movs	r2, #0
 8001646:	629a      	str	r2, [r3, #40]	; 0x28
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <hal_lld_init+0xd8>)
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  rccResetAHB2(~STM32_GPIO_EN_MASK);
 800164c:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <hal_lld_init+0xd8>)
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	4a2d      	ldr	r2, [pc, #180]	; (8001708 <hal_lld_init+0xd8>)
 8001652:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8001656:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <hal_lld_init+0xd8>)
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	4a2a      	ldr	r2, [pc, #168]	; (8001708 <hal_lld_init+0xd8>)
 800165e:	b2db      	uxtb	r3, r3
 8001660:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001662:	4b29      	ldr	r3, [pc, #164]	; (8001708 <hal_lld_init+0xd8>)
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  rccResetAHB3(~0);
 8001666:	4b28      	ldr	r3, [pc, #160]	; (8001708 <hal_lld_init+0xd8>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4b27      	ldr	r3, [pc, #156]	; (8001708 <hal_lld_init+0xd8>)
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	631a      	str	r2, [r3, #48]	; 0x30
 8001672:	4b25      	ldr	r3, [pc, #148]	; (8001708 <hal_lld_init+0xd8>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4b24      	ldr	r3, [pc, #144]	; (8001708 <hal_lld_init+0xd8>)
 8001678:	2200      	movs	r2, #0
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <hal_lld_init+0xd8>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  rccResetAPB1R1(~RCC_APB1RSTR1_PWRRST);
 8001680:	4b21      	ldr	r3, [pc, #132]	; (8001708 <hal_lld_init+0xd8>)
 8001682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001684:	4a20      	ldr	r2, [pc, #128]	; (8001708 <hal_lld_init+0xd8>)
 8001686:	f063 5380 	orn	r3, r3, #268435456	; 0x10000000
 800168a:	6393      	str	r3, [r2, #56]	; 0x38
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <hal_lld_init+0xd8>)
 800168e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001690:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <hal_lld_init+0xd8>)
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	6393      	str	r3, [r2, #56]	; 0x38
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <hal_lld_init+0xd8>)
 800169a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  rccResetAPB1R2(~0);
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <hal_lld_init+0xd8>)
 800169e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <hal_lld_init+0xd8>)
 80016a2:	f04f 32ff 	mov.w	r2, #4294967295
 80016a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <hal_lld_init+0xd8>)
 80016aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <hal_lld_init+0xd8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <hal_lld_init+0xd8>)
 80016b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  rccResetAPB2(~0);
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <hal_lld_init+0xd8>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <hal_lld_init+0xd8>)
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <hal_lld_init+0xd8>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <hal_lld_init+0xd8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	641a      	str	r2, [r3, #64]	; 0x40
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <hal_lld_init+0xd8>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <hal_lld_init+0xd8>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d4:	4a0c      	ldr	r2, [pc, #48]	; (8001708 <hal_lld_init+0xd8>)
 80016d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016da:	6593      	str	r3, [r2, #88]	; 0x58
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <hal_lld_init+0xd8>)
 80016de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80016e0:	4a09      	ldr	r2, [pc, #36]	; (8001708 <hal_lld_init+0xd8>)
 80016e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e6:	6793      	str	r3, [r2, #120]	; 0x78
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <hal_lld_init+0xd8>)
 80016ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
 80016ec:	f7ff ff68 	bl	80015c0 <hal_lld_backup_domain_init>
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
#endif

  /* IRQ subsystem initialization.*/
  irqInit();
 80016f0:	f7ff ff2e 	bl	8001550 <irqInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR2 = PWR_CR2_PVDE | (STM32_PLS & STM32_PLS_MASK);
#else
  PWR->CR2 = 0;
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <hal_lld_init+0xdc>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	605a      	str	r2, [r3, #4]
  PWR->CR2 |= PWR_CR2_USV;
#endif /* HAL_USE_USB */

  /* Enabling independent VDDIO2 required by GPIOG.*/
#if STM32_HAS_GPIOG
  PWR->CR2 |= PWR_CR2_IOSV;
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <hal_lld_init+0xdc>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4a03      	ldr	r2, [pc, #12]	; (800170c <hal_lld_init+0xdc>)
 8001700:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001704:	6053      	str	r3, [r2, #4]
#endif /* STM32_HAS_GPIOG */
}
 8001706:	bd08      	pop	{r3, pc}
 8001708:	40021000 	.word	0x40021000
 800170c:	40007000 	.word	0x40007000

08001710 <stm32_clock_init>:
 * @note    All the involved constants come from the file @p board.h.
 * @note    This function should be invoked just after the system reset.
 *
 * @special
 */
void stm32_clock_init(void) {
 8001710:	b082      	sub	sp, #8
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR1_RTCAPBEN)
  RCC->APB1ENR1 = RCC_APB1ENR1_PWREN | RCC_APB1ENR1_RTCAPBEN;
#else
  RCC->APB1ENR1 = RCC_APB1ENR1_PWREN;
 8001712:	4b61      	ldr	r3, [pc, #388]	; (8001898 <stm32_clock_init+0x188>)
 8001714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001718:	659a      	str	r2, [r3, #88]	; 0x58
  /* Initial clocks setup and wait for MSI stabilization, the MSI clock is
     always enabled because it is the fall back clock when PLL the fails.
     Trim fields are not altered from reset values.*/

  /* MSIRANGE can be set only when MSI is OFF or READY.*/
  RCC->CR = RCC_CR_MSION;
 800171a:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <stm32_clock_init+0x188>)
 800171c:	2201      	movs	r2, #1
 800171e:	601a      	str	r2, [r3, #0]
  while ((RCC->CR & RCC_CR_MSIRDY) == 0)
 8001720:	4b5d      	ldr	r3, [pc, #372]	; (8001898 <stm32_clock_init+0x188>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f9      	beq.n	8001720 <stm32_clock_init+0x10>
    ;                                       /* Wait until MSI is stable.    */

  /* Clocking from MSI, in case MSI was not the default source.*/
  RCC->CFGR = 0;
 800172c:	4b5a      	ldr	r3, [pc, #360]	; (8001898 <stm32_clock_init+0x188>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8001732:	4b59      	ldr	r3, [pc, #356]	; (8001898 <stm32_clock_init+0x188>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f9      	bne.n	8001732 <stm32_clock_init+0x22>
    ;                                       /* Wait until MSI is selected.  */

  /* Core voltage setup.*/
  PWR->CR1 = STM32_VOS;
 800173e:	4b57      	ldr	r3, [pc, #348]	; (800189c <stm32_clock_init+0x18c>)
 8001740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001744:	601a      	str	r2, [r3, #0]
  while ((PWR->SR2 & PWR_SR2_VOSF) != 0)    /* Wait until regulator is      */
 8001746:	4b55      	ldr	r3, [pc, #340]	; (800189c <stm32_clock_init+0x18c>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f9      	bne.n	8001746 <stm32_clock_init+0x36>
    ;                                       /* Wait until HSE is stable.    */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001752:	4b51      	ldr	r3, [pc, #324]	; (8001898 <stm32_clock_init+0x188>)
 8001754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001758:	4a4f      	ldr	r2, [pc, #316]	; (8001898 <stm32_clock_init+0x188>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001762:	4b4d      	ldr	r3, [pc, #308]	; (8001898 <stm32_clock_init+0x188>)
 8001764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f8      	beq.n	8001762 <stm32_clock_init+0x52>
    ;                                       /* Wait until LSI is stable.    */
#endif

  /* Backup domain access enabled and left open.*/
  PWR->CR1 |= PWR_CR1_DBP;
 8001770:	4b4a      	ldr	r3, [pc, #296]	; (800189c <stm32_clock_init+0x18c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a49      	ldr	r2, [pc, #292]	; (800189c <stm32_clock_init+0x18c>)
 8001776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177a:	6013      	str	r3, [r2, #0]
#if defined(STM32_LSE_BYPASS)
  /* LSE Bypass.*/
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON | RCC_BDCR_LSEBYP;
#else
  /* No LSE Bypass.*/
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
 800177c:	4b46      	ldr	r3, [pc, #280]	; (8001898 <stm32_clock_init+0x188>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001782:	4a45      	ldr	r2, [pc, #276]	; (8001898 <stm32_clock_init+0x188>)
 8001784:	f043 0319 	orr.w	r3, r3, #25
 8001788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
 800178c:	4b42      	ldr	r3, [pc, #264]	; (8001898 <stm32_clock_init+0x188>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f8      	beq.n	800178c <stm32_clock_init+0x7c>
    ;                                       /* Wait until LSE is stable.    */
#endif

  /* Flash setup for selected MSI speed setting.*/
  FLASH->ACR = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN |
 800179a:	4b41      	ldr	r3, [pc, #260]	; (80018a0 <stm32_clock_init+0x190>)
 800179c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017a0:	601a      	str	r2, [r3, #0]
               STM32_MSI_FLASHBITS;

  /* Changing MSIRANGE to configured value.*/
  RCC->CR |= STM32_MSIRANGE;
 80017a2:	4b3d      	ldr	r3, [pc, #244]	; (8001898 <stm32_clock_init+0x188>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a3c      	ldr	r2, [pc, #240]	; (8001898 <stm32_clock_init+0x188>)
 80017a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017ac:	6013      	str	r3, [r2, #0]

  /* Switching from MSISRANGE to MSIRANGE.*/
  RCC->CR |= RCC_CR_MSIRGSEL;
 80017ae:	4b3a      	ldr	r3, [pc, #232]	; (8001898 <stm32_clock_init+0x188>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a39      	ldr	r2, [pc, #228]	; (8001898 <stm32_clock_init+0x188>)
 80017b4:	f043 0308 	orr.w	r3, r3, #8
 80017b8:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_MSIRDY) == 0)
 80017ba:	4b37      	ldr	r3, [pc, #220]	; (8001898 <stm32_clock_init+0x188>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f9      	beq.n	80017ba <stm32_clock_init+0xaa>
    ;

  /* MSI is configured SYSCLK source so wait for it to be stable as well.*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 80017c6:	4b34      	ldr	r3, [pc, #208]	; (8001898 <stm32_clock_init+0x188>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f9      	bne.n	80017c6 <stm32_clock_init+0xb6>
    ;

#if STM32_MSIPLL_ENABLED
  /* MSI PLL (to LSE) activation */
  RCC->CR |= RCC_CR_MSIPLLEN;
 80017d2:	4b31      	ldr	r3, [pc, #196]	; (8001898 <stm32_clock_init+0x188>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a30      	ldr	r2, [pc, #192]	; (8001898 <stm32_clock_init+0x188>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6013      	str	r3, [r2, #0]
#endif

  /* Updating MSISRANGE value. MSISRANGE can be set only when MSIRGSEL is high.
     This range is used exiting the Standby mode until MSIRGSEL is set.*/
  RCC->CSR |= STM32_MSISRANGE;
 80017de:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <stm32_clock_init+0x188>)
 80017e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e4:	4a2c      	ldr	r2, [pc, #176]	; (8001898 <stm32_clock_init+0x188>)
 80017e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80017ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
                 STM32_PLLREN  | STM32_PLLQ  |
                 STM32_PLLQEN  | STM32_PLLP  |
                 STM32_PLLPEN  | STM32_PLLN  |
                 STM32_PLLM    | STM32_PLLSRC;
#else
  RCC->PLLCFGR = STM32_PLLR   | STM32_PLLREN |
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <stm32_clock_init+0x188>)
 80017f0:	4a2c      	ldr	r2, [pc, #176]	; (80018a4 <stm32_clock_init+0x194>)
 80017f2:	60da      	str	r2, [r3, #12]
#endif
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR |= RCC_CR_PLLON;
 80017f4:	4b28      	ldr	r3, [pc, #160]	; (8001898 <stm32_clock_init+0x188>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a27      	ldr	r2, [pc, #156]	; (8001898 <stm32_clock_init+0x188>)
 80017fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017fe:	6013      	str	r3, [r2, #0]

  /* Waiting for PLL lock.*/
  while ((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <stm32_clock_init+0x188>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f9      	beq.n	8001800 <stm32_clock_init+0xf0>
  RCC->PLLSAI1CFGR = STM32_PLLSAI1PDIV | STM32_PLLSAI1R |
                     STM32_PLLSAI1REN  | STM32_PLLSAI1Q |
                     STM32_PLLSAI1QEN  | STM32_PLLSAI1P |
                     STM32_PLLSAI1PEN  | STM32_PLLSAI1N;
#else
  RCC->PLLSAI1CFGR = STM32_PLLSAI1R | STM32_PLLSAI1REN |
 800180c:	4b22      	ldr	r3, [pc, #136]	; (8001898 <stm32_clock_init+0x188>)
 800180e:	4a26      	ldr	r2, [pc, #152]	; (80018a8 <stm32_clock_init+0x198>)
 8001810:	611a      	str	r2, [r3, #16]
                     STM32_PLLSAI1Q | STM32_PLLSAI1QEN |
                     STM32_PLLSAI1P | STM32_PLLSAI1PEN |
                     STM32_PLLSAI1N;
#endif
  RCC->CR |= RCC_CR_PLLSAI1ON;
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <stm32_clock_init+0x188>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a20      	ldr	r2, [pc, #128]	; (8001898 <stm32_clock_init+0x188>)
 8001818:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800181c:	6013      	str	r3, [r2, #0]

  /* Waiting for PLL lock.*/
  while ((RCC->CR & RCC_CR_PLLSAI1RDY) == 0)
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <stm32_clock_init+0x188>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f9      	beq.n	800181e <stm32_clock_init+0x10e>
  while ((RCC->CR & RCC_CR_PLLSAI2RDY) == 0)
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCOPRE | STM32_MCOSEL | STM32_STOPWUCK |
 800182a:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <stm32_clock_init+0x188>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
              STM32_PPRE2  | STM32_PPRE1  | STM32_HPRE;

  /* CCIPR register initialization, note, must take care of the _OFF
     pseudo settings.*/
  {
    uint32_t ccipr = STM32_DFSDMSEL  | STM32_SWPMI1SEL | STM32_ADCSEL    |
 8001830:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <stm32_clock_init+0x19c>)
 8001832:	9301      	str	r3, [sp, #4]
    ccipr |= STM32_SAI2SEL;
#endif
#if STM32_SAI1SEL != STM32_SAI1SEL_OFF
    ccipr |= STM32_SAI1SEL;
#endif
    RCC->CCIPR = ccipr;
 8001834:	4a18      	ldr	r2, [pc, #96]	; (8001898 <stm32_clock_init+0x188>)
 8001836:	9b01      	ldr	r3, [sp, #4]
 8001838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }
#endif

  /* Set flash WS's for SYSCLK source */
  if (STM32_FLASHBITS > STM32_MSI_FLASHBITS) {
    FLASH->ACR = (FLASH->ACR & ~FLASH_ACR_LATENCY_Msk) | STM32_FLASHBITS;
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <stm32_clock_init+0x190>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f023 0307 	bic.w	r3, r3, #7
 8001844:	4a16      	ldr	r2, [pc, #88]	; (80018a0 <stm32_clock_init+0x190>)
 8001846:	f043 0304 	orr.w	r3, r3, #4
 800184a:	6013      	str	r3, [r2, #0]
    while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <stm32_clock_init+0x190>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	2b04      	cmp	r3, #4
 8001856:	d1f9      	bne.n	800184c <stm32_clock_init+0x13c>
    }
  }

  /* Switching to the configured SYSCLK source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_MSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <stm32_clock_init+0x188>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <stm32_clock_init+0x188>)
 800185e:	f043 0303 	orr.w	r3, r3, #3
 8001862:	6093      	str	r3, [r2, #8]
  /* Wait until SYSCLK is stable.*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <stm32_clock_init+0x188>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 030c 	and.w	r3, r3, #12
 800186c:	2b0c      	cmp	r3, #12
 800186e:	d1f9      	bne.n	8001864 <stm32_clock_init+0x154>

#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <stm32_clock_init+0x188>)
 8001872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001874:	4a08      	ldr	r2, [pc, #32]	; (8001898 <stm32_clock_init+0x188>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6613      	str	r3, [r2, #96]	; 0x60
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <stm32_clock_init+0x188>)
 800187e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <stm32_clock_init+0x188>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800188c:	4b02      	ldr	r3, [pc, #8]	; (8001898 <stm32_clock_init+0x188>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8001892:	b002      	add	sp, #8
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	40007000 	.word	0x40007000
 80018a0:	40022000 	.word	0x40022000
 80018a4:	03405001 	.word	0x03405001
 80018a8:	04504800 	.word	0x04504800
 80018ac:	34015555 	.word	0x34015555

080018b0 <stm32_flash_unlock>:
static inline void stm32_flash_lock(EFlashDriver *eflp) {

  eflp->flash->CR |= FLASH_CR_LOCK;
}

static inline void stm32_flash_unlock(EFlashDriver *eflp) {
 80018b0:	b082      	sub	sp, #8
 80018b2:	9001      	str	r0, [sp, #4]

  eflp->flash->KEYR |= FLASH_KEY1;
 80018b4:	9b01      	ldr	r3, [sp, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	6899      	ldr	r1, [r3, #8]
 80018ba:	9b01      	ldr	r3, [sp, #4]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <stm32_flash_unlock+0x28>)
 80018c0:	430b      	orrs	r3, r1
 80018c2:	6093      	str	r3, [r2, #8]
  eflp->flash->KEYR |= FLASH_KEY2;
 80018c4:	9b01      	ldr	r3, [sp, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	6899      	ldr	r1, [r3, #8]
 80018ca:	9b01      	ldr	r3, [sp, #4]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	4b03      	ldr	r3, [pc, #12]	; (80018dc <stm32_flash_unlock+0x2c>)
 80018d0:	430b      	orrs	r3, r1
 80018d2:	6093      	str	r3, [r2, #8]
}
 80018d4:	b002      	add	sp, #8
 80018d6:	4770      	bx	lr
 80018d8:	45670123 	.word	0x45670123
 80018dc:	cdef89ab 	.word	0xcdef89ab

080018e0 <stm32_flash_enable_pgm>:

static inline void stm32_flash_enable_pgm(EFlashDriver *eflp) {
 80018e0:	b082      	sub	sp, #8
 80018e2:	9001      	str	r0, [sp, #4]

  eflp->flash->CR |= FLASH_CR_PG;
 80018e4:	9b01      	ldr	r3, [sp, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	695a      	ldr	r2, [r3, #20]
 80018ea:	9b01      	ldr	r3, [sp, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	615a      	str	r2, [r3, #20]
}
 80018f4:	b002      	add	sp, #8
 80018f6:	4770      	bx	lr
	...

08001900 <stm32_flash_disable_pgm>:

static inline void stm32_flash_disable_pgm(EFlashDriver *eflp) {
 8001900:	b082      	sub	sp, #8
 8001902:	9001      	str	r0, [sp, #4]

  eflp->flash->CR &= ~FLASH_CR_PG;
 8001904:	9b01      	ldr	r3, [sp, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	9b01      	ldr	r3, [sp, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	615a      	str	r2, [r3, #20]
}
 8001914:	b002      	add	sp, #8
 8001916:	4770      	bx	lr
	...

08001920 <stm32_flash_clear_status>:

static inline void stm32_flash_clear_status(EFlashDriver *eflp) {
 8001920:	b082      	sub	sp, #8
 8001922:	9001      	str	r0, [sp, #4]

  eflp->flash->SR = 0x0000FFFFU;
 8001924:	9b01      	ldr	r3, [sp, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800192c:	611a      	str	r2, [r3, #16]
}
 800192e:	b002      	add	sp, #8
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
	...

08001940 <stm32_flash_wait_busy>:

static inline void stm32_flash_wait_busy(EFlashDriver *eflp) {
 8001940:	b082      	sub	sp, #8
 8001942:	9001      	str	r0, [sp, #4]

  /* Wait for busy bit clear.*/
  while ((eflp->flash->SR & FLASH_SR_BSY) != 0U) {
 8001944:	9b01      	ldr	r3, [sp, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f8      	bne.n	8001944 <stm32_flash_wait_busy+0x4>
  }
}
 8001952:	b002      	add	sp, #8
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
	...

08001960 <stm32_flash_check_errors>:

static inline flash_error_t stm32_flash_check_errors(EFlashDriver *eflp) {
 8001960:	b084      	sub	sp, #16
 8001962:	9001      	str	r0, [sp, #4]
  uint32_t sr = eflp->flash->SR;
 8001964:	9b01      	ldr	r3, [sp, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	9303      	str	r3, [sp, #12]

  /* Clearing error conditions.*/
  eflp->flash->SR = sr & 0x0000FFFFU;
 800196c:	9b01      	ldr	r3, [sp, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	9a03      	ldr	r2, [sp, #12]
 8001972:	b292      	uxth	r2, r2
 8001974:	611a      	str	r2, [r3, #16]
  osalDbgAssert((sr & (FLASH_SR_FASTERR |
                       FLASH_SR_MISERR |
                       FLASH_SR_SIZERR)) == 0U, "unexpected flash error");

  /* Decoding relevant errors.*/
  if ((sr & FLASH_SR_WRPERR) != 0U) {
 8001976:	9b03      	ldr	r3, [sp, #12]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <stm32_flash_check_errors+0x24>
    return FLASH_ERROR_HW_FAILURE;
 8001980:	2306      	movs	r3, #6
 8001982:	e00d      	b.n	80019a0 <stm32_flash_check_errors+0x40>
  }

  if ((sr & (FLASH_SR_PGAERR | FLASH_SR_PROGERR | FLASH_SR_OPERR)) != 0U) {
 8001984:	9b03      	ldr	r3, [sp, #12]
 8001986:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <stm32_flash_check_errors+0x3e>
    return eflp->state == FLASH_PGM ? FLASH_ERROR_PROGRAM : FLASH_ERROR_ERASE;
 800198e:	9b01      	ldr	r3, [sp, #4]
 8001990:	791b      	ldrb	r3, [r3, #4]
 8001992:	2b04      	cmp	r3, #4
 8001994:	d101      	bne.n	800199a <stm32_flash_check_errors+0x3a>
 8001996:	2303      	movs	r3, #3
 8001998:	e002      	b.n	80019a0 <stm32_flash_check_errors+0x40>
 800199a:	2304      	movs	r3, #4
 800199c:	e000      	b.n	80019a0 <stm32_flash_check_errors+0x40>
  }

  return FLASH_NO_ERROR;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	b004      	add	sp, #16
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
	...

080019b0 <efl_lld_init>:
/**
 * @brief   Low level Embedded Flash driver initialization.
 *
 * @notapi
 */
void efl_lld_init(void) {
 80019b0:	b508      	push	{r3, lr}

  /* Driver initialization.*/
  eflObjectInit(&EFLD1);
 80019b2:	4803      	ldr	r0, [pc, #12]	; (80019c0 <efl_lld_init+0x10>)
 80019b4:	f7ff fb2c 	bl	8001010 <eflObjectInit>
  EFLD1.flash = FLASH;
 80019b8:	4b01      	ldr	r3, [pc, #4]	; (80019c0 <efl_lld_init+0x10>)
 80019ba:	4a02      	ldr	r2, [pc, #8]	; (80019c4 <efl_lld_init+0x14>)
 80019bc:	60da      	str	r2, [r3, #12]
}
 80019be:	bd08      	pop	{r3, pc}
 80019c0:	20000800 	.word	0x20000800
 80019c4:	40022000 	.word	0x40022000
	...

080019d0 <efl_lld_start>:
 *
 * @param[in] eflp      pointer to a @p EFlashDriver structure
 *
 * @notapi
 */
void efl_lld_start(EFlashDriver *eflp) {
 80019d0:	b500      	push	{lr}
 80019d2:	b083      	sub	sp, #12
 80019d4:	9001      	str	r0, [sp, #4]

  stm32_flash_unlock(eflp);
 80019d6:	9801      	ldr	r0, [sp, #4]
 80019d8:	f7ff ff6a 	bl	80018b0 <stm32_flash_unlock>
  FLASH->CR = 0x00000000U;
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <efl_lld_start+0x18>)
 80019de:	2200      	movs	r2, #0
 80019e0:	615a      	str	r2, [r3, #20]
}
 80019e2:	b003      	add	sp, #12
 80019e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80019e8:	40022000 	.word	0x40022000
 80019ec:	00000000 	.word	0x00000000

080019f0 <efl_lld_get_descriptor>:
 * @param[in] ip                    pointer to a @p EFlashDriver instance
 * @return                          A flash device descriptor.
 *
 * @notapi
 */
const flash_descriptor_t *efl_lld_get_descriptor(void *instance) {
 80019f0:	b082      	sub	sp, #8
 80019f2:	9001      	str	r0, [sp, #4]

  (void)instance;

  return &efl_lld_descriptor;
 80019f4:	4b01      	ldr	r3, [pc, #4]	; (80019fc <efl_lld_get_descriptor+0xc>)
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	b002      	add	sp, #8
 80019fa:	4770      	bx	lr
 80019fc:	08007a6c 	.word	0x08007a6c

08001a00 <efl_lld_read>:
 * @retval FLASH_ERROR_HW_FAILURE   if access to the memory failed.
 *
 * @notapi
 */
flash_error_t efl_lld_read(void *instance, flash_offset_t offset,
                           size_t n, uint8_t *rp) {
 8001a00:	b500      	push	{lr}
 8001a02:	b087      	sub	sp, #28
 8001a04:	9003      	str	r0, [sp, #12]
 8001a06:	9102      	str	r1, [sp, #8]
 8001a08:	9201      	str	r2, [sp, #4]
 8001a0a:	9300      	str	r3, [sp, #0]
  EFlashDriver *devp = (EFlashDriver *)instance;
 8001a0c:	9b03      	ldr	r3, [sp, #12]
 8001a0e:	9304      	str	r3, [sp, #16]
  flash_error_t err = FLASH_NO_ERROR;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f88d 3017 	strb.w	r3, [sp, #23]
  osalDbgCheck((size_t)offset + n <= (size_t)efl_lld_descriptor.size);
  osalDbgAssert((devp->state == FLASH_READY) || (devp->state == FLASH_ERASE),
                "invalid state");

  /* No reading while erasing.*/
  if (devp->state == FLASH_ERASE) {
 8001a16:	9b04      	ldr	r3, [sp, #16]
 8001a18:	791b      	ldrb	r3, [r3, #4]
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d101      	bne.n	8001a22 <efl_lld_read+0x22>
    return FLASH_BUSY_ERASING;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e01d      	b.n	8001a5e <efl_lld_read+0x5e>
  }

  /* FLASH_READY state while the operation is performed.*/
  devp->state = FLASH_READ;
 8001a22:	9b04      	ldr	r3, [sp, #16]
 8001a24:	2203      	movs	r2, #3
 8001a26:	711a      	strb	r2, [r3, #4]

  /* Clearing error status bits.*/
  stm32_flash_clear_status(devp);
 8001a28:	9804      	ldr	r0, [sp, #16]
 8001a2a:	f7ff ff79 	bl	8001920 <stm32_flash_clear_status>

  /* Actual read implementation.*/
  memcpy((void *)rp, (const void *)efl_lld_descriptor.address + offset, n);
 8001a2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a32:	9b02      	ldr	r3, [sp, #8]
 8001a34:	4413      	add	r3, r2
 8001a36:	9a01      	ldr	r2, [sp, #4]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	9800      	ldr	r0, [sp, #0]
 8001a3c:	f7fe fdb0 	bl	80005a0 <memcpy>

  /* Checking for errors after reading.*/
  if ((devp->flash->SR & FLASH_SR_RDERR) != 0U) {
 8001a40:	9b04      	ldr	r3, [sp, #16]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <efl_lld_read+0x54>
    err = FLASH_ERROR_READ;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	f88d 3017 	strb.w	r3, [sp, #23]
  }

  /* Ready state again.*/
  devp->state = FLASH_READY;
 8001a54:	9b04      	ldr	r3, [sp, #16]
 8001a56:	2202      	movs	r2, #2
 8001a58:	711a      	strb	r2, [r3, #4]

  return err;
 8001a5a:	f89d 3017 	ldrb.w	r3, [sp, #23]

}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	b007      	add	sp, #28
 8001a62:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a66:	bf00      	nop
	...

08001a70 <efl_lld_program>:
 * @retval FLASH_ERROR_HW_FAILURE   if access to the memory failed.
 *
 * @notapi
 */
flash_error_t efl_lld_program(void *instance, flash_offset_t offset,
                              size_t n, const uint8_t *pp) {
 8001a70:	b500      	push	{lr}
 8001a72:	b08b      	sub	sp, #44	; 0x2c
 8001a74:	9003      	str	r0, [sp, #12]
 8001a76:	9102      	str	r1, [sp, #8]
 8001a78:	9201      	str	r2, [sp, #4]
 8001a7a:	9300      	str	r3, [sp, #0]
  EFlashDriver *devp = (EFlashDriver *)instance;
 8001a7c:	9b03      	ldr	r3, [sp, #12]
 8001a7e:	9308      	str	r3, [sp, #32]
  flash_error_t err = FLASH_NO_ERROR;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

  osalDbgAssert((devp->state == FLASH_READY) || (devp->state == FLASH_ERASE),
                "invalid state");

  /* No programming while erasing.*/
  if (devp->state == FLASH_ERASE) {
 8001a86:	9b08      	ldr	r3, [sp, #32]
 8001a88:	791b      	ldrb	r3, [r3, #4]
 8001a8a:	2b05      	cmp	r3, #5
 8001a8c:	d101      	bne.n	8001a92 <efl_lld_program+0x22>
    return FLASH_BUSY_ERASING;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e05b      	b.n	8001b4a <efl_lld_program+0xda>
  }

  /* FLASH_PGM state while the operation is performed.*/
  devp->state = FLASH_PGM;
 8001a92:	9b08      	ldr	r3, [sp, #32]
 8001a94:	2204      	movs	r2, #4
 8001a96:	711a      	strb	r2, [r3, #4]

  /* Clearing error status bits.*/
  stm32_flash_clear_status(devp);
 8001a98:	9808      	ldr	r0, [sp, #32]
 8001a9a:	f7ff ff41 	bl	8001920 <stm32_flash_clear_status>

  /* Enabling PGM mode in the controller.*/
  stm32_flash_enable_pgm(devp);
 8001a9e:	9808      	ldr	r0, [sp, #32]
 8001aa0:	f7ff ff1e 	bl	80018e0 <stm32_flash_enable_pgm>
 8001aa4:	e044      	b.n	8001b30 <efl_lld_program+0xc0>
      uint32_t  w[STM32_FLASH_LINE_SIZE / sizeof (uint32_t)];
      uint8_t   b[STM32_FLASH_LINE_SIZE / sizeof (uint8_t)];
    } line;

    /* Unwritten bytes are initialized to all ones.*/
    line.w[0] = 0xFFFFFFFFU;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	9305      	str	r3, [sp, #20]
    line.w[1] = 0xFFFFFFFFU;
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab0:	9306      	str	r3, [sp, #24]

    /* Programming address aligned to flash lines.*/
    address = (volatile uint32_t *)(efl_lld_descriptor.address +
 8001ab2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
                                    (offset & ~STM32_FLASH_LINE_MASK));
 8001ab6:	9b02      	ldr	r3, [sp, #8]
 8001ab8:	f023 0307 	bic.w	r3, r3, #7
    address = (volatile uint32_t *)(efl_lld_descriptor.address +
 8001abc:	4413      	add	r3, r2
 8001abe:	9307      	str	r3, [sp, #28]

    /* Copying data inside the prepared line.*/
    do {
      line.b[offset & STM32_FLASH_LINE_MASK] = *pp;
 8001ac0:	9b02      	ldr	r3, [sp, #8]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	9a00      	ldr	r2, [sp, #0]
 8001ac8:	7812      	ldrb	r2, [r2, #0]
 8001aca:	a90a      	add	r1, sp, #40	; 0x28
 8001acc:	440b      	add	r3, r1
 8001ace:	f803 2c14 	strb.w	r2, [r3, #-20]
      offset++;
 8001ad2:	9b02      	ldr	r3, [sp, #8]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	9302      	str	r3, [sp, #8]
      n--;
 8001ad8:	9b01      	ldr	r3, [sp, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	9301      	str	r3, [sp, #4]
      pp++;
 8001ade:	9b00      	ldr	r3, [sp, #0]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	9300      	str	r3, [sp, #0]
    }
    while ((n > 0U) & ((offset & STM32_FLASH_LINE_MASK) != 0U));
 8001ae4:	9b01      	ldr	r3, [sp, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	bf14      	ite	ne
 8001aea:	2301      	movne	r3, #1
 8001aec:	2300      	moveq	r3, #0
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	9b02      	ldr	r3, [sp, #8]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	bf14      	ite	ne
 8001afa:	2301      	movne	r3, #1
 8001afc:	2300      	moveq	r3, #0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	4013      	ands	r3, r2
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1db      	bne.n	8001ac0 <efl_lld_program+0x50>

    /* Programming line.*/
    address[0] = line.w[0];
 8001b08:	9a05      	ldr	r2, [sp, #20]
 8001b0a:	9b07      	ldr	r3, [sp, #28]
 8001b0c:	601a      	str	r2, [r3, #0]
    address[1] = line.w[1];
 8001b0e:	9b07      	ldr	r3, [sp, #28]
 8001b10:	3304      	adds	r3, #4
 8001b12:	9a06      	ldr	r2, [sp, #24]
 8001b14:	601a      	str	r2, [r3, #0]
    stm32_flash_wait_busy(devp);
 8001b16:	9808      	ldr	r0, [sp, #32]
 8001b18:	f7ff ff12 	bl	8001940 <stm32_flash_wait_busy>
    err = stm32_flash_check_errors(devp);
 8001b1c:	9808      	ldr	r0, [sp, #32]
 8001b1e:	f7ff ff1f 	bl	8001960 <stm32_flash_check_errors>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    if (err != FLASH_NO_ERROR) {
 8001b28:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d103      	bne.n	8001b38 <efl_lld_program+0xc8>
  while (n > 0U) {
 8001b30:	9b01      	ldr	r3, [sp, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1b7      	bne.n	8001aa6 <efl_lld_program+0x36>
 8001b36:	e000      	b.n	8001b3a <efl_lld_program+0xca>
      break;
 8001b38:	bf00      	nop
    }
  }

  /* Disabling PGM mode in the controller.*/
  stm32_flash_disable_pgm(devp);
 8001b3a:	9808      	ldr	r0, [sp, #32]
 8001b3c:	f7ff fee0 	bl	8001900 <stm32_flash_disable_pgm>

  /* Ready state again.*/
  devp->state = FLASH_READY;
 8001b40:	9b08      	ldr	r3, [sp, #32]
 8001b42:	2202      	movs	r2, #2
 8001b44:	711a      	strb	r2, [r3, #4]

  return err;
 8001b46:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	b00b      	add	sp, #44	; 0x2c
 8001b4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b52:	bf00      	nop
	...

08001b60 <efl_lld_start_erase_all>:
 * @retval FLASH_BUSY_ERASING       if there is an erase operation in progress.
 * @retval FLASH_ERROR_HW_FAILURE   if access to the memory failed.
 *
 * @notapi
 */
flash_error_t efl_lld_start_erase_all(void *instance) {
 8001b60:	b500      	push	{lr}
 8001b62:	b085      	sub	sp, #20
 8001b64:	9001      	str	r0, [sp, #4]
  EFlashDriver *devp = (EFlashDriver *)instance;
 8001b66:	9b01      	ldr	r3, [sp, #4]
 8001b68:	9303      	str	r3, [sp, #12]
  osalDbgCheck(instance != NULL);
  osalDbgAssert((devp->state == FLASH_READY) || (devp->state == FLASH_ERASE),
                "invalid state");

  /* No erasing while erasing.*/
  if (devp->state == FLASH_ERASE) {
 8001b6a:	9b03      	ldr	r3, [sp, #12]
 8001b6c:	791b      	ldrb	r3, [r3, #4]
 8001b6e:	2b05      	cmp	r3, #5
 8001b70:	d101      	bne.n	8001b76 <efl_lld_start_erase_all+0x16>
    return FLASH_BUSY_ERASING;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e016      	b.n	8001ba4 <efl_lld_start_erase_all+0x44>
  }

  /* FLASH_PGM state while the operation is performed.*/
  devp->state = FLASH_ERASE;
 8001b76:	9b03      	ldr	r3, [sp, #12]
 8001b78:	2205      	movs	r2, #5
 8001b7a:	711a      	strb	r2, [r3, #4]

  /* Clearing error status bits.*/
  stm32_flash_clear_status(devp);
 8001b7c:	9803      	ldr	r0, [sp, #12]
 8001b7e:	f7ff fecf 	bl	8001920 <stm32_flash_clear_status>

#if defined(FLASH_CR_MER2)
  devp->flash->CR |= FLASH_CR_MER2;
 8001b82:	9b03      	ldr	r3, [sp, #12]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	9b03      	ldr	r3, [sp, #12]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b90:	615a      	str	r2, [r3, #20]
  devp->flash->CR |= FLASH_CR_STRT;
 8001b92:	9b03      	ldr	r3, [sp, #12]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	9b03      	ldr	r3, [sp, #12]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ba0:	615a      	str	r2, [r3, #20]
#endif

  return FLASH_NO_ERROR;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	b005      	add	sp, #20
 8001ba8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bac:	0000      	movs	r0, r0
	...

08001bb0 <efl_lld_start_erase_sector>:
 * @retval FLASH_ERROR_HW_FAILURE   if access to the memory failed.
 *
 * @notapi
 */
flash_error_t efl_lld_start_erase_sector(void *instance,
                                         flash_sector_t sector) {
 8001bb0:	b500      	push	{lr}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	9001      	str	r0, [sp, #4]
 8001bb6:	9100      	str	r1, [sp, #0]
  EFlashDriver *devp = (EFlashDriver *)instance;
 8001bb8:	9b01      	ldr	r3, [sp, #4]
 8001bba:	9303      	str	r3, [sp, #12]
  osalDbgCheck(sector < efl_lld_descriptor.sectors_count);
  osalDbgAssert((devp->state == FLASH_READY) || (devp->state == FLASH_ERASE),
                "invalid state");

  /* No erasing while erasing.*/
  if (devp->state == FLASH_ERASE) {
 8001bbc:	9b03      	ldr	r3, [sp, #12]
 8001bbe:	791b      	ldrb	r3, [r3, #4]
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d101      	bne.n	8001bc8 <efl_lld_start_erase_sector+0x18>
    return FLASH_BUSY_ERASING;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e03b      	b.n	8001c40 <efl_lld_start_erase_sector+0x90>
  }

  /* FLASH_PGM state while the operation is performed.*/
  devp->state = FLASH_ERASE;
 8001bc8:	9b03      	ldr	r3, [sp, #12]
 8001bca:	2205      	movs	r2, #5
 8001bcc:	711a      	strb	r2, [r3, #4]

  /* Clearing error status bits.*/
  stm32_flash_clear_status(devp);
 8001bce:	9803      	ldr	r0, [sp, #12]
 8001bd0:	f7ff fea6 	bl	8001920 <stm32_flash_clear_status>

  /* Enable page erase.*/
  devp->flash->CR |= FLASH_CR_PER;
 8001bd4:	9b03      	ldr	r3, [sp, #12]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	9b03      	ldr	r3, [sp, #12]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f042 0202 	orr.w	r2, r2, #2
 8001be2:	615a      	str	r2, [r3, #20]

#if defined(FLASH_CR_BKER)
  /* Bank selection.*/
  if (sector < STM32_FLASH_SECTORS_PER_BANK) {
 8001be4:	9b00      	ldr	r3, [sp, #0]
 8001be6:	2bff      	cmp	r3, #255	; 0xff
 8001be8:	d808      	bhi.n	8001bfc <efl_lld_start_erase_sector+0x4c>
    /* First bank.*/
    devp->flash->CR &= ~FLASH_CR_BKER;
 8001bea:	9b03      	ldr	r3, [sp, #12]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	9b03      	ldr	r3, [sp, #12]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bf8:	615a      	str	r2, [r3, #20]
 8001bfa:	e007      	b.n	8001c0c <efl_lld_start_erase_sector+0x5c>
  }
  else {
    /* Second bank.*/
    devp->flash->CR |= FLASH_CR_BKER;
 8001bfc:	9b03      	ldr	r3, [sp, #12]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	9b03      	ldr	r3, [sp, #12]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c0a:	615a      	str	r2, [r3, #20]
  }
#endif

  /* Mask off the page selection bits.*/
  devp->flash->CR &= ~FLASH_CR_PNB;
 8001c0c:	9b03      	ldr	r3, [sp, #12]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	9b03      	ldr	r3, [sp, #12]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8001c1a:	615a      	str	r2, [r3, #20]

  /* Set the page selection bits.*/
  devp->flash->CR |= sector << FLASH_CR_PNB_Pos;
 8001c1c:	9b03      	ldr	r3, [sp, #12]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	6959      	ldr	r1, [r3, #20]
 8001c22:	9b00      	ldr	r3, [sp, #0]
 8001c24:	00da      	lsls	r2, r3, #3
 8001c26:	9b03      	ldr	r3, [sp, #12]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	615a      	str	r2, [r3, #20]

  /* Start the erase.*/
  devp->flash->CR |= FLASH_CR_STRT;
 8001c2e:	9b03      	ldr	r3, [sp, #12]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	695a      	ldr	r2, [r3, #20]
 8001c34:	9b03      	ldr	r3, [sp, #12]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c3c:	615a      	str	r2, [r3, #20]

  return FLASH_NO_ERROR;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	b005      	add	sp, #20
 8001c44:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001c50 <efl_lld_query_erase>:
 * @retval FLASH_ERROR_ERASE        if the erase operation failed.
 * @retval FLASH_ERROR_HW_FAILURE   if access to the memory failed.
 *
 * @api
 */
flash_error_t efl_lld_query_erase(void *instance, uint32_t *msec) {
 8001c50:	b500      	push	{lr}
 8001c52:	b085      	sub	sp, #20
 8001c54:	9001      	str	r0, [sp, #4]
 8001c56:	9100      	str	r1, [sp, #0]
  EFlashDriver *devp = (EFlashDriver *)instance;
 8001c58:	9b01      	ldr	r3, [sp, #4]
 8001c5a:	9302      	str	r3, [sp, #8]
  flash_error_t err;

  /* If there is an erase in progress then the device must be checked.*/
  if (devp->state == FLASH_ERASE) {
 8001c5c:	9b02      	ldr	r3, [sp, #8]
 8001c5e:	791b      	ldrb	r3, [r3, #4]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d124      	bne.n	8001cae <efl_lld_query_erase+0x5e>

    /* Checking for operation in progress.*/
    if ((devp->flash->SR & FLASH_SR_BSY) == 0U) {
 8001c64:	9b02      	ldr	r3, [sp, #8]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d113      	bne.n	8001c9a <efl_lld_query_erase+0x4a>

      /* Disabling the various erase control bits.*/
      devp->flash->CR &= ~(FLASH_CR_MER1 |
 8001c72:	9b02      	ldr	r3, [sp, #8]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	9a02      	ldr	r2, [sp, #8]
 8001c7a:	68d2      	ldr	r2, [r2, #12]
 8001c7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001c80:	f023 0306 	bic.w	r3, r3, #6
 8001c84:	6153      	str	r3, [r2, #20]
                           FLASH_CR_MER2 |
#endif
                           FLASH_CR_PER);

      /* No operation in progress, checking for errors.*/
      err = stm32_flash_check_errors(devp);
 8001c86:	9802      	ldr	r0, [sp, #8]
 8001c88:	f7ff fe6a 	bl	8001960 <stm32_flash_check_errors>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f88d 300f 	strb.w	r3, [sp, #15]

      /* Back to ready state.*/
      devp->state = FLASH_READY;
 8001c92:	9b02      	ldr	r3, [sp, #8]
 8001c94:	2202      	movs	r2, #2
 8001c96:	711a      	strb	r2, [r3, #4]
 8001c98:	e00c      	b.n	8001cb4 <efl_lld_query_erase+0x64>
    }
    else {
      /* Recommended time before polling again, this is a simplified
         implementation.*/
      if (msec != NULL) {
 8001c9a:	9b00      	ldr	r3, [sp, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <efl_lld_query_erase+0x56>
        *msec = (uint32_t)STM32_FLASH_WAIT_TIME_MS;
 8001ca0:	9b00      	ldr	r3, [sp, #0]
 8001ca2:	2205      	movs	r2, #5
 8001ca4:	601a      	str	r2, [r3, #0]
      }

      err = FLASH_BUSY_ERASING;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f88d 300f 	strb.w	r3, [sp, #15]
 8001cac:	e002      	b.n	8001cb4 <efl_lld_query_erase+0x64>
    }
  }
  else {
    err = FLASH_NO_ERROR;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f88d 300f 	strb.w	r3, [sp, #15]
  }

  return err;
 8001cb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	b005      	add	sp, #20
 8001cbc:	f85d fb04 	ldr.w	pc, [sp], #4

08001cc0 <efl_lld_verify_erase>:
 * @retval FLASH_ERROR_VERIFY       if the verify operation failed.
 * @retval FLASH_ERROR_HW_FAILURE   if access to the memory failed.
 *
 * @notapi
 */
flash_error_t efl_lld_verify_erase(void *instance, flash_sector_t sector) {
 8001cc0:	b510      	push	{r4, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	9001      	str	r0, [sp, #4]
 8001cc6:	9100      	str	r1, [sp, #0]
  EFlashDriver *devp = (EFlashDriver *)instance;
 8001cc8:	9b01      	ldr	r3, [sp, #4]
 8001cca:	9302      	str	r3, [sp, #8]
  uint32_t *address;
  flash_error_t err = FLASH_NO_ERROR;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f88d 3013 	strb.w	r3, [sp, #19]
  osalDbgCheck(sector < efl_lld_descriptor.sectors_count);
  osalDbgAssert((devp->state == FLASH_READY) || (devp->state == FLASH_ERASE),
                "invalid state");

  /* No verifying while erasing.*/
  if (devp->state == FLASH_ERASE) {
 8001cd2:	9b02      	ldr	r3, [sp, #8]
 8001cd4:	791b      	ldrb	r3, [r3, #4]
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	d101      	bne.n	8001cde <efl_lld_verify_erase+0x1e>
    return FLASH_BUSY_ERASING;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e027      	b.n	8001d2e <efl_lld_verify_erase+0x6e>
  }

  /* Address of the sector.*/
  address = (uint32_t *)(efl_lld_descriptor.address +
 8001cde:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
                         flashGetSectorOffset(getBaseFlash(devp), sector));
 8001ce2:	9b02      	ldr	r3, [sp, #8]
 8001ce4:	9900      	ldr	r1, [sp, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff f942 	bl	8000f70 <flashGetSectorOffset>
 8001cec:	4603      	mov	r3, r0
  address = (uint32_t *)(efl_lld_descriptor.address +
 8001cee:	4423      	add	r3, r4
 8001cf0:	9303      	str	r3, [sp, #12]

  /* FLASH_READY state while the operation is performed.*/
  devp->state = FLASH_READ;
 8001cf2:	9b02      	ldr	r3, [sp, #8]
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	711a      	strb	r2, [r3, #4]

  /* Scanning the sector space.*/
  for (i = 0U; i < STM32_FLASH_SECTOR_SIZE / sizeof(uint32_t); i++) {
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9305      	str	r3, [sp, #20]
 8001cfc:	e00e      	b.n	8001d1c <efl_lld_verify_erase+0x5c>
    if (*address != 0xFFFFFFFFU) {
 8001cfe:	9b03      	ldr	r3, [sp, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d06:	d003      	beq.n	8001d10 <efl_lld_verify_erase+0x50>
      err = FLASH_ERROR_VERIFY;
 8001d08:	2305      	movs	r3, #5
 8001d0a:	f88d 3013 	strb.w	r3, [sp, #19]
 8001d0e:	e009      	b.n	8001d24 <efl_lld_verify_erase+0x64>
      break;
    }
    address++;
 8001d10:	9b03      	ldr	r3, [sp, #12]
 8001d12:	3304      	adds	r3, #4
 8001d14:	9303      	str	r3, [sp, #12]
  for (i = 0U; i < STM32_FLASH_SECTOR_SIZE / sizeof(uint32_t); i++) {
 8001d16:	9b05      	ldr	r3, [sp, #20]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	9305      	str	r3, [sp, #20]
 8001d1c:	9b05      	ldr	r3, [sp, #20]
 8001d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d22:	d3ec      	bcc.n	8001cfe <efl_lld_verify_erase+0x3e>
  }

  /* Ready state again.*/
  devp->state = FLASH_READY;
 8001d24:	9b02      	ldr	r3, [sp, #8]
 8001d26:	2202      	movs	r2, #2
 8001d28:	711a      	strb	r2, [r3, #4]

  return err;
 8001d2a:	f89d 3013 	ldrb.w	r3, [sp, #19]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	b006      	add	sp, #24
 8001d32:	bd10      	pop	{r4, pc}
	...

08001d40 <_pal_lld_init>:

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
  }
#endif
}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
	...

08001d50 <chSysLockFromISR.lto_priv.0>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8001d50:	b082      	sub	sp, #8
 8001d52:	2320      	movs	r3, #32
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	9b01      	ldr	r3, [sp, #4]
 8001d58:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
 8001d5c:	b002      	add	sp, #8
 8001d5e:	4770      	bx	lr

08001d60 <chSysUnlockFromISR.lto_priv.0>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8001d60:	b082      	sub	sp, #8
 8001d62:	2300      	movs	r3, #0
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	9b01      	ldr	r3, [sp, #4]
 8001d68:	f383 8811 	msr	BASEPRI, r3

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
}
 8001d6c:	b002      	add	sp, #8
 8001d6e:	4770      	bx	lr

08001d70 <osalSysLockFromISR.lto_priv.0>:
static inline void osalSysLockFromISR(void) {
 8001d70:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8001d72:	f7ff ffed 	bl	8001d50 <chSysLockFromISR.lto_priv.0>
}
 8001d76:	bd08      	pop	{r3, pc}
	...

08001d80 <osalSysUnlockFromISR.lto_priv.0>:
static inline void osalSysUnlockFromISR(void) {
 8001d80:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8001d82:	f7ff ffed 	bl	8001d60 <chSysUnlockFromISR.lto_priv.0>
}
 8001d86:	bd08      	pop	{r3, pc}
	...

08001d90 <osalOsTimerHandlerI>:
static inline void osalOsTimerHandlerI(void) {
 8001d90:	b508      	push	{r3, lr}
  chSysTimerHandlerI();
 8001d92:	f000 fc05 	bl	80025a0 <chSysTimerHandlerI>
}
 8001d96:	bd08      	pop	{r3, pc}
	...

08001da0 <st_lld_init>:

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <st_lld_init+0x70>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <st_lld_init+0x70>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6593      	str	r3, [r2, #88]	; 0x58
 8001dac:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <st_lld_init+0x70>)
 8001dae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001db0:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <st_lld_init+0x70>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6793      	str	r3, [r2, #120]	; 0x78
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <st_lld_init+0x70>)
 8001dba:	6f9b      	ldr	r3, [r3, #120]	; 0x78

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001dbc:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <st_lld_init+0x74>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <st_lld_init+0x74>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6093      	str	r3, [r2, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001dc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dcc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001dd0:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001dd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dda:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8001ddc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8001de4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001de8:	2200      	movs	r2, #0
 8001dea:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 8001dec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001df0:	2200      	movs	r2, #0
 8001df2:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8001df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001df8:	2200      	movs	r2, #0
 8001dfa:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e00:	2201      	movs	r2, #1
 8001e02:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e08:	2201      	movs	r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	e0042000 	.word	0xe0042000
	...

08001e20 <st_lld_serve_interrupt>:

/**
 * @brief   IRQ handling code.
 */
void st_lld_serve_interrupt(void) {
 8001e20:	b500      	push	{lr}
 8001e22:	b083      	sub	sp, #12
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;
 8001e24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e28:	9301      	str	r3, [sp, #4]

  sr  = timp->SR;
 8001e2a:	9b01      	ldr	r3, [sp, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	9300      	str	r3, [sp, #0]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001e30:	9b01      	ldr	r3, [sp, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	9a00      	ldr	r2, [sp, #0]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	9300      	str	r3, [sp, #0]
  timp->SR = ~sr;
 8001e3c:	9b00      	ldr	r3, [sp, #0]
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	9b01      	ldr	r3, [sp, #4]
 8001e42:	611a      	str	r2, [r3, #16]

  if ((sr & TIM_SR_CC1IF) != 0U)
 8001e44:	9b00      	ldr	r3, [sp, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <st_lld_serve_interrupt+0x3a>
#endif
  {
    osalSysLockFromISR();
 8001e4e:	f7ff ff8f 	bl	8001d70 <osalSysLockFromISR.lto_priv.0>
    osalOsTimerHandlerI();
 8001e52:	f7ff ff9d 	bl	8001d90 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
 8001e56:	f7ff ff93 	bl	8001d80 <osalSysUnlockFromISR.lto_priv.0>
      st_callbacks[2](3U);
    }
  }
#endif
#endif
}
 8001e5a:	b003      	add	sp, #12
 8001e5c:	f85d fb04 	ldr.w	pc, [sp], #4

08001e60 <chSysLockFromISR.lto_priv.1>:
static inline void chSysLockFromISR(void) {
 8001e60:	b082      	sub	sp, #8
 8001e62:	2320      	movs	r3, #32
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	9b01      	ldr	r3, [sp, #4]
 8001e68:	f383 8811 	msr	BASEPRI, r3
}
 8001e6c:	b002      	add	sp, #8
 8001e6e:	4770      	bx	lr

08001e70 <chSysUnlockFromISR.lto_priv.1>:
static inline void chSysUnlockFromISR(void) {
 8001e70:	b082      	sub	sp, #8
 8001e72:	2300      	movs	r3, #0
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	9b01      	ldr	r3, [sp, #4]
 8001e78:	f383 8811 	msr	BASEPRI, r3
}
 8001e7c:	b002      	add	sp, #8
 8001e7e:	4770      	bx	lr

08001e80 <osalSysLockFromISR.lto_priv.1>:
static inline void osalSysLockFromISR(void) {
 8001e80:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8001e82:	f7ff ffed 	bl	8001e60 <chSysLockFromISR.lto_priv.1>
}
 8001e86:	bd08      	pop	{r3, pc}
	...

08001e90 <osalSysUnlockFromISR.lto_priv.1>:
static inline void osalSysUnlockFromISR(void) {
 8001e90:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8001e92:	f7ff ffed 	bl	8001e70 <chSysUnlockFromISR.lto_priv.1>
}
 8001e96:	bd08      	pop	{r3, pc}
	...

08001ea0 <osalEventBroadcastFlagsI.lto_priv.1>:
                                            eventflags_t flags) {
 8001ea0:	b500      	push	{lr}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	9001      	str	r0, [sp, #4]
 8001ea6:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
 8001ea8:	9900      	ldr	r1, [sp, #0]
 8001eaa:	9801      	ldr	r0, [sp, #4]
 8001eac:	f001 f990 	bl	80031d0 <chEvtBroadcastFlagsI>
}
 8001eb0:	b003      	add	sp, #12
 8001eb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001eb6:	bf00      	nop
	...

08001ec0 <usart_init>:
 * @details This function must be invoked with interrupts disabled.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	9001      	str	r0, [sp, #4]
 8001ec4:	9100      	str	r1, [sp, #0]
  uint32_t brr;
  USART_TypeDef *u = sdp->usart;
 8001ec6:	9b01      	ldr	r3, [sp, #4]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	9302      	str	r3, [sp, #8]
    osalDbgAssert((brr >= 0x300) && (brr < 0x100000), "invalid BRR value");
  }
  else
#endif
  {
    brr = (uint32_t)(sdp->clock / config->speed);
 8001ecc:	9b01      	ldr	r3, [sp, #4]
 8001ece:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ed0:	9b00      	ldr	r3, [sp, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed8:	9303      	str	r3, [sp, #12]

    /* Correcting BRR value when oversampling by 8 instead of 16.
       Fraction is still 4 bits wide, but only lower 3 bits used.
       Mantissa is doubled, but Fraction is left the same.*/
    if (config->cr1 & USART_CR1_OVER8)
 8001eda:	9b00      	ldr	r3, [sp, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <usart_init+0x38>
      brr = ((brr & ~7) * 2) | (brr & 7);
 8001ee6:	9b03      	ldr	r3, [sp, #12]
 8001ee8:	f023 0307 	bic.w	r3, r3, #7
 8001eec:	005a      	lsls	r2, r3, #1
 8001eee:	9b03      	ldr	r3, [sp, #12]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	9303      	str	r3, [sp, #12]

    osalDbgAssert(brr < 0x10000, "invalid BRR value");
  }
  u->BRR = brr;
 8001ef8:	9b02      	ldr	r3, [sp, #8]
 8001efa:	9a03      	ldr	r2, [sp, #12]
 8001efc:	60da      	str	r2, [r3, #12]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001efe:	9b00      	ldr	r3, [sp, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f06:	9b02      	ldr	r3, [sp, #8]
 8001f08:	605a      	str	r2, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001f0a:	9b00      	ldr	r3, [sp, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f043 0201 	orr.w	r2, r3, #1
 8001f12:	9b02      	ldr	r3, [sp, #8]
 8001f14:	609a      	str	r2, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001f16:	9b00      	ldr	r3, [sp, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001f1a:	f443 7396 	orr.w	r3, r3, #300	; 0x12c
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001f22:	9a02      	ldr	r2, [sp, #8]
 8001f24:	6013      	str	r3, [r2, #0]
                         USART_CR1_RE;
  u->ICR = 0xFFFFFFFFU;
 8001f26:	9b02      	ldr	r3, [sp, #8]
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2c:	621a      	str	r2, [r3, #32]

  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & USART_CR1_PCE) != 0U) {
 8001f2e:	9b00      	ldr	r3, [sp, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d018      	beq.n	8001f6c <usart_init+0xac>
    switch (config->cr1 & (USART_CR1_M_1 | USART_CR1_M_0)) {
 8001f3a:	9b00      	ldr	r3, [sp, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <usart_init+0x8e>
 8001f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f4a:	d005      	beq.n	8001f58 <usart_init+0x98>
 8001f4c:	e009      	b.n	8001f62 <usart_init+0xa2>
    case 0:
      sdp->rxmask = 0x7F;
 8001f4e:	9b01      	ldr	r3, [sp, #4]
 8001f50:	227f      	movs	r2, #127	; 0x7f
 8001f52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      break;
    case USART_CR1_M_1:
      sdp->rxmask = 0x3F;
      break;
    default:
      sdp->rxmask = 0xFF;
 8001f56:	e00d      	b.n	8001f74 <usart_init+0xb4>
      sdp->rxmask = 0x3F;
 8001f58:	9b01      	ldr	r3, [sp, #4]
 8001f5a:	223f      	movs	r2, #63	; 0x3f
 8001f5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      sdp->rxmask = 0xFF;
 8001f60:	e008      	b.n	8001f74 <usart_init+0xb4>
 8001f62:	9b01      	ldr	r3, [sp, #4]
 8001f64:	22ff      	movs	r2, #255	; 0xff
 8001f66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001f6a:	e003      	b.n	8001f74 <usart_init+0xb4>
    }
  }
  else {
    sdp->rxmask = 0xFF;
 8001f6c:	9b01      	ldr	r3, [sp, #4]
 8001f6e:	22ff      	movs	r2, #255	; 0xff
 8001f70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }
}
 8001f74:	b004      	add	sp, #16
 8001f76:	4770      	bx	lr
	...

08001f80 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] isr       USART ISR register value
 */
static void set_error(SerialDriver *sdp, uint32_t isr) {
 8001f80:	b500      	push	{lr}
 8001f82:	b085      	sub	sp, #20
 8001f84:	9001      	str	r0, [sp, #4]
 8001f86:	9100      	str	r1, [sp, #0]
  eventflags_t sts = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9303      	str	r3, [sp, #12]

  if (isr & USART_ISR_ORE)
 8001f8c:	9b00      	ldr	r3, [sp, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <set_error+0x1e>
    sts |= SD_OVERRUN_ERROR;
 8001f96:	9b03      	ldr	r3, [sp, #12]
 8001f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9c:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_PE)
 8001f9e:	9b00      	ldr	r3, [sp, #0]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <set_error+0x30>
    sts |= SD_PARITY_ERROR;
 8001fa8:	9b03      	ldr	r3, [sp, #12]
 8001faa:	f043 0320 	orr.w	r3, r3, #32
 8001fae:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_FE)
 8001fb0:	9b00      	ldr	r3, [sp, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <set_error+0x42>
    sts |= SD_FRAMING_ERROR;
 8001fba:	9b03      	ldr	r3, [sp, #12]
 8001fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fc0:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_NE)
 8001fc2:	9b00      	ldr	r3, [sp, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <set_error+0x54>
    sts |= SD_NOISE_ERROR;
 8001fcc:	9b03      	ldr	r3, [sp, #12]
 8001fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd2:	9303      	str	r3, [sp, #12]
  osalSysLockFromISR();
 8001fd4:	f7ff ff54 	bl	8001e80 <osalSysLockFromISR.lto_priv.1>
  chnAddFlagsI(sdp, sts);
 8001fd8:	9b01      	ldr	r3, [sp, #4]
 8001fda:	3304      	adds	r3, #4
 8001fdc:	9903      	ldr	r1, [sp, #12]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff5e 	bl	8001ea0 <osalEventBroadcastFlagsI.lto_priv.1>
  osalSysUnlockFromISR();
 8001fe4:	f7ff ff54 	bl	8001e90 <osalSysUnlockFromISR.lto_priv.1>
}
 8001fe8:	b005      	add	sp, #20
 8001fea:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fee:	bf00      	nop

08001ff0 <notify2>:
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
}
#endif

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	9001      	str	r0, [sp, #4]

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <notify2+0x14>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a02      	ldr	r2, [pc, #8]	; (8002004 <notify2+0x14>)
 8001ffa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ffe:	6013      	str	r3, [r2, #0]
}
 8002000:	b002      	add	sp, #8
 8002002:	4770      	bx	lr
 8002004:	40004400 	.word	0x40004400
	...

08002010 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8002010:	b500      	push	{lr}
 8002012:	b083      	sub	sp, #12
  nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
#endif
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2);
 8002014:	480d      	ldr	r0, [pc, #52]	; (800204c <sd_lld_init+0x3c>)
 8002016:	f7ff f933 	bl	8001280 <sdObjectInit>
  iqObjectInit(&SD2.iqueue, sd_in_buf2, sizeof sd_in_buf2, NULL, &SD2);
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <sd_lld_init+0x3c>)
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	2300      	movs	r3, #0
 8002020:	2210      	movs	r2, #16
 8002022:	490b      	ldr	r1, [pc, #44]	; (8002050 <sd_lld_init+0x40>)
 8002024:	480b      	ldr	r0, [pc, #44]	; (8002054 <sd_lld_init+0x44>)
 8002026:	f7fe fd53 	bl	8000ad0 <iqObjectInit>
  oqObjectInit(&SD2.oqueue, sd_out_buf2, sizeof sd_out_buf2, notify2, &SD2);
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <sd_lld_init+0x3c>)
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <sd_lld_init+0x48>)
 8002030:	2210      	movs	r2, #16
 8002032:	490a      	ldr	r1, [pc, #40]	; (800205c <sd_lld_init+0x4c>)
 8002034:	480a      	ldr	r0, [pc, #40]	; (8002060 <sd_lld_init+0x50>)
 8002036:	f7fe fe33 	bl	8000ca0 <oqObjectInit>
  SD2.usart = USART2;
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <sd_lld_init+0x3c>)
 800203c:	4a09      	ldr	r2, [pc, #36]	; (8002064 <sd_lld_init+0x54>)
 800203e:	655a      	str	r2, [r3, #84]	; 0x54
  SD2.clock = STM32_USART2CLK;
 8002040:	4b02      	ldr	r3, [pc, #8]	; (800204c <sd_lld_init+0x3c>)
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <sd_lld_init+0x58>)
 8002044:	659a      	str	r2, [r3, #88]	; 0x58
  LPSD1.clock = STM32_LPUART1CLK;
#if !defined(STM32_LPUART1_SUPPRESS_ISR) && defined(STM32_LPUART1_NUMBER)
  nvicEnableVector(STM32_LPUART1_NUMBER, STM32_SERIAL_LPUART1_PRIORITY);
#endif
#endif
}
 8002046:	b003      	add	sp, #12
 8002048:	f85d fb04 	ldr.w	pc, [sp], #4
 800204c:	20000810 	.word	0x20000810
 8002050:	20000870 	.word	0x20000870
 8002054:	2000081c 	.word	0x2000081c
 8002058:	08001ff1 	.word	0x08001ff1
 800205c:	20000880 	.word	0x20000880
 8002060:	20000840 	.word	0x20000840
 8002064:	40004400 	.word	0x40004400
 8002068:	04c4b400 	.word	0x04c4b400
 800206c:	00000000 	.word	0x00000000

08002070 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8002070:	b500      	push	{lr}
 8002072:	b083      	sub	sp, #12
 8002074:	9001      	str	r0, [sp, #4]
 8002076:	9100      	str	r1, [sp, #0]

  if (config == NULL)
 8002078:	9b00      	ldr	r3, [sp, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <sd_lld_start+0x12>
    config = &default_config;
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <sd_lld_start+0x4c>)
 8002080:	9300      	str	r3, [sp, #0]

  if (sdp->state == SD_STOP) {
 8002082:	9b01      	ldr	r3, [sp, #4]
 8002084:	7a1b      	ldrb	r3, [r3, #8]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d111      	bne.n	80020ae <sd_lld_start+0x3e>
    if (&SD1 == sdp) {
      rccEnableUSART1(true);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 800208a:	9b01      	ldr	r3, [sp, #4]
 800208c:	4a0c      	ldr	r2, [pc, #48]	; (80020c0 <sd_lld_start+0x50>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d10d      	bne.n	80020ae <sd_lld_start+0x3e>
      rccEnableUSART2(true);
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <sd_lld_start+0x54>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <sd_lld_start+0x54>)
 8002098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209c:	6593      	str	r3, [r2, #88]	; 0x58
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <sd_lld_start+0x54>)
 80020a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020a2:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <sd_lld_start+0x54>)
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a8:	6793      	str	r3, [r2, #120]	; 0x78
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <sd_lld_start+0x54>)
 80020ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    if (&LPSD1 == sdp) {
      rccEnableLPUART1(true);
    }
#endif
  }
  usart_init(sdp, config);
 80020ae:	9900      	ldr	r1, [sp, #0]
 80020b0:	9801      	ldr	r0, [sp, #4]
 80020b2:	f7ff ff05 	bl	8001ec0 <usart_init>
}
 80020b6:	b003      	add	sp, #12
 80020b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80020bc:	08007a88 	.word	0x08007a88
 80020c0:	20000810 	.word	0x20000810
 80020c4:	40021000 	.word	0x40021000
	...

080020d0 <sd_lld_serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 80020d0:	b500      	push	{lr}
 80020d2:	b087      	sub	sp, #28
 80020d4:	9001      	str	r0, [sp, #4]
  USART_TypeDef *u = sdp->usart;
 80020d6:	9b01      	ldr	r3, [sp, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	9304      	str	r3, [sp, #16]
  uint32_t cr1 = u->CR1;
 80020dc:	9b04      	ldr	r3, [sp, #16]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	9303      	str	r3, [sp, #12]
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
 80020e2:	9b04      	ldr	r3, [sp, #16]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	9305      	str	r3, [sp, #20]
  u->ICR = isr;
 80020e8:	9b04      	ldr	r3, [sp, #16]
 80020ea:	9a05      	ldr	r2, [sp, #20]
 80020ec:	621a      	str	r2, [r3, #32]

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 80020ee:	9b05      	ldr	r3, [sp, #20]
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <sd_lld_serve_interrupt+0x30>
    set_error(sdp, isr);
 80020f8:	9905      	ldr	r1, [sp, #20]
 80020fa:	9801      	ldr	r0, [sp, #4]
 80020fc:	f7ff ff40 	bl	8001f80 <set_error>

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
 8002100:	9b05      	ldr	r3, [sp, #20]
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d01f      	beq.n	800214a <sd_lld_serve_interrupt+0x7a>
    osalSysLockFromISR();
 800210a:	f7ff feb9 	bl	8001e80 <osalSysLockFromISR.lto_priv.1>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
 800210e:	9b01      	ldr	r3, [sp, #4]
 8002110:	3304      	adds	r3, #4
 8002112:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fec2 	bl	8001ea0 <osalEventBroadcastFlagsI.lto_priv.1>
    osalSysUnlockFromISR();
 800211c:	f7ff feb8 	bl	8001e90 <osalSysUnlockFromISR.lto_priv.1>
 8002120:	e013      	b.n	800214a <sd_lld_serve_interrupt+0x7a>
     1) Another byte arrived after removing the previous one, this would cause
        an extra interrupt to serve.
     2) FIFO mode is enabled on devices that support it, we need to empty
        the FIFO.*/
  while (isr & USART_ISR_RXNE) {
    osalSysLockFromISR();
 8002122:	f7ff fead 	bl	8001e80 <osalSysLockFromISR.lto_priv.1>
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
 8002126:	9b04      	ldr	r3, [sp, #16]
 8002128:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800212a:	b29b      	uxth	r3, r3
 800212c:	b2da      	uxtb	r2, r3
 800212e:	9b01      	ldr	r3, [sp, #4]
 8002130:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002134:	4013      	ands	r3, r2
 8002136:	b2db      	uxtb	r3, r3
 8002138:	4619      	mov	r1, r3
 800213a:	9801      	ldr	r0, [sp, #4]
 800213c:	f7ff f8d0 	bl	80012e0 <sdIncomingDataI>
    osalSysUnlockFromISR();
 8002140:	f7ff fea6 	bl	8001e90 <osalSysUnlockFromISR.lto_priv.1>

    isr = u->ISR;
 8002144:	9b04      	ldr	r3, [sp, #16]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	9305      	str	r3, [sp, #20]
  while (isr & USART_ISR_RXNE) {
 800214a:	9b05      	ldr	r3, [sp, #20]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1e6      	bne.n	8002122 <sd_lld_serve_interrupt+0x52>
     situations:
     1) The data registers has been emptied immediately after writing it, this
        would cause an extra interrupt to serve.
     2) FIFO mode is enabled on devices that support it, we need to fill
        the FIFO.*/
  if (cr1 & USART_CR1_TXEIE) {
 8002154:	9b03      	ldr	r3, [sp, #12]
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	2b00      	cmp	r3, #0
 800215c:	d122      	bne.n	80021a4 <sd_lld_serve_interrupt+0xd4>
 800215e:	e026      	b.n	80021ae <sd_lld_serve_interrupt+0xde>
    while (isr & USART_ISR_TXE) {
      msg_t b;

      osalSysLockFromISR();
 8002160:	f7ff fe8e 	bl	8001e80 <osalSysLockFromISR.lto_priv.1>
      b = oqGetI(&sdp->oqueue);
 8002164:	9b01      	ldr	r3, [sp, #4]
 8002166:	3330      	adds	r3, #48	; 0x30
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fe09 	bl	8000d80 <oqGetI>
 800216e:	9002      	str	r0, [sp, #8]
      if (b < MSG_OK) {
 8002170:	9b02      	ldr	r3, [sp, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	da0d      	bge.n	8002192 <sd_lld_serve_interrupt+0xc2>
        chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 8002176:	9b01      	ldr	r3, [sp, #4]
 8002178:	3304      	adds	r3, #4
 800217a:	2108      	movs	r1, #8
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fe8f 	bl	8001ea0 <osalEventBroadcastFlagsI.lto_priv.1>
        u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8002182:	9b03      	ldr	r3, [sp, #12]
 8002184:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002188:	9b04      	ldr	r3, [sp, #16]
 800218a:	601a      	str	r2, [r3, #0]
        osalSysUnlockFromISR();
 800218c:	f7ff fe80 	bl	8001e90 <osalSysUnlockFromISR.lto_priv.1>
 8002190:	e00d      	b.n	80021ae <sd_lld_serve_interrupt+0xde>
        break;
      }
      u->TDR = b;
 8002192:	9b02      	ldr	r3, [sp, #8]
 8002194:	b29a      	uxth	r2, r3
 8002196:	9b04      	ldr	r3, [sp, #16]
 8002198:	851a      	strh	r2, [r3, #40]	; 0x28
      osalSysUnlockFromISR();
 800219a:	f7ff fe79 	bl	8001e90 <osalSysUnlockFromISR.lto_priv.1>

      isr = u->ISR;
 800219e:	9b04      	ldr	r3, [sp, #16]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	9305      	str	r3, [sp, #20]
    while (isr & USART_ISR_TXE) {
 80021a4:	9b05      	ldr	r3, [sp, #20]
 80021a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1d8      	bne.n	8002160 <sd_lld_serve_interrupt+0x90>
    }
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (isr & USART_ISR_TC)) {
 80021ae:	9b03      	ldr	r3, [sp, #12]
 80021b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d025      	beq.n	8002204 <sd_lld_serve_interrupt+0x134>
 80021b8:	9b05      	ldr	r3, [sp, #20]
 80021ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d020      	beq.n	8002204 <sd_lld_serve_interrupt+0x134>
    osalSysLockFromISR();
 80021c2:	f7ff fe5d 	bl	8001e80 <osalSysLockFromISR.lto_priv.1>
    if (oqIsEmptyI(&sdp->oqueue)) {
 80021c6:	9b01      	ldr	r3, [sp, #4]
 80021c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021ca:	9b01      	ldr	r3, [sp, #4]
 80021cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d105      	bne.n	80021de <sd_lld_serve_interrupt+0x10e>
 80021d2:	9b01      	ldr	r3, [sp, #4]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <sd_lld_serve_interrupt+0x10e>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <sd_lld_serve_interrupt+0x110>
 80021de:	2300      	movs	r3, #0
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <sd_lld_serve_interrupt+0x130>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
 80021ea:	9b01      	ldr	r3, [sp, #4]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2110      	movs	r1, #16
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fe55 	bl	8001ea0 <osalEventBroadcastFlagsI.lto_priv.1>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 80021f6:	9b03      	ldr	r3, [sp, #12]
 80021f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80021fc:	9b04      	ldr	r3, [sp, #16]
 80021fe:	601a      	str	r2, [r3, #0]
    }
    osalSysUnlockFromISR();
 8002200:	f7ff fe46 	bl	8001e90 <osalSysUnlockFromISR.lto_priv.1>
  }
}
 8002204:	b007      	add	sp, #28
 8002206:	f85d fb04 	ldr.w	pc, [sp], #4
 800220a:	bf00      	nop
 800220c:	0000      	movs	r0, r0
	...

08002210 <gpio_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {
 8002210:	b082      	sub	sp, #8
 8002212:	9001      	str	r0, [sp, #4]
 8002214:	9100      	str	r1, [sp, #0]

  gpiop->OTYPER  = config->otyper;
 8002216:	9b00      	ldr	r3, [sp, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	9b01      	ldr	r3, [sp, #4]
 800221c:	605a      	str	r2, [r3, #4]
  gpiop->ASCR    = config->ascr;
 800221e:	9b00      	ldr	r3, [sp, #0]
 8002220:	69da      	ldr	r2, [r3, #28]
 8002222:	9b01      	ldr	r3, [sp, #4]
 8002224:	62da      	str	r2, [r3, #44]	; 0x2c
  gpiop->OSPEEDR = config->ospeedr;
 8002226:	9b00      	ldr	r3, [sp, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	9b01      	ldr	r3, [sp, #4]
 800222c:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800222e:	9b00      	ldr	r3, [sp, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	9b01      	ldr	r3, [sp, #4]
 8002234:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 8002236:	9b00      	ldr	r3, [sp, #0]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	9b01      	ldr	r3, [sp, #4]
 800223c:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800223e:	9b00      	ldr	r3, [sp, #0]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	9b01      	ldr	r3, [sp, #4]
 8002244:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8002246:	9b00      	ldr	r3, [sp, #0]
 8002248:	699a      	ldr	r2, [r3, #24]
 800224a:	9b01      	ldr	r3, [sp, #4]
 800224c:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800224e:	9b00      	ldr	r3, [sp, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	9b01      	ldr	r3, [sp, #4]
 8002254:	601a      	str	r2, [r3, #0]
  gpiop->LOCKR   = config->lockr;
 8002256:	9b00      	ldr	r3, [sp, #0]
 8002258:	6a1a      	ldr	r2, [r3, #32]
 800225a:	9b01      	ldr	r3, [sp, #4]
 800225c:	61da      	str	r2, [r3, #28]
}
 800225e:	b002      	add	sp, #8
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
	...

08002270 <stm32_gpio_init>:

static void stm32_gpio_init(void) {
 8002270:	b508      	push	{r3, lr}

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB2(STM32_GPIO_EN_MASK);
 8002272:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <stm32_gpio_init+0x80>)
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	4a1e      	ldr	r2, [pc, #120]	; (80022f0 <stm32_gpio_init+0x80>)
 8002278:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800227c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800227e:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <stm32_gpio_init+0x80>)
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	4a1b      	ldr	r2, [pc, #108]	; (80022f0 <stm32_gpio_init+0x80>)
 8002284:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002288:	62d3      	str	r3, [r2, #44]	; 0x2c
 800228a:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <stm32_gpio_init+0x80>)
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  rccEnableAHB2(STM32_GPIO_EN_MASK, true);
 800228e:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <stm32_gpio_init+0x80>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	4a17      	ldr	r2, [pc, #92]	; (80022f0 <stm32_gpio_init+0x80>)
 8002294:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8002298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <stm32_gpio_init+0x80>)
 800229c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800229e:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <stm32_gpio_init+0x80>)
 80022a0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80022a4:	66d3      	str	r3, [r2, #108]	; 0x6c
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <stm32_gpio_init+0x80>)
 80022a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c

  /* Initializing all the defined GPIO ports.*/
#if STM32_HAS_GPIOA
  gpio_init(GPIOA, &gpio_default_config.PAData);
 80022aa:	4912      	ldr	r1, [pc, #72]	; (80022f4 <stm32_gpio_init+0x84>)
 80022ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b0:	f7ff ffae 	bl	8002210 <gpio_init>
#endif
#if STM32_HAS_GPIOB
  gpio_init(GPIOB, &gpio_default_config.PBData);
 80022b4:	4910      	ldr	r1, [pc, #64]	; (80022f8 <stm32_gpio_init+0x88>)
 80022b6:	4811      	ldr	r0, [pc, #68]	; (80022fc <stm32_gpio_init+0x8c>)
 80022b8:	f7ff ffaa 	bl	8002210 <gpio_init>
#endif
#if STM32_HAS_GPIOC
  gpio_init(GPIOC, &gpio_default_config.PCData);
 80022bc:	4910      	ldr	r1, [pc, #64]	; (8002300 <stm32_gpio_init+0x90>)
 80022be:	4811      	ldr	r0, [pc, #68]	; (8002304 <stm32_gpio_init+0x94>)
 80022c0:	f7ff ffa6 	bl	8002210 <gpio_init>
#endif
#if STM32_HAS_GPIOD
  gpio_init(GPIOD, &gpio_default_config.PDData);
 80022c4:	4910      	ldr	r1, [pc, #64]	; (8002308 <stm32_gpio_init+0x98>)
 80022c6:	4811      	ldr	r0, [pc, #68]	; (800230c <stm32_gpio_init+0x9c>)
 80022c8:	f7ff ffa2 	bl	8002210 <gpio_init>
#endif
#if STM32_HAS_GPIOE
  gpio_init(GPIOE, &gpio_default_config.PEData);
 80022cc:	4910      	ldr	r1, [pc, #64]	; (8002310 <stm32_gpio_init+0xa0>)
 80022ce:	4811      	ldr	r0, [pc, #68]	; (8002314 <stm32_gpio_init+0xa4>)
 80022d0:	f7ff ff9e 	bl	8002210 <gpio_init>
#endif
#if STM32_HAS_GPIOF
  gpio_init(GPIOF, &gpio_default_config.PFData);
 80022d4:	4910      	ldr	r1, [pc, #64]	; (8002318 <stm32_gpio_init+0xa8>)
 80022d6:	4811      	ldr	r0, [pc, #68]	; (800231c <stm32_gpio_init+0xac>)
 80022d8:	f7ff ff9a 	bl	8002210 <gpio_init>
#endif
#if STM32_HAS_GPIOG
  gpio_init(GPIOG, &gpio_default_config.PGData);
 80022dc:	4910      	ldr	r1, [pc, #64]	; (8002320 <stm32_gpio_init+0xb0>)
 80022de:	4811      	ldr	r0, [pc, #68]	; (8002324 <stm32_gpio_init+0xb4>)
 80022e0:	f7ff ff96 	bl	8002210 <gpio_init>
#endif
#if STM32_HAS_GPIOH
  gpio_init(GPIOH, &gpio_default_config.PHData);
 80022e4:	4910      	ldr	r1, [pc, #64]	; (8002328 <stm32_gpio_init+0xb8>)
 80022e6:	4811      	ldr	r0, [pc, #68]	; (800232c <stm32_gpio_init+0xbc>)
 80022e8:	f7ff ff92 	bl	8002210 <gpio_init>
  gpio_init(GPIOJ, &gpio_default_config.PJData);
#endif
#if STM32_HAS_GPIOK
  gpio_init(GPIOK, &gpio_default_config.PKData);
#endif
}
 80022ec:	bd08      	pop	{r3, pc}
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	08007a98 	.word	0x08007a98
 80022f8:	08007abc 	.word	0x08007abc
 80022fc:	48000400 	.word	0x48000400
 8002300:	08007ae0 	.word	0x08007ae0
 8002304:	48000800 	.word	0x48000800
 8002308:	08007b04 	.word	0x08007b04
 800230c:	48000c00 	.word	0x48000c00
 8002310:	08007b28 	.word	0x08007b28
 8002314:	48001000 	.word	0x48001000
 8002318:	08007b4c 	.word	0x08007b4c
 800231c:	48001400 	.word	0x48001400
 8002320:	08007b70 	.word	0x08007b70
 8002324:	48001800 	.word	0x48001800
 8002328:	08007b94 	.word	0x08007b94
 800232c:	48001c00 	.word	0x48001c00

08002330 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8002330:	b508      	push	{r3, lr}

  stm32_gpio_init();
 8002332:	f7ff ff9d 	bl	8002270 <stm32_gpio_init>
  stm32_clock_init();
 8002336:	f7ff f9eb 	bl	8001710 <stm32_clock_init>
}
 800233a:	bd08      	pop	{r3, pc}
 800233c:	0000      	movs	r0, r0
	...

08002340 <boardInit>:
 * @brief   Board-specific initialization code.
 * @note    You can add your board-specific code here.
 */
void boardInit(void) {

}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
	...

08002350 <chTimeAddX.lto_priv.0>:
 * @return              The new system time.
 *
 * @xclass
 */
static inline systime_t chTimeAddX(systime_t systime,
                                   sysinterval_t interval) {
 8002350:	b082      	sub	sp, #8
 8002352:	9001      	str	r0, [sp, #4]
 8002354:	9100      	str	r1, [sp, #0]

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
 8002356:	9a01      	ldr	r2, [sp, #4]
 8002358:	9b00      	ldr	r3, [sp, #0]
 800235a:	4413      	add	r3, r2
}
 800235c:	4618      	mov	r0, r3
 800235e:	b002      	add	sp, #8
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
	...

08002370 <chTimeDiffX.lto_priv.0>:
 * @param[in] end       second system time
 * @return              The interval representing the time difference.
 *
 * @xclass
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 8002370:	b082      	sub	sp, #8
 8002372:	9001      	str	r0, [sp, #4]
 8002374:	9100      	str	r1, [sp, #0]

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8002376:	9a00      	ldr	r2, [sp, #0]
 8002378:	9b01      	ldr	r3, [sp, #4]
 800237a:	1ad3      	subs	r3, r2, r3
  /*lint -restore*/
}
 800237c:	4618      	mov	r0, r3
 800237e:	b002      	add	sp, #8
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
	...

08002390 <port_timer_stop_alarm.lto_priv.0>:
/**
 * @brief   Stops the alarm interrupt.
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {
 8002390:	b508      	push	{r3, lr}

  stStopAlarm();
 8002392:	f7fe fa4d 	bl	8000830 <stStopAlarm>
}
 8002396:	bd08      	pop	{r3, pc}
	...

080023a0 <port_timer_set_alarm.lto_priv.0>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {
 80023a0:	b500      	push	{lr}
 80023a2:	b083      	sub	sp, #12
 80023a4:	9001      	str	r0, [sp, #4]

  stSetAlarm(time);
 80023a6:	9801      	ldr	r0, [sp, #4]
 80023a8:	f7fe fa4a 	bl	8000840 <stSetAlarm>
}
 80023ac:	b003      	add	sp, #12
 80023ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80023b2:	bf00      	nop
	...

080023c0 <port_timer_get_time.lto_priv.0>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
 80023c0:	b508      	push	{r3, lr}

  return stGetCounter();
 80023c2:	f7fe fa4d 	bl	8000860 <stGetCounter>
 80023c6:	4603      	mov	r3, r0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	bd08      	pop	{r3, pc}
 80023cc:	0000      	movs	r0, r0
	...

080023d0 <chSysEnable.lto_priv.0>:
static inline void chSysEnable(void) {
 80023d0:	b082      	sub	sp, #8
 80023d2:	2300      	movs	r3, #0
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	9b01      	ldr	r3, [sp, #4]
 80023d8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80023dc:	b662      	cpsie	i
}
 80023de:	b002      	add	sp, #8
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
	...

080023f0 <chSysLockFromISR.lto_priv.2>:
static inline void chSysLockFromISR(void) {
 80023f0:	b082      	sub	sp, #8
 80023f2:	2320      	movs	r3, #32
 80023f4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	f383 8811 	msr	BASEPRI, r3
}
 80023fc:	b002      	add	sp, #8
 80023fe:	4770      	bx	lr

08002400 <chSysUnlockFromISR.lto_priv.2>:
static inline void chSysUnlockFromISR(void) {
 8002400:	b082      	sub	sp, #8
 8002402:	2300      	movs	r3, #0
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	9b01      	ldr	r3, [sp, #4]
 8002408:	f383 8811 	msr	BASEPRI, r3
}
 800240c:	b002      	add	sp, #8
 800240e:	4770      	bx	lr

08002410 <chVTGetSystemTimeX.lto_priv.0>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
 8002410:	b508      	push	{r3, lr}

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
 8002412:	f7ff ffd5 	bl	80023c0 <port_timer_get_time.lto_priv.0>
 8002416:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd08      	pop	{r3, pc}
 800241c:	0000      	movs	r0, r0
	...

08002420 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {
 8002420:	b510      	push	{r4, lr}
 8002422:	b086      	sub	sp, #24
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8002424:	4b39      	ldr	r3, [pc, #228]	; (800250c <chVTDoTickI+0xec>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	9305      	str	r3, [sp, #20]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
 800242a:	f7ff fff1 	bl	8002410 <chVTGetSystemTimeX.lto_priv.0>
 800242e:	9002      	str	r0, [sp, #8]
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8002430:	4b36      	ldr	r3, [pc, #216]	; (800250c <chVTDoTickI+0xec>)
 8002432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002434:	9902      	ldr	r1, [sp, #8]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff9a 	bl	8002370 <chTimeDiffX.lto_priv.0>
 800243c:	9003      	str	r0, [sp, #12]

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 800243e:	9b05      	ldr	r3, [sp, #20]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	9a03      	ldr	r2, [sp, #12]
 8002444:	429a      	cmp	r2, r3
 8002446:	d332      	bcc.n	80024ae <chVTDoTickI+0x8e>
    /* Consuming all timers between "vtp->lasttime" and now.*/
    do {
      vtfunc_t fn;

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
 8002448:	4b30      	ldr	r3, [pc, #192]	; (800250c <chVTDoTickI+0xec>)
 800244a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800244c:	9b05      	ldr	r3, [sp, #20]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4413      	add	r3, r2
 8002452:	4a2e      	ldr	r2, [pc, #184]	; (800250c <chVTDoTickI+0xec>)
 8002454:	6293      	str	r3, [r2, #40]	; 0x28
      nowdelta -= vtp->delta;
 8002456:	9b05      	ldr	r3, [sp, #20]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	9a03      	ldr	r2, [sp, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	9303      	str	r3, [sp, #12]

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8002460:	9b05      	ldr	r3, [sp, #20]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a2a      	ldr	r2, [pc, #168]	; (8002510 <chVTDoTickI+0xf0>)
 8002466:	605a      	str	r2, [r3, #4]
      ch.vtlist.next = vtp->next;
 8002468:	9b05      	ldr	r3, [sp, #20]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a27      	ldr	r2, [pc, #156]	; (800250c <chVTDoTickI+0xec>)
 800246e:	61d3      	str	r3, [r2, #28]
      fn = vtp->func;
 8002470:	9b05      	ldr	r3, [sp, #20]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	9301      	str	r3, [sp, #4]
      vtp->func = NULL;
 8002476:	9b05      	ldr	r3, [sp, #20]
 8002478:	2200      	movs	r2, #0
 800247a:	60da      	str	r2, [r3, #12]

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <chVTDoTickI+0xec>)
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	4a23      	ldr	r2, [pc, #140]	; (8002510 <chVTDoTickI+0xf0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d101      	bne.n	800248a <chVTDoTickI+0x6a>
        port_timer_stop_alarm();
 8002486:	f7ff ff83 	bl	8002390 <port_timer_stop_alarm.lto_priv.0>
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
 800248a:	f7ff ffb9 	bl	8002400 <chSysUnlockFromISR.lto_priv.2>
      fn(vtp->par);
 800248e:	9b05      	ldr	r3, [sp, #20]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	9b01      	ldr	r3, [sp, #4]
 8002494:	4610      	mov	r0, r2
 8002496:	4798      	blx	r3
      chSysLockFromISR();
 8002498:	f7ff ffaa 	bl	80023f0 <chSysLockFromISR.lto_priv.2>

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <chVTDoTickI+0xec>)
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	9305      	str	r3, [sp, #20]
    }
    while (vtp->delta <= nowdelta);
 80024a2:	9b05      	ldr	r3, [sp, #20]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	9a03      	ldr	r2, [sp, #12]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d2cd      	bcs.n	8002448 <chVTDoTickI+0x28>
 80024ac:	e7bd      	b.n	800242a <chVTDoTickI+0xa>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80024ae:	4b17      	ldr	r3, [pc, #92]	; (800250c <chVTDoTickI+0xec>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	4a17      	ldr	r2, [pc, #92]	; (8002510 <chVTDoTickI+0xf0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d026      	beq.n	8002506 <chVTDoTickI+0xe6>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <chVTDoTickI+0xec>)
 80024ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024bc:	9b03      	ldr	r3, [sp, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	4a12      	ldr	r2, [pc, #72]	; (800250c <chVTDoTickI+0xec>)
 80024c2:	6293      	str	r3, [r2, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <chVTDoTickI+0xec>)
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	6899      	ldr	r1, [r3, #8]
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <chVTDoTickI+0xec>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	9a03      	ldr	r2, [sp, #12]
 80024d0:	1a8a      	subs	r2, r1, r2
 80024d2:	609a      	str	r2, [r3, #8]

  /* Recalculating the next alarm time.*/
  delta = vtp->delta - chTimeDiffX(ch.vtlist.lasttime, now);
 80024d4:	9b05      	ldr	r3, [sp, #20]
 80024d6:	689c      	ldr	r4, [r3, #8]
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <chVTDoTickI+0xec>)
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	9902      	ldr	r1, [sp, #8]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff ff46 	bl	8002370 <chTimeDiffX.lto_priv.0>
 80024e4:	4603      	mov	r3, r0
 80024e6:	1ae3      	subs	r3, r4, r3
 80024e8:	9304      	str	r3, [sp, #16]
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80024ea:	9b04      	ldr	r3, [sp, #16]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d801      	bhi.n	80024f4 <chVTDoTickI+0xd4>
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80024f0:	2302      	movs	r3, #2
 80024f2:	9304      	str	r3, [sp, #16]
  /* The delta could be too large for the physical timer to handle.*/
  else if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));
 80024f4:	9904      	ldr	r1, [sp, #16]
 80024f6:	9802      	ldr	r0, [sp, #8]
 80024f8:	f7ff ff2a 	bl	8002350 <chTimeAddX.lto_priv.0>
 80024fc:	4603      	mov	r3, r0
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff ff4e 	bl	80023a0 <port_timer_set_alarm.lto_priv.0>
 8002504:	e000      	b.n	8002508 <chVTDoTickI+0xe8>
    return;
 8002506:	bf00      	nop

  chDbgAssert(chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX()) <=
              chTimeDiffX(ch.vtlist.lasttime, chTimeAddX(now, delta)),
              "exceeding delta");
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8002508:	b006      	add	sp, #24
 800250a:	bd10      	pop	{r4, pc}
 800250c:	20000968 	.word	0x20000968
 8002510:	20000984 	.word	0x20000984
	...

08002520 <_oslib_init>:
/**
 * @brief   Initialization of all library modules.
 *
 * @notapi
 */
static inline void _oslib_init(void) {
 8002520:	b508      	push	{r3, lr}

#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 8002522:	f000 fec5 	bl	80032b0 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 8002526:	f000 ff13 	bl	8003350 <_heap_init>
#endif
#if CH_CFG_USE_FACTORY == TRUE
  _factory_init();
 800252a:	f000 ff69 	bl	8003400 <_factory_init>
#endif
}
 800252e:	bd08      	pop	{r3, pc}

08002530 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8002530:	b082      	sub	sp, #8
 8002532:	9001      	str	r0, [sp, #4]
 8002534:	e7fe      	b.n	8002534 <_idle_thread+0x4>
 8002536:	bf00      	nop
	...

08002540 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8002540:	b508      	push	{r3, lr}

  _scheduler_init();
 8002542:	f000 fa1d 	bl	8002980 <_scheduler_init>
  _vt_init();
 8002546:	f000 f88b 	bl	8002660 <_vt_init>
  _trace_init();
  _oslib_init();
 800254a:	f7ff ffe9 	bl	8002520 <_oslib_init>
#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  ch.dbg.isr_cnt  = (cnt_t)0;
  ch.dbg.lock_cnt = (cnt_t)0;
#endif
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 800254e:	f000 fdb7 	bl	80030c0 <_tm_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8002552:	2280      	movs	r2, #128	; 0x80
 8002554:	490b      	ldr	r1, [pc, #44]	; (8002584 <chSysInit+0x44>)
 8002556:	480c      	ldr	r0, [pc, #48]	; (8002588 <chSysInit+0x48>)
 8002558:	f000 fc22 	bl	8002da0 <_thread_init>
 800255c:	4603      	mov	r3, r0
 800255e:	4a0b      	ldr	r2, [pc, #44]	; (800258c <chSysInit+0x4c>)
 8002560:	6193      	str	r3, [r2, #24]
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <chSysInit+0x4c>)
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2200      	movs	r2, #0
 8002568:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 800256a:	4b08      	ldr	r3, [pc, #32]	; (800258c <chSysInit+0x4c>)
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2020 	strb.w	r2, [r3, #32]

  /* Port layer initialization last because it depend on some of the
     initializations performed before.*/
  port_init();
 8002574:	f000 ffdc 	bl	8003530 <port_init>

  /* Initialization hook.*/
  CH_CFG_SYSTEM_INIT_HOOK();

  /* It is alive now.*/
  chSysEnable();
 8002578:	f7ff ff2a 	bl	80023d0 <chSysEnable.lto_priv.0>
    };

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreate(&idle_descriptor);
 800257c:	4804      	ldr	r0, [pc, #16]	; (8002590 <chSysInit+0x50>)
 800257e:	f000 fc7f 	bl	8002e80 <chThdCreate>
  }
#endif
}
 8002582:	bd08      	pop	{r3, pc}
 8002584:	080087b8 	.word	0x080087b8
 8002588:	20000998 	.word	0x20000998
 800258c:	20000968 	.word	0x20000968
 8002590:	08008798 	.word	0x08008798
	...

080025a0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 80025a0:	b508      	push	{r3, lr}
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
 80025a2:	f7ff ff3d 	bl	8002420 <chVTDoTickI>
  CH_CFG_SYSTEM_TICK_HOOK();
}
 80025a6:	bd08      	pop	{r3, pc}
	...

080025b0 <chTimeAddX.lto_priv.1>:
                                   sysinterval_t interval) {
 80025b0:	b082      	sub	sp, #8
 80025b2:	9001      	str	r0, [sp, #4]
 80025b4:	9100      	str	r1, [sp, #0]
  return systime + (systime_t)interval;
 80025b6:	9a01      	ldr	r2, [sp, #4]
 80025b8:	9b00      	ldr	r3, [sp, #0]
 80025ba:	4413      	add	r3, r2
}
 80025bc:	4618      	mov	r0, r3
 80025be:	b002      	add	sp, #8
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
	...

080025d0 <chTimeDiffX.lto_priv.1>:
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 80025d0:	b082      	sub	sp, #8
 80025d2:	9001      	str	r0, [sp, #4]
 80025d4:	9100      	str	r1, [sp, #0]
  return (sysinterval_t)((systime_t)(end - start));
 80025d6:	9a00      	ldr	r2, [sp, #0]
 80025d8:	9b01      	ldr	r3, [sp, #4]
 80025da:	1ad3      	subs	r3, r2, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	b002      	add	sp, #8
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
	...

080025f0 <port_timer_start_alarm>:
static inline void port_timer_start_alarm(systime_t time) {
 80025f0:	b500      	push	{lr}
 80025f2:	b083      	sub	sp, #12
 80025f4:	9001      	str	r0, [sp, #4]
  stStartAlarm(time);
 80025f6:	9801      	ldr	r0, [sp, #4]
 80025f8:	f7fe f90a 	bl	8000810 <stStartAlarm>
}
 80025fc:	b003      	add	sp, #12
 80025fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002602:	bf00      	nop
	...

08002610 <port_timer_stop_alarm.lto_priv.1>:
static inline void port_timer_stop_alarm(void) {
 8002610:	b508      	push	{r3, lr}
  stStopAlarm();
 8002612:	f7fe f90d 	bl	8000830 <stStopAlarm>
}
 8002616:	bd08      	pop	{r3, pc}
	...

08002620 <port_timer_set_alarm.lto_priv.1>:
static inline void port_timer_set_alarm(systime_t time) {
 8002620:	b500      	push	{lr}
 8002622:	b083      	sub	sp, #12
 8002624:	9001      	str	r0, [sp, #4]
  stSetAlarm(time);
 8002626:	9801      	ldr	r0, [sp, #4]
 8002628:	f7fe f90a 	bl	8000840 <stSetAlarm>
}
 800262c:	b003      	add	sp, #12
 800262e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002632:	bf00      	nop
	...

08002640 <port_timer_get_time.lto_priv.1>:
static inline systime_t port_timer_get_time(void) {
 8002640:	b508      	push	{r3, lr}
  return stGetCounter();
 8002642:	f7fe f90d 	bl	8000860 <stGetCounter>
 8002646:	4603      	mov	r3, r0
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd08      	pop	{r3, pc}
 800264c:	0000      	movs	r0, r0
	...

08002650 <chVTGetSystemTimeX.lto_priv.1>:
static inline systime_t chVTGetSystemTimeX(void) {
 8002650:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8002652:	f7ff fff5 	bl	8002640 <port_timer_get_time.lto_priv.1>
 8002656:	4603      	mov	r3, r0
}
 8002658:	4618      	mov	r0, r3
 800265a:	bd08      	pop	{r3, pc}
 800265c:	0000      	movs	r0, r0
	...

08002660 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <_vt_init+0x1c>)
 8002662:	4a07      	ldr	r2, [pc, #28]	; (8002680 <_vt_init+0x20>)
 8002664:	61da      	str	r2, [r3, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8002666:	4b05      	ldr	r3, [pc, #20]	; (800267c <_vt_init+0x1c>)
 8002668:	4a05      	ldr	r2, [pc, #20]	; (8002680 <_vt_init+0x20>)
 800266a:	621a      	str	r2, [r3, #32]
  ch.vtlist.delta = (sysinterval_t)-1;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <_vt_init+0x1c>)
 800266e:	f04f 32ff 	mov.w	r2, #4294967295
 8002672:	625a      	str	r2, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8002674:	4b01      	ldr	r3, [pc, #4]	; (800267c <_vt_init+0x1c>)
 8002676:	2200      	movs	r2, #0
 8002678:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800267a:	4770      	bx	lr
 800267c:	20000968 	.word	0x20000968
 8002680:	20000984 	.word	0x20000984
	...

08002690 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 8002690:	b500      	push	{lr}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	9003      	str	r0, [sp, #12]
 8002696:	9102      	str	r1, [sp, #8]
 8002698:	9201      	str	r2, [sp, #4]
 800269a:	9300      	str	r3, [sp, #0]
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 800269c:	9b03      	ldr	r3, [sp, #12]
 800269e:	9a00      	ldr	r2, [sp, #0]
 80026a0:	611a      	str	r2, [r3, #16]
  vtp->func = vtfunc;
 80026a2:	9b03      	ldr	r3, [sp, #12]
 80026a4:	9a01      	ldr	r2, [sp, #4]
 80026a6:	60da      	str	r2, [r3, #12]

#if CH_CFG_ST_TIMEDELTA > 0
  {
    systime_t now = chVTGetSystemTimeX();
 80026a8:	f7ff ffd2 	bl	8002650 <chVTGetSystemTimeX.lto_priv.1>
 80026ac:	9005      	str	r0, [sp, #20]

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80026ae:	9b02      	ldr	r3, [sp, #8]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d801      	bhi.n	80026b8 <chVTDoSetI+0x28>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80026b4:	2302      	movs	r3, #2
 80026b6:	9302      	str	r3, [sp, #8]
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80026b8:	4b3f      	ldr	r3, [pc, #252]	; (80027b8 <chVTDoSetI+0x128>)
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	4a3f      	ldr	r2, [pc, #252]	; (80027bc <chVTDoSetI+0x12c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d11c      	bne.n	80026fc <chVTDoSetI+0x6c>

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
 80026c2:	4a3d      	ldr	r2, [pc, #244]	; (80027b8 <chVTDoSetI+0x128>)
 80026c4:	9b05      	ldr	r3, [sp, #20]
 80026c6:	6293      	str	r3, [r2, #40]	; 0x28
      ch.vtlist.next = vtp;
 80026c8:	4a3b      	ldr	r2, [pc, #236]	; (80027b8 <chVTDoSetI+0x128>)
 80026ca:	9b03      	ldr	r3, [sp, #12]
 80026cc:	61d3      	str	r3, [r2, #28]
      ch.vtlist.prev = vtp;
 80026ce:	4a3a      	ldr	r2, [pc, #232]	; (80027b8 <chVTDoSetI+0x128>)
 80026d0:	9b03      	ldr	r3, [sp, #12]
 80026d2:	6213      	str	r3, [r2, #32]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 80026d4:	9b03      	ldr	r3, [sp, #12]
 80026d6:	4a39      	ldr	r2, [pc, #228]	; (80027bc <chVTDoSetI+0x12c>)
 80026d8:	601a      	str	r2, [r3, #0]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80026da:	9b03      	ldr	r3, [sp, #12]
 80026dc:	4a37      	ldr	r2, [pc, #220]	; (80027bc <chVTDoSetI+0x12c>)
 80026de:	605a      	str	r2, [r3, #4]
      vtp->delta = delay;
 80026e0:	9b03      	ldr	r3, [sp, #12]
 80026e2:	9a02      	ldr	r2, [sp, #8]
 80026e4:	609a      	str	r2, [r3, #8]
        delay = (sysinterval_t)TIME_MAX_SYSTIME;
      }
#endif

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(chTimeAddX(ch.vtlist.lasttime, delay));
 80026e6:	4b34      	ldr	r3, [pc, #208]	; (80027b8 <chVTDoSetI+0x128>)
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	9902      	ldr	r1, [sp, #8]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff5f 	bl	80025b0 <chTimeAddX.lto_priv.1>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff7b 	bl	80025f0 <port_timer_start_alarm>
 80026fa:	e05a      	b.n	80027b2 <chVTDoSetI+0x122>

      return;
    }

    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;
 80026fc:	4b2e      	ldr	r3, [pc, #184]	; (80027b8 <chVTDoSetI+0x128>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	9307      	str	r3, [sp, #28]

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8002702:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <chVTDoSetI+0x128>)
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	9905      	ldr	r1, [sp, #20]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff61 	bl	80025d0 <chTimeDiffX.lto_priv.1>
 800270e:	4602      	mov	r2, r0
 8002710:	9b02      	ldr	r3, [sp, #8]
 8002712:	4413      	add	r3, r2
 8002714:	9306      	str	r3, [sp, #24]

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8002716:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <chVTDoSetI+0x128>)
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	9905      	ldr	r1, [sp, #20]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff57 	bl	80025d0 <chTimeDiffX.lto_priv.1>
 8002722:	4602      	mov	r2, r0
 8002724:	9b06      	ldr	r3, [sp, #24]
 8002726:	4293      	cmp	r3, r2
 8002728:	d208      	bcs.n	800273c <chVTDoSetI+0xac>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 800272a:	9b07      	ldr	r3, [sp, #28]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	9a06      	ldr	r2, [sp, #24]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	9306      	str	r3, [sp, #24]
      p = p->next;
 8002734:	9b07      	ldr	r3, [sp, #28]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	9307      	str	r3, [sp, #28]
 800273a:	e019      	b.n	8002770 <chVTDoSetI+0xe0>
    }
    else if (delta < p->delta) {
 800273c:	9b07      	ldr	r3, [sp, #28]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	9a06      	ldr	r2, [sp, #24]
 8002742:	429a      	cmp	r2, r3
 8002744:	d214      	bcs.n	8002770 <chVTDoSetI+0xe0>
      sysinterval_t deadline_delta;

      /* A small delay that will become the first element in the delta list
         and next deadline.*/
      deadline_delta = delta;
 8002746:	9b06      	ldr	r3, [sp, #24]
 8002748:	9304      	str	r3, [sp, #16]
      /* The delta could be too large for the physical timer to handle.*/
      if (deadline_delta > (sysinterval_t)TIME_MAX_SYSTIME) {
        deadline_delta = (sysinterval_t)TIME_MAX_SYSTIME;
      }
#endif
      port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, deadline_delta));
 800274a:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <chVTDoSetI+0x128>)
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	9904      	ldr	r1, [sp, #16]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff2d 	bl	80025b0 <chTimeAddX.lto_priv.1>
 8002756:	4603      	mov	r3, r0
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff61 	bl	8002620 <port_timer_set_alarm.lto_priv.1>
 800275e:	e007      	b.n	8002770 <chVTDoSetI+0xe0>
     this timer. */
  while (p->delta < delta) {
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
 8002760:	9b07      	ldr	r3, [sp, #28]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	9a06      	ldr	r2, [sp, #24]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	9306      	str	r3, [sp, #24]
    p = p->next;
 800276a:	9b07      	ldr	r3, [sp, #28]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	9307      	str	r3, [sp, #28]
  while (p->delta < delta) {
 8002770:	9b07      	ldr	r3, [sp, #28]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	9a06      	ldr	r2, [sp, #24]
 8002776:	429a      	cmp	r2, r3
 8002778:	d8f2      	bhi.n	8002760 <chVTDoSetI+0xd0>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 800277a:	9b03      	ldr	r3, [sp, #12]
 800277c:	9a07      	ldr	r2, [sp, #28]
 800277e:	601a      	str	r2, [r3, #0]
  vtp->prev = vtp->next->prev;
 8002780:	9b03      	ldr	r3, [sp, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	9b03      	ldr	r3, [sp, #12]
 8002788:	605a      	str	r2, [r3, #4]
  vtp->prev->next = vtp;
 800278a:	9b03      	ldr	r3, [sp, #12]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	9a03      	ldr	r2, [sp, #12]
 8002790:	601a      	str	r2, [r3, #0]
  p->prev = vtp;
 8002792:	9b07      	ldr	r3, [sp, #28]
 8002794:	9a03      	ldr	r2, [sp, #12]
 8002796:	605a      	str	r2, [r3, #4]
  vtp->delta = delta;
 8002798:	9b03      	ldr	r3, [sp, #12]
 800279a:	9a06      	ldr	r2, [sp, #24]
 800279c:	609a      	str	r2, [r3, #8]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 800279e:	9b07      	ldr	r3, [sp, #28]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	9b06      	ldr	r3, [sp, #24]
 80027a4:	1ad2      	subs	r2, r2, r3
 80027a6:	9b07      	ldr	r3, [sp, #28]
 80027a8:	609a      	str	r2, [r3, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 80027aa:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <chVTDoSetI+0x128>)
 80027ac:	f04f 32ff 	mov.w	r2, #4294967295
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80027b2:	b009      	add	sp, #36	; 0x24
 80027b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80027b8:	20000968 	.word	0x20000968
 80027bc:	20000984 	.word	0x20000984

080027c0 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 80027c0:	b510      	push	{r4, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	9001      	str	r0, [sp, #4]
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80027c6:	4b37      	ldr	r3, [pc, #220]	; (80028a4 <chVTDoResetI+0xe4>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	9a01      	ldr	r2, [sp, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d01b      	beq.n	8002808 <chVTDoResetI+0x48>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80027d0:	9b01      	ldr	r3, [sp, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	9a01      	ldr	r2, [sp, #4]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	601a      	str	r2, [r3, #0]
    vtp->next->prev = vtp->prev;
 80027da:	9b01      	ldr	r3, [sp, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	9a01      	ldr	r2, [sp, #4]
 80027e0:	6852      	ldr	r2, [r2, #4]
 80027e2:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 80027e4:	9b01      	ldr	r3, [sp, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80027ea:	9b01      	ldr	r3, [sp, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2e      	ldr	r2, [pc, #184]	; (80028a8 <chVTDoResetI+0xe8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d051      	beq.n	8002898 <chVTDoResetI+0xd8>
      vtp->next->delta += vtp->delta;
 80027f4:	9b01      	ldr	r3, [sp, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6899      	ldr	r1, [r3, #8]
 80027fa:	9b01      	ldr	r3, [sp, #4]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	9b01      	ldr	r3, [sp, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	440a      	add	r2, r1
 8002804:	609a      	str	r2, [r3, #8]
 8002806:	e04a      	b.n	800289e <chVTDoResetI+0xde>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8002808:	9b01      	ldr	r3, [sp, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a25      	ldr	r2, [pc, #148]	; (80028a4 <chVTDoResetI+0xe4>)
 800280e:	61d3      	str	r3, [r2, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8002810:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <chVTDoResetI+0xe4>)
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <chVTDoResetI+0xe8>)
 8002816:	605a      	str	r2, [r3, #4]
  vtp->func = NULL;
 8002818:	9b01      	ldr	r3, [sp, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <chVTDoResetI+0xe4>)
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	4a21      	ldr	r2, [pc, #132]	; (80028a8 <chVTDoResetI+0xe8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d102      	bne.n	800282e <chVTDoResetI+0x6e>
    port_timer_stop_alarm();
 8002828:	f7ff fef2 	bl	8002610 <port_timer_stop_alarm.lto_priv.1>
 800282c:	e037      	b.n	800289e <chVTDoResetI+0xde>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <chVTDoResetI+0xe4>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	6899      	ldr	r1, [r3, #8]
 8002834:	9b01      	ldr	r3, [sp, #4]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <chVTDoResetI+0xe4>)
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	440a      	add	r2, r1
 800283e:	609a      	str	r2, [r3, #8]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8002840:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <chVTDoResetI+0xe4>)
 8002842:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002844:	f7ff ff04 	bl	8002650 <chVTGetSystemTimeX.lto_priv.1>
 8002848:	4603      	mov	r3, r0
 800284a:	4619      	mov	r1, r3
 800284c:	4620      	mov	r0, r4
 800284e:	f7ff febf 	bl	80025d0 <chTimeDiffX.lto_priv.1>
 8002852:	9002      	str	r0, [sp, #8]

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8002854:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <chVTDoResetI+0xe4>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	9a02      	ldr	r2, [sp, #8]
 800285c:	429a      	cmp	r2, r3
 800285e:	d21d      	bcs.n	800289c <chVTDoResetI+0xdc>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <chVTDoResetI+0xe4>)
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	9b02      	ldr	r3, [sp, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	9303      	str	r3, [sp, #12]

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800286c:	9b03      	ldr	r3, [sp, #12]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d803      	bhi.n	800287a <chVTDoResetI+0xba>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8002872:	9b02      	ldr	r3, [sp, #8]
 8002874:	3302      	adds	r3, #2
 8002876:	9303      	str	r3, [sp, #12]
 8002878:	e003      	b.n	8002882 <chVTDoResetI+0xc2>
  }
  else {
    delta = nowdelta + delta;
 800287a:	9a03      	ldr	r2, [sp, #12]
 800287c:	9b02      	ldr	r3, [sp, #8]
 800287e:	4413      	add	r3, r2
 8002880:	9303      	str	r3, [sp, #12]
    if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
      delta = (sysinterval_t)TIME_MAX_SYSTIME;
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <chVTDoResetI+0xe4>)
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	9903      	ldr	r1, [sp, #12]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fe91 	bl	80025b0 <chTimeAddX.lto_priv.1>
 800288e:	4603      	mov	r3, r0
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fec5 	bl	8002620 <port_timer_set_alarm.lto_priv.1>
 8002896:	e002      	b.n	800289e <chVTDoResetI+0xde>
    return;
 8002898:	bf00      	nop
 800289a:	e000      	b.n	800289e <chVTDoResetI+0xde>
    return;
 800289c:	bf00      	nop
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800289e:	b004      	add	sp, #16
 80028a0:	bd10      	pop	{r4, pc}
 80028a2:	bf00      	nop
 80028a4:	20000968 	.word	0x20000968
 80028a8:	20000984 	.word	0x20000984
 80028ac:	00000000 	.word	0x00000000

080028b0 <queue_init.lto_priv.2>:
static inline void queue_init(threads_queue_t *tqp) {
 80028b0:	b082      	sub	sp, #8
 80028b2:	9001      	str	r0, [sp, #4]
  tqp->next = (thread_t *)tqp;
 80028b4:	9b01      	ldr	r3, [sp, #4]
 80028b6:	9a01      	ldr	r2, [sp, #4]
 80028b8:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80028ba:	9b01      	ldr	r3, [sp, #4]
 80028bc:	9a01      	ldr	r2, [sp, #4]
 80028be:	605a      	str	r2, [r3, #4]
}
 80028c0:	b002      	add	sp, #8
 80028c2:	4770      	bx	lr
	...

080028d0 <queue_fifo_remove.lto_priv.0>:
  tp->queue.prev             = tqp->prev;
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 80028d0:	b084      	sub	sp, #16
 80028d2:	9001      	str	r0, [sp, #4]
  thread_t *tp = tqp->next;
 80028d4:	9b01      	ldr	r3, [sp, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	9303      	str	r3, [sp, #12]

  tqp->next             = tp->queue.next;
 80028da:	9b03      	ldr	r3, [sp, #12]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	9b01      	ldr	r3, [sp, #4]
 80028e0:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80028e2:	9b01      	ldr	r3, [sp, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	9a01      	ldr	r2, [sp, #4]
 80028e8:	605a      	str	r2, [r3, #4]

  return tp;
 80028ea:	9b03      	ldr	r3, [sp, #12]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	b004      	add	sp, #16
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
	...

08002900 <queue_dequeue.lto_priv.0>:
  tqp->prev->queue.next = (thread_t *)tqp;

  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {
 8002900:	b082      	sub	sp, #8
 8002902:	9001      	str	r0, [sp, #4]

  tp->queue.prev->queue.next = tp->queue.next;
 8002904:	9b01      	ldr	r3, [sp, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	9a01      	ldr	r2, [sp, #4]
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800290e:	9b01      	ldr	r3, [sp, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	9a01      	ldr	r2, [sp, #4]
 8002914:	6852      	ldr	r2, [r2, #4]
 8002916:	605a      	str	r2, [r3, #4]

  return tp;
 8002918:	9b01      	ldr	r3, [sp, #4]
}
 800291a:	4618      	mov	r0, r3
 800291c:	b002      	add	sp, #8
 800291e:	4770      	bx	lr

08002920 <chSysLockFromISR.lto_priv.3>:
static inline void chSysLockFromISR(void) {
 8002920:	b082      	sub	sp, #8
 8002922:	2320      	movs	r3, #32
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	9b01      	ldr	r3, [sp, #4]
 8002928:	f383 8811 	msr	BASEPRI, r3
}
 800292c:	b002      	add	sp, #8
 800292e:	4770      	bx	lr

08002930 <chSysUnlockFromISR.lto_priv.3>:
static inline void chSysUnlockFromISR(void) {
 8002930:	b082      	sub	sp, #8
 8002932:	2300      	movs	r3, #0
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	9b01      	ldr	r3, [sp, #4]
 8002938:	f383 8811 	msr	BASEPRI, r3
}
 800293c:	b002      	add	sp, #8
 800293e:	4770      	bx	lr

08002940 <chVTIsArmedI.lto_priv.0>:
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 8002940:	b082      	sub	sp, #8
 8002942:	9001      	str	r0, [sp, #4]
  return (bool)(vtp->func != NULL);
 8002944:	9b01      	ldr	r3, [sp, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
}
 8002952:	4618      	mov	r0, r3
 8002954:	b002      	add	sp, #8
 8002956:	4770      	bx	lr
	...

08002960 <chSemFastSignalI.lto_priv.0>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
 8002960:	b082      	sub	sp, #8
 8002962:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  sp->cnt++;
 8002964:	9b01      	ldr	r3, [sp, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	9b01      	ldr	r3, [sp, #4]
 800296c:	609a      	str	r2, [r3, #8]
}
 800296e:	b002      	add	sp, #8
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
	...

08002980 <_scheduler_init>:
/**
 * @brief   Scheduler initialization.
 *
 * @notapi
 */
void _scheduler_init(void) {
 8002980:	b508      	push	{r3, lr}

  queue_init(&ch.rlist.queue);
 8002982:	4806      	ldr	r0, [pc, #24]	; (800299c <_scheduler_init+0x1c>)
 8002984:	f7ff ff94 	bl	80028b0 <queue_init.lto_priv.2>
  ch.rlist.prio = NOPRIO;
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <_scheduler_init+0x1c>)
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
 800298e:	4b03      	ldr	r3, [pc, #12]	; (800299c <_scheduler_init+0x1c>)
 8002990:	4a02      	ldr	r2, [pc, #8]	; (800299c <_scheduler_init+0x1c>)
 8002992:	611a      	str	r2, [r3, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8002994:	4b01      	ldr	r3, [pc, #4]	; (800299c <_scheduler_init+0x1c>)
 8002996:	4a01      	ldr	r2, [pc, #4]	; (800299c <_scheduler_init+0x1c>)
 8002998:	615a      	str	r2, [r3, #20]
#endif
}
 800299a:	bd08      	pop	{r3, pc}
 800299c:	20000968 	.word	0x20000968

080029a0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80029a0:	b084      	sub	sp, #16
 80029a2:	9001      	str	r0, [sp, #4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80029a4:	9b01      	ldr	r3, [sp, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80029ac:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <chSchReadyI+0x48>)
 80029ae:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->queue.next;
 80029b0:	9b03      	ldr	r3, [sp, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	9303      	str	r3, [sp, #12]
  } while (cp->prio >= tp->prio);
 80029b6:	9b03      	ldr	r3, [sp, #12]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	9b01      	ldr	r3, [sp, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d2f6      	bcs.n	80029b0 <chSchReadyI+0x10>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 80029c2:	9b01      	ldr	r3, [sp, #4]
 80029c4:	9a03      	ldr	r2, [sp, #12]
 80029c6:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 80029c8:	9b03      	ldr	r3, [sp, #12]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	9b01      	ldr	r3, [sp, #4]
 80029ce:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 80029d0:	9b01      	ldr	r3, [sp, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	9a01      	ldr	r2, [sp, #4]
 80029d6:	601a      	str	r2, [r3, #0]
  cp->queue.prev             = tp;
 80029d8:	9b03      	ldr	r3, [sp, #12]
 80029da:	9a01      	ldr	r2, [sp, #4]
 80029dc:	605a      	str	r2, [r3, #4]

  return tp;
 80029de:	9b01      	ldr	r3, [sp, #4]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	b004      	add	sp, #16
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000968 	.word	0x20000968
 80029ec:	00000000 	.word	0x00000000

080029f0 <chSchReadyAheadI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyAheadI(thread_t *tp) {
 80029f0:	b084      	sub	sp, #16
 80029f2:	9001      	str	r0, [sp, #4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80029f4:	9b01      	ldr	r3, [sp, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80029fc:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <chSchReadyAheadI+0x48>)
 80029fe:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->queue.next;
 8002a00:	9b03      	ldr	r3, [sp, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	9303      	str	r3, [sp, #12]
  } while (cp->prio > tp->prio);
 8002a06:	9b03      	ldr	r3, [sp, #12]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	9b01      	ldr	r3, [sp, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d8f6      	bhi.n	8002a00 <chSchReadyAheadI+0x10>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8002a12:	9b01      	ldr	r3, [sp, #4]
 8002a14:	9a03      	ldr	r2, [sp, #12]
 8002a16:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 8002a18:	9b03      	ldr	r3, [sp, #12]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	9b01      	ldr	r3, [sp, #4]
 8002a1e:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8002a20:	9b01      	ldr	r3, [sp, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	9a01      	ldr	r2, [sp, #4]
 8002a26:	601a      	str	r2, [r3, #0]
  cp->queue.prev             = tp;
 8002a28:	9b03      	ldr	r3, [sp, #12]
 8002a2a:	9a01      	ldr	r2, [sp, #4]
 8002a2c:	605a      	str	r2, [r3, #4]

  return tp;
 8002a2e:	9b01      	ldr	r3, [sp, #4]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	b004      	add	sp, #16
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20000968 	.word	0x20000968
 8002a3c:	00000000 	.word	0x00000000

08002a40 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8002a40:	b500      	push	{lr}
 8002a42:	b085      	sub	sp, #20
 8002a44:	4603      	mov	r3, r0
 8002a46:	f88d 3007 	strb.w	r3, [sp, #7]
  thread_t *otp = currp;
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <chSchGoSleepS+0x44>)
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	9303      	str	r3, [sp, #12]

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 8002a50:	9b03      	ldr	r3, [sp, #12]
 8002a52:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002a56:	f883 2020 	strb.w	r2, [r3, #32]
     time quantum when it will wakeup.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002a5a:	480a      	ldr	r0, [pc, #40]	; (8002a84 <chSchGoSleepS+0x44>)
 8002a5c:	f7ff ff38 	bl	80028d0 <queue_fifo_remove.lto_priv.0>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <chSchGoSleepS+0x44>)
 8002a64:	6193      	str	r3, [r2, #24]
  currp->state = CH_STATE_CURRENT;
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <chSchGoSleepS+0x44>)
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2020 	strb.w	r2, [r3, #32]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <chSchGoSleepS+0x44>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	9903      	ldr	r1, [sp, #12]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fd fc02 	bl	8000280 <_port_switch>
}
 8002a7c:	b005      	add	sp, #20
 8002a7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a82:	bf00      	nop
 8002a84:	20000968 	.word	0x20000968
	...

08002a90 <wakeup>:

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8002a90:	b500      	push	{lr}
 8002a92:	b085      	sub	sp, #20
 8002a94:	9001      	str	r0, [sp, #4]
  thread_t *tp = (thread_t *)p;
 8002a96:	9b01      	ldr	r3, [sp, #4]
 8002a98:	9303      	str	r3, [sp, #12]

  chSysLockFromISR();
 8002a9a:	f7ff ff41 	bl	8002920 <chSysLockFromISR.lto_priv.3>
  switch (tp->state) {
 8002a9e:	9b03      	ldr	r3, [sp, #12]
 8002aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aa4:	2b07      	cmp	r3, #7
 8002aa6:	d823      	bhi.n	8002af0 <wakeup+0x60>
 8002aa8:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <wakeup+0x20>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002ad1 	.word	0x08002ad1
 8002ab4:	08002af1 	.word	0x08002af1
 8002ab8:	08002af1 	.word	0x08002af1
 8002abc:	08002ad7 	.word	0x08002ad7
 8002ac0:	08002aeb 	.word	0x08002aeb
 8002ac4:	08002ae1 	.word	0x08002ae1
 8002ac8:	08002af1 	.word	0x08002af1
 8002acc:	08002aeb 	.word	0x08002aeb
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
 8002ad0:	f7ff ff2e 	bl	8002930 <chSysUnlockFromISR.lto_priv.3>
 8002ad4:	e015      	b.n	8002b02 <wakeup+0x72>
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 8002ad6:	9b03      	ldr	r3, [sp, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e007      	b.n	8002af0 <wakeup+0x60>
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8002ae0:	9b03      	ldr	r3, [sp, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff3b 	bl	8002960 <chSemFastSignalI.lto_priv.0>
    /* Falls through.*/
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
    /* States requiring dequeuing.*/
    (void) queue_dequeue(tp);
 8002aea:	9803      	ldr	r0, [sp, #12]
 8002aec:	f7ff ff08 	bl	8002900 <queue_dequeue.lto_priv.0>
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8002af0:	9b03      	ldr	r3, [sp, #12]
 8002af2:	f04f 32ff 	mov.w	r2, #4294967295
 8002af6:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002af8:	9803      	ldr	r0, [sp, #12]
 8002afa:	f7ff ff51 	bl	80029a0 <chSchReadyI>
  chSysUnlockFromISR();
 8002afe:	f7ff ff17 	bl	8002930 <chSysUnlockFromISR.lto_priv.3>
}
 8002b02:	b005      	add	sp, #20
 8002b04:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002b10 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002b10:	b500      	push	{lr}
 8002b12:	b089      	sub	sp, #36	; 0x24
 8002b14:	4603      	mov	r3, r0
 8002b16:	9100      	str	r1, [sp, #0]
 8002b18:	f88d 3007 	strb.w	r3, [sp, #7]

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 8002b1c:	9b00      	ldr	r3, [sp, #0]
 8002b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b22:	d017      	beq.n	8002b54 <chSchGoSleepTimeoutS+0x44>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, wakeup, currp);
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <chSchGoSleepTimeoutS+0x5c>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	a803      	add	r0, sp, #12
 8002b2a:	4a11      	ldr	r2, [pc, #68]	; (8002b70 <chSchGoSleepTimeoutS+0x60>)
 8002b2c:	9900      	ldr	r1, [sp, #0]
 8002b2e:	f7ff fdaf 	bl	8002690 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8002b32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff82 	bl	8002a40 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8002b3c:	ab03      	add	r3, sp, #12
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fefe 	bl	8002940 <chVTIsArmedI.lto_priv.0>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <chSchGoSleepTimeoutS+0x4e>
      chVTDoResetI(&vt);
 8002b4a:	ab03      	add	r3, sp, #12
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fe37 	bl	80027c0 <chVTDoResetI>
 8002b52:	e004      	b.n	8002b5e <chSchGoSleepTimeoutS+0x4e>
    }
  }
  else {
    chSchGoSleepS(newstate);
 8002b54:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff71 	bl	8002a40 <chSchGoSleepS>
  }

  return currp->u.rdymsg;
 8002b5e:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <chSchGoSleepTimeoutS+0x5c>)
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	b009      	add	sp, #36	; 0x24
 8002b68:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b6c:	20000968 	.word	0x20000968
 8002b70:	08002a91 	.word	0x08002a91
	...

08002b80 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002b80:	b500      	push	{lr}
 8002b82:	b085      	sub	sp, #20
 8002b84:	9001      	str	r0, [sp, #4]
 8002b86:	9100      	str	r1, [sp, #0]
  thread_t *otp = currp;
 8002b88:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <chSchWakeupS+0x4c>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	9303      	str	r3, [sp, #12]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8002b8e:	9b01      	ldr	r3, [sp, #4]
 8002b90:	9a00      	ldr	r2, [sp, #0]
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8002b94:	9b01      	ldr	r3, [sp, #4]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	9b03      	ldr	r3, [sp, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d803      	bhi.n	8002ba8 <chSchWakeupS+0x28>
    (void) chSchReadyI(ntp);
 8002ba0:	9801      	ldr	r0, [sp, #4]
 8002ba2:	f7ff fefd 	bl	80029a0 <chSchReadyI>
 8002ba6:	e00e      	b.n	8002bc6 <chSchWakeupS+0x46>
  }
  else {
    otp = chSchReadyAheadI(otp);
 8002ba8:	9803      	ldr	r0, [sp, #12]
 8002baa:	f7ff ff21 	bl	80029f0 <chSchReadyAheadI>
 8002bae:	9003      	str	r0, [sp, #12]
    if (otp->prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
 8002bb0:	4a06      	ldr	r2, [pc, #24]	; (8002bcc <chSchWakeupS+0x4c>)
 8002bb2:	9b01      	ldr	r3, [sp, #4]
 8002bb4:	6193      	str	r3, [r2, #24]
    ntp->state = CH_STATE_CURRENT;
 8002bb6:	9b01      	ldr	r3, [sp, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8002bbe:	9903      	ldr	r1, [sp, #12]
 8002bc0:	9801      	ldr	r0, [sp, #4]
 8002bc2:	f7fd fb5d 	bl	8000280 <_port_switch>
  }
}
 8002bc6:	b005      	add	sp, #20
 8002bc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bcc:	20000968 	.word	0x20000968

08002bd0 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
 8002bd0:	b082      	sub	sp, #8
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <chSchIsPreemptionRequired+0x28>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	9301      	str	r3, [sp, #4]
  tprio_t p2 = currp->prio;
 8002bda:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <chSchIsPreemptionRequired+0x28>)
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	9300      	str	r3, [sp, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 8002be2:	9a01      	ldr	r2, [sp, #4]
 8002be4:	9b00      	ldr	r3, [sp, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	bf8c      	ite	hi
 8002bea:	2301      	movhi	r3, #1
 8002bec:	2300      	movls	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
#endif
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	b002      	add	sp, #8
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000968 	.word	0x20000968
 8002bfc:	00000000 	.word	0x00000000

08002c00 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8002c00:	b500      	push	{lr}
 8002c02:	b083      	sub	sp, #12
  thread_t *otp = currp;
 8002c04:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <chSchDoReschedule+0x3c>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	9301      	str	r3, [sp, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002c0a:	480c      	ldr	r0, [pc, #48]	; (8002c3c <chSchDoReschedule+0x3c>)
 8002c0c:	f7ff fe60 	bl	80028d0 <queue_fifo_remove.lto_priv.0>
 8002c10:	4603      	mov	r3, r0
 8002c12:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <chSchDoReschedule+0x3c>)
 8002c14:	6193      	str	r3, [r2, #24]
  currp->state = CH_STATE_CURRENT;
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <chSchDoReschedule+0x3c>)
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2020 	strb.w	r2, [r3, #32]
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
 8002c20:	9801      	ldr	r0, [sp, #4]
 8002c22:	f7ff fee5 	bl	80029f0 <chSchReadyAheadI>
 8002c26:	9001      	str	r0, [sp, #4]
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8002c28:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <chSchDoReschedule+0x3c>)
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	9901      	ldr	r1, [sp, #4]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fb26 	bl	8000280 <_port_switch>
}
 8002c34:	b003      	add	sp, #12
 8002c36:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c3a:	bf00      	nop
 8002c3c:	20000968 	.word	0x20000968

08002c40 <list_init>:
static inline void list_init(threads_list_t *tlp) {
 8002c40:	b082      	sub	sp, #8
 8002c42:	9001      	str	r0, [sp, #4]
  tlp->next = (thread_t *)tlp;
 8002c44:	9b01      	ldr	r3, [sp, #4]
 8002c46:	9a01      	ldr	r2, [sp, #4]
 8002c48:	601a      	str	r2, [r3, #0]
}
 8002c4a:	b002      	add	sp, #8
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop

08002c50 <list_notempty>:
static inline bool list_notempty(threads_list_t *tlp) {
 8002c50:	b082      	sub	sp, #8
 8002c52:	9001      	str	r0, [sp, #4]
  return (bool)(tlp->next != (thread_t *)tlp);
 8002c54:	9b01      	ldr	r3, [sp, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	9a01      	ldr	r2, [sp, #4]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	bf14      	ite	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	2300      	moveq	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	b002      	add	sp, #8
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	0000      	movs	r0, r0
	...

08002c70 <queue_init.lto_priv.3>:
static inline void queue_init(threads_queue_t *tqp) {
 8002c70:	b082      	sub	sp, #8
 8002c72:	9001      	str	r0, [sp, #4]
  tqp->next = (thread_t *)tqp;
 8002c74:	9b01      	ldr	r3, [sp, #4]
 8002c76:	9a01      	ldr	r2, [sp, #4]
 8002c78:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8002c7a:	9b01      	ldr	r3, [sp, #4]
 8002c7c:	9a01      	ldr	r2, [sp, #4]
 8002c7e:	605a      	str	r2, [r3, #4]
}
 8002c80:	b002      	add	sp, #8
 8002c82:	4770      	bx	lr
	...

08002c90 <queue_notempty.lto_priv.0>:
static inline bool queue_notempty(const threads_queue_t *tqp) {
 8002c90:	b082      	sub	sp, #8
 8002c92:	9001      	str	r0, [sp, #4]
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002c94:	9b01      	ldr	r3, [sp, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	9a01      	ldr	r2, [sp, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	bf14      	ite	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	2300      	moveq	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	b002      	add	sp, #8
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	0000      	movs	r0, r0
	...

08002cb0 <list_remove>:
static inline thread_t *list_remove(threads_list_t *tlp) {
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	9001      	str	r0, [sp, #4]
  thread_t *tp = tlp->next;
 8002cb4:	9b01      	ldr	r3, [sp, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	9303      	str	r3, [sp, #12]
  tlp->next = tp->queue.next;
 8002cba:	9b03      	ldr	r3, [sp, #12]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	9b01      	ldr	r3, [sp, #4]
 8002cc0:	601a      	str	r2, [r3, #0]
  return tp;
 8002cc2:	9b03      	ldr	r3, [sp, #12]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	b004      	add	sp, #16
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	0000      	movs	r0, r0
	...

08002cd0 <queue_insert.lto_priv.0>:
static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	9001      	str	r0, [sp, #4]
 8002cd4:	9100      	str	r1, [sp, #0]
  tp->queue.next             = (thread_t *)tqp;
 8002cd6:	9b01      	ldr	r3, [sp, #4]
 8002cd8:	9a00      	ldr	r2, [sp, #0]
 8002cda:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = tqp->prev;
 8002cdc:	9b00      	ldr	r3, [sp, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	9b01      	ldr	r3, [sp, #4]
 8002ce2:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8002ce4:	9b01      	ldr	r3, [sp, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	9a01      	ldr	r2, [sp, #4]
 8002cea:	601a      	str	r2, [r3, #0]
  tqp->prev                  = tp;
 8002cec:	9b00      	ldr	r3, [sp, #0]
 8002cee:	9a01      	ldr	r2, [sp, #4]
 8002cf0:	605a      	str	r2, [r3, #4]
}
 8002cf2:	b002      	add	sp, #8
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
	...

08002d00 <queue_fifo_remove.lto_priv.1>:
static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 8002d00:	b084      	sub	sp, #16
 8002d02:	9001      	str	r0, [sp, #4]
  thread_t *tp = tqp->next;
 8002d04:	9b01      	ldr	r3, [sp, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	9303      	str	r3, [sp, #12]
  tqp->next             = tp->queue.next;
 8002d0a:	9b03      	ldr	r3, [sp, #12]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	9b01      	ldr	r3, [sp, #4]
 8002d10:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002d12:	9b01      	ldr	r3, [sp, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	9a01      	ldr	r2, [sp, #4]
 8002d18:	605a      	str	r2, [r3, #4]
  return tp;
 8002d1a:	9b03      	ldr	r3, [sp, #12]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	b004      	add	sp, #16
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
	...

08002d30 <chSysLock.lto_priv.5>:
static inline void chSysLock(void) {
 8002d30:	b082      	sub	sp, #8
 8002d32:	2320      	movs	r3, #32
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	9b01      	ldr	r3, [sp, #4]
 8002d38:	f383 8811 	msr	BASEPRI, r3
}
 8002d3c:	b002      	add	sp, #8
 8002d3e:	4770      	bx	lr

08002d40 <chSysUnlock.lto_priv.5>:
static inline void chSysUnlock(void) {
 8002d40:	b082      	sub	sp, #8
 8002d42:	2300      	movs	r3, #0
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	9b01      	ldr	r3, [sp, #4]
 8002d48:	f383 8811 	msr	BASEPRI, r3
}
 8002d4c:	b002      	add	sp, #8
 8002d4e:	4770      	bx	lr

08002d50 <chThdSleepS>:
static inline void chThdSleepS(sysinterval_t ticks) {
 8002d50:	b500      	push	{lr}
 8002d52:	b083      	sub	sp, #12
 8002d54:	9001      	str	r0, [sp, #4]
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8002d56:	9901      	ldr	r1, [sp, #4]
 8002d58:	2008      	movs	r0, #8
 8002d5a:	f7ff fed9 	bl	8002b10 <chSchGoSleepTimeoutS>
}
 8002d5e:	b003      	add	sp, #12
 8002d60:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002d70 <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8002d70:	b500      	push	{lr}
 8002d72:	b085      	sub	sp, #20
 8002d74:	9001      	str	r0, [sp, #4]
 8002d76:	9100      	str	r1, [sp, #0]
  thread_t *tp;

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);
 8002d78:	9801      	ldr	r0, [sp, #4]
 8002d7a:	f7ff ffc1 	bl	8002d00 <queue_fifo_remove.lto_priv.1>
 8002d7e:	9003      	str	r0, [sp, #12]

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8002d80:	9b03      	ldr	r3, [sp, #12]
 8002d82:	9a00      	ldr	r2, [sp, #0]
 8002d84:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002d86:	9803      	ldr	r0, [sp, #12]
 8002d88:	f7ff fe0a 	bl	80029a0 <chSchReadyI>
}
 8002d8c:	b005      	add	sp, #20
 8002d8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d92:	bf00      	nop
	...

08002da0 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
 8002da0:	b500      	push	{lr}
 8002da2:	b085      	sub	sp, #20
 8002da4:	9003      	str	r0, [sp, #12]
 8002da6:	9102      	str	r1, [sp, #8]
 8002da8:	9201      	str	r2, [sp, #4]

  tp->prio      = prio;
 8002daa:	9b03      	ldr	r3, [sp, #12]
 8002dac:	9a01      	ldr	r2, [sp, #4]
 8002dae:	609a      	str	r2, [r3, #8]
  tp->state     = CH_STATE_WTSTART;
 8002db0:	9b03      	ldr	r3, [sp, #12]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 2020 	strb.w	r2, [r3, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002db8:	9b03      	ldr	r3, [sp, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8002dc0:	9b03      	ldr	r3, [sp, #12]
 8002dc2:	9a01      	ldr	r2, [sp, #4]
 8002dc4:	63da      	str	r2, [r3, #60]	; 0x3c
  tp->mtxlist   = NULL;
 8002dc6:	9b03      	ldr	r3, [sp, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	639a      	str	r2, [r3, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8002dcc:	9b03      	ldr	r3, [sp, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	635a      	str	r2, [r3, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8002dd2:	9b03      	ldr	r3, [sp, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  tp->name      = name;
 8002dda:	9b03      	ldr	r3, [sp, #12]
 8002ddc:	9a02      	ldr	r2, [sp, #8]
 8002dde:	619a      	str	r2, [r3, #24]
  REG_INSERT(tp);
 8002de0:	9b03      	ldr	r3, [sp, #12]
 8002de2:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <_thread_init+0x7c>)
 8002de4:	611a      	str	r2, [r3, #16]
 8002de6:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <_thread_init+0x7c>)
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	9b03      	ldr	r3, [sp, #12]
 8002dec:	615a      	str	r2, [r3, #20]
 8002dee:	9b03      	ldr	r3, [sp, #12]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	9a03      	ldr	r2, [sp, #12]
 8002df4:	611a      	str	r2, [r3, #16]
 8002df6:	4a09      	ldr	r2, [pc, #36]	; (8002e1c <_thread_init+0x7c>)
 8002df8:	9b03      	ldr	r3, [sp, #12]
 8002dfa:	6153      	str	r3, [r2, #20]
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 8002dfc:	9b03      	ldr	r3, [sp, #12]
 8002dfe:	3328      	adds	r3, #40	; 0x28
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff1d 	bl	8002c40 <list_init>
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 8002e06:	9b03      	ldr	r3, [sp, #12]
 8002e08:	332c      	adds	r3, #44	; 0x2c
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff30 	bl	8002c70 <queue_init.lto_priv.3>
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
 8002e10:	9b03      	ldr	r3, [sp, #12]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	b005      	add	sp, #20
 8002e16:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e1a:	bf00      	nop
 8002e1c:	20000968 	.word	0x20000968

08002e20 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8002e20:	b500      	push	{lr}
 8002e22:	b085      	sub	sp, #20
 8002e24:	9001      	str	r0, [sp, #4]
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8002e26:	9b01      	ldr	r3, [sp, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	3b48      	subs	r3, #72	; 0x48
 8002e2c:	9303      	str	r3, [sp, #12]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8002e2e:	9b01      	ldr	r3, [sp, #4]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	9b03      	ldr	r3, [sp, #12]
 8002e34:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002e36:	9b03      	ldr	r3, [sp, #12]
 8002e38:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 8002e3c:	9b03      	ldr	r3, [sp, #12]
 8002e3e:	60da      	str	r2, [r3, #12]
 8002e40:	9b01      	ldr	r3, [sp, #4]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	9b03      	ldr	r3, [sp, #12]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	9b01      	ldr	r3, [sp, #4]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	9b03      	ldr	r3, [sp, #12]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	9b03      	ldr	r3, [sp, #12]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a07      	ldr	r2, [pc, #28]	; (8002e78 <chThdCreateSuspendedI+0x58>)
 8002e5a:	621a      	str	r2, [r3, #32]

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 8002e5c:	9b01      	ldr	r3, [sp, #4]
 8002e5e:	6819      	ldr	r1, [r3, #0]
 8002e60:	9b01      	ldr	r3, [sp, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	461a      	mov	r2, r3
 8002e66:	9803      	ldr	r0, [sp, #12]
 8002e68:	f7ff ff9a 	bl	8002da0 <_thread_init>
 8002e6c:	4603      	mov	r3, r0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	b005      	add	sp, #20
 8002e72:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e76:	bf00      	nop
 8002e78:	08000291 	.word	0x08000291
 8002e7c:	00000000 	.word	0x00000000

08002e80 <chThdCreate>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8002e80:	b500      	push	{lr}
 8002e82:	b085      	sub	sp, #20
 8002e84:	9001      	str	r0, [sp, #4]
  _thread_memfill((uint8_t *)tdp->wbase,
                  (uint8_t *)tdp->wend,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
 8002e86:	f7ff ff53 	bl	8002d30 <chSysLock.lto_priv.5>
  tp = chThdCreateSuspendedI(tdp);
 8002e8a:	9801      	ldr	r0, [sp, #4]
 8002e8c:	f7ff ffc8 	bl	8002e20 <chThdCreateSuspendedI>
 8002e90:	9003      	str	r0, [sp, #12]
  chSchWakeupS(tp, MSG_OK);
 8002e92:	2100      	movs	r1, #0
 8002e94:	9803      	ldr	r0, [sp, #12]
 8002e96:	f7ff fe73 	bl	8002b80 <chSchWakeupS>
  chSysUnlock();
 8002e9a:	f7ff ff51 	bl	8002d40 <chSysUnlock.lto_priv.5>

  return tp;
 8002e9e:	9b03      	ldr	r3, [sp, #12]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	b005      	add	sp, #20
 8002ea4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002eb0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8002eb0:	b500      	push	{lr}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	9003      	str	r0, [sp, #12]
 8002eb6:	9102      	str	r1, [sp, #8]
 8002eb8:	9201      	str	r2, [sp, #4]
 8002eba:	9300      	str	r3, [sp, #0]
  _thread_memfill((uint8_t *)wsp,
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
 8002ebc:	f7ff ff38 	bl	8002d30 <chSysLock.lto_priv.5>

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)wsp + size -
 8002ec0:	9b02      	ldr	r3, [sp, #8]
 8002ec2:	3b48      	subs	r3, #72	; 0x48
 8002ec4:	9a03      	ldr	r2, [sp, #12]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	9305      	str	r3, [sp, #20]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 8002eca:	9b05      	ldr	r3, [sp, #20]
 8002ecc:	9a03      	ldr	r2, [sp, #12]
 8002ece:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002ed0:	9b05      	ldr	r3, [sp, #20]
 8002ed2:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 8002ed6:	9b05      	ldr	r3, [sp, #20]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	9b05      	ldr	r3, [sp, #20]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	9a00      	ldr	r2, [sp, #0]
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	9b05      	ldr	r3, [sp, #20]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	9a08      	ldr	r2, [sp, #32]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	9b05      	ldr	r3, [sp, #20]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <chThdCreateStatic+0x64>)
 8002ef0:	621a      	str	r2, [r3, #32]

  tp = _thread_init(tp, "noname", prio);
 8002ef2:	9a01      	ldr	r2, [sp, #4]
 8002ef4:	4908      	ldr	r1, [pc, #32]	; (8002f18 <chThdCreateStatic+0x68>)
 8002ef6:	9805      	ldr	r0, [sp, #20]
 8002ef8:	f7ff ff52 	bl	8002da0 <_thread_init>
 8002efc:	9005      	str	r0, [sp, #20]

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 8002efe:	2100      	movs	r1, #0
 8002f00:	9805      	ldr	r0, [sp, #20]
 8002f02:	f7ff fe3d 	bl	8002b80 <chSchWakeupS>
  chSysUnlock();
 8002f06:	f7ff ff1b 	bl	8002d40 <chSysUnlock.lto_priv.5>

  return tp;
 8002f0a:	9b05      	ldr	r3, [sp, #20]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	b007      	add	sp, #28
 8002f10:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f14:	08000291 	.word	0x08000291
 8002f18:	080087b0 	.word	0x080087b0
 8002f1c:	00000000 	.word	0x00000000

08002f20 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8002f20:	b500      	push	{lr}
 8002f22:	b083      	sub	sp, #12
 8002f24:	9001      	str	r0, [sp, #4]

  chSysLock();
 8002f26:	f7ff ff03 	bl	8002d30 <chSysLock.lto_priv.5>
  chThdExitS(msg);
 8002f2a:	9801      	ldr	r0, [sp, #4]
 8002f2c:	f000 f808 	bl	8002f40 <chThdExitS>
  /* The thread never returns here.*/
}
 8002f30:	b003      	add	sp, #12
 8002f32:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f36:	bf00      	nop
	...

08002f40 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8002f40:	b500      	push	{lr}
 8002f42:	b085      	sub	sp, #20
 8002f44:	9001      	str	r0, [sp, #4]
  thread_t *tp = currp;
 8002f46:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <chThdExitS+0x70>)
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	9303      	str	r3, [sp, #12]

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 8002f4c:	9b03      	ldr	r3, [sp, #12]
 8002f4e:	9a01      	ldr	r2, [sp, #4]
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24
 8002f52:	e008      	b.n	8002f66 <chThdExitS+0x26>
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
    (void) chSchReadyI(list_remove(&tp->waiting));
 8002f54:	9b03      	ldr	r3, [sp, #12]
 8002f56:	3328      	adds	r3, #40	; 0x28
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fea9 	bl	8002cb0 <list_remove>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fd1d 	bl	80029a0 <chSchReadyI>
  while (list_notempty(&tp->waiting)) {
 8002f66:	9b03      	ldr	r3, [sp, #12]
 8002f68:	3328      	adds	r3, #40	; 0x28
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fe70 	bl	8002c50 <list_notempty>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1ee      	bne.n	8002f54 <chThdExitS+0x14>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8002f76:	9b03      	ldr	r3, [sp, #12]
 8002f78:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d110      	bne.n	8002fa2 <chThdExitS+0x62>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8002f80:	9b03      	ldr	r3, [sp, #12]
 8002f82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f86:	f003 0303 	and.w	r3, r3, #3
  if ((tp->refs == (trefs_t)0) &&
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <chThdExitS+0x62>
    REG_REMOVE(tp);
 8002f8e:	9b03      	ldr	r3, [sp, #12]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	9a03      	ldr	r2, [sp, #12]
 8002f94:	6912      	ldr	r2, [r2, #16]
 8002f96:	611a      	str	r2, [r3, #16]
 8002f98:	9b03      	ldr	r3, [sp, #12]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	9a03      	ldr	r2, [sp, #12]
 8002f9e:	6952      	ldr	r2, [r2, #20]
 8002fa0:	615a      	str	r2, [r3, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8002fa2:	200f      	movs	r0, #15
 8002fa4:	f7ff fd4c 	bl	8002a40 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8002fa8:	b005      	add	sp, #20
 8002faa:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fae:	bf00      	nop
 8002fb0:	20000968 	.word	0x20000968
	...

08002fc0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 8002fc0:	b500      	push	{lr}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	9001      	str	r0, [sp, #4]

  chSysLock();
 8002fc6:	f7ff feb3 	bl	8002d30 <chSysLock.lto_priv.5>
  chThdSleepS(time);
 8002fca:	9801      	ldr	r0, [sp, #4]
 8002fcc:	f7ff fec0 	bl	8002d50 <chThdSleepS>
  chSysUnlock();
 8002fd0:	f7ff feb6 	bl	8002d40 <chSysUnlock.lto_priv.5>
}
 8002fd4:	b003      	add	sp, #12
 8002fd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fda:	bf00      	nop
 8002fdc:	0000      	movs	r0, r0
	...

08002fe0 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8002fe0:	b500      	push	{lr}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	9001      	str	r0, [sp, #4]
 8002fe6:	9100      	str	r1, [sp, #0]

  if (TIME_IMMEDIATE == timeout) {
 8002fe8:	9b00      	ldr	r3, [sp, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <chThdEnqueueTimeoutS+0x14>
    return MSG_TIMEOUT;
 8002fee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff2:	e00a      	b.n	800300a <chThdEnqueueTimeoutS+0x2a>
  }

  queue_insert(currp, tqp);
 8002ff4:	4b07      	ldr	r3, [pc, #28]	; (8003014 <chThdEnqueueTimeoutS+0x34>)
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	9901      	ldr	r1, [sp, #4]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fe68 	bl	8002cd0 <queue_insert.lto_priv.0>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003000:	9900      	ldr	r1, [sp, #0]
 8003002:	2004      	movs	r0, #4
 8003004:	f7ff fd84 	bl	8002b10 <chSchGoSleepTimeoutS>
 8003008:	4603      	mov	r3, r0
}
 800300a:	4618      	mov	r0, r3
 800300c:	b003      	add	sp, #12
 800300e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003012:	bf00      	nop
 8003014:	20000968 	.word	0x20000968
	...

08003020 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8003020:	b500      	push	{lr}
 8003022:	b083      	sub	sp, #12
 8003024:	9001      	str	r0, [sp, #4]
 8003026:	9100      	str	r1, [sp, #0]

  if (queue_notempty(tqp)) {
 8003028:	9801      	ldr	r0, [sp, #4]
 800302a:	f7ff fe31 	bl	8002c90 <queue_notempty.lto_priv.0>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <chThdDequeueNextI+0x1c>
    chThdDoDequeueNextI(tqp, msg);
 8003034:	9900      	ldr	r1, [sp, #0]
 8003036:	9801      	ldr	r0, [sp, #4]
 8003038:	f7ff fe9a 	bl	8002d70 <chThdDoDequeueNextI>
  }
}
 800303c:	b003      	add	sp, #12
 800303e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003042:	bf00      	nop
	...

08003050 <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
 8003050:	b430      	push	{r4, r5}
 8003052:	b084      	sub	sp, #16
 8003054:	9003      	str	r0, [sp, #12]
 8003056:	9102      	str	r1, [sp, #8]
 8003058:	9201      	str	r2, [sp, #4]

  tmp->n++;
 800305a:	9b03      	ldr	r3, [sp, #12]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	9b03      	ldr	r3, [sp, #12]
 8003062:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
 8003064:	9b03      	ldr	r3, [sp, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	9a02      	ldr	r2, [sp, #8]
 800306a:	1ad2      	subs	r2, r2, r3
 800306c:	9b01      	ldr	r3, [sp, #4]
 800306e:	1ad2      	subs	r2, r2, r3
 8003070:	9b03      	ldr	r3, [sp, #12]
 8003072:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8003074:	9b03      	ldr	r3, [sp, #12]
 8003076:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800307a:	9b03      	ldr	r3, [sp, #12]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	461a      	mov	r2, r3
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	1884      	adds	r4, r0, r2
 8003086:	eb41 0503 	adc.w	r5, r1, r3
 800308a:	9b03      	ldr	r3, [sp, #12]
 800308c:	e9c3 4504 	strd	r4, r5, [r3, #16]
  if (tmp->last > tmp->worst) {
 8003090:	9b03      	ldr	r3, [sp, #12]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	9b03      	ldr	r3, [sp, #12]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	429a      	cmp	r2, r3
 800309a:	d903      	bls.n	80030a4 <tm_stop+0x54>
    tmp->worst = tmp->last;
 800309c:	9b03      	ldr	r3, [sp, #12]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	9b03      	ldr	r3, [sp, #12]
 80030a2:	605a      	str	r2, [r3, #4]
  }
  if (tmp->last < tmp->best) {
 80030a4:	9b03      	ldr	r3, [sp, #12]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	9b03      	ldr	r3, [sp, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d203      	bcs.n	80030b8 <tm_stop+0x68>
    tmp->best = tmp->last;
 80030b0:	9b03      	ldr	r3, [sp, #12]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	9b03      	ldr	r3, [sp, #12]
 80030b6:	601a      	str	r2, [r3, #0]
  }
}
 80030b8:	b004      	add	sp, #16
 80030ba:	bc30      	pop	{r4, r5}
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop

080030c0 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 80030c0:	b500      	push	{lr}
 80030c2:	b089      	sub	sp, #36	; 0x24
  unsigned i;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <_tm_init+0x40>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	675a      	str	r2, [r3, #116]	; 0x74
  chTMObjectInit(&tm);
 80030ca:	466b      	mov	r3, sp
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f81f 	bl	8003110 <chTMObjectInit>
  i = TM_CALIBRATION_LOOP;
 80030d2:	2304      	movs	r3, #4
 80030d4:	9307      	str	r3, [sp, #28]
  do {
    chTMStartMeasurementX(&tm);
 80030d6:	466b      	mov	r3, sp
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 f831 	bl	8003140 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 80030de:	466b      	mov	r3, sp
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 f83d 	bl	8003160 <chTMStopMeasurementX>
    i--;
 80030e6:	9b07      	ldr	r3, [sp, #28]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	9307      	str	r3, [sp, #28]
  } while (i > 0U);
 80030ec:	9b07      	ldr	r3, [sp, #28]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f1      	bne.n	80030d6 <_tm_init+0x16>
  ch.tm.offset = tm.best;
 80030f2:	9b00      	ldr	r3, [sp, #0]
 80030f4:	4a02      	ldr	r2, [pc, #8]	; (8003100 <_tm_init+0x40>)
 80030f6:	6753      	str	r3, [r2, #116]	; 0x74
}
 80030f8:	b009      	add	sp, #36	; 0x24
 80030fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80030fe:	bf00      	nop
 8003100:	20000968 	.word	0x20000968
	...

08003110 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p TimeMeasurement structure
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
 8003110:	b082      	sub	sp, #8
 8003112:	9001      	str	r0, [sp, #4]

  tmp->best       = (rtcnt_t)-1;
 8003114:	9b01      	ldr	r3, [sp, #4]
 8003116:	f04f 32ff 	mov.w	r2, #4294967295
 800311a:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
 800311c:	9b01      	ldr	r3, [sp, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
 8003122:	9b01      	ldr	r3, [sp, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
 8003128:	9b01      	ldr	r3, [sp, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
 800312e:	9901      	ldr	r1, [sp, #4]
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800313c:	b002      	add	sp, #8
 800313e:	4770      	bx	lr

08003140 <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p TimeMeasurement structure
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
 8003140:	b082      	sub	sp, #8
 8003142:	9001      	str	r0, [sp, #4]
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8003144:	4b02      	ldr	r3, [pc, #8]	; (8003150 <chTMStartMeasurementX+0x10>)
 8003146:	685a      	ldr	r2, [r3, #4]

  tmp->last = chSysGetRealtimeCounterX();
 8003148:	9b01      	ldr	r3, [sp, #4]
 800314a:	609a      	str	r2, [r3, #8]
}
 800314c:	b002      	add	sp, #8
 800314e:	4770      	bx	lr
 8003150:	e0001000 	.word	0xe0001000
	...

08003160 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8003160:	b500      	push	{lr}
 8003162:	b083      	sub	sp, #12
 8003164:	9001      	str	r0, [sp, #4]
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <chTMStopMeasurementX+0x1c>)
 8003168:	685b      	ldr	r3, [r3, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800316a:	4a05      	ldr	r2, [pc, #20]	; (8003180 <chTMStopMeasurementX+0x20>)
 800316c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800316e:	4619      	mov	r1, r3
 8003170:	9801      	ldr	r0, [sp, #4]
 8003172:	f7ff ff6d 	bl	8003050 <tm_stop>
}
 8003176:	b003      	add	sp, #12
 8003178:	f85d fb04 	ldr.w	pc, [sp], #4
 800317c:	e0001000 	.word	0xe0001000
 8003180:	20000968 	.word	0x20000968
	...

08003190 <queue_init.lto_priv.5>:
static inline void queue_init(threads_queue_t *tqp) {
 8003190:	b082      	sub	sp, #8
 8003192:	9001      	str	r0, [sp, #4]
  tqp->next = (thread_t *)tqp;
 8003194:	9b01      	ldr	r3, [sp, #4]
 8003196:	9a01      	ldr	r2, [sp, #4]
 8003198:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 800319a:	9b01      	ldr	r3, [sp, #4]
 800319c:	9a01      	ldr	r2, [sp, #4]
 800319e:	605a      	str	r2, [r3, #4]
}
 80031a0:	b002      	add	sp, #8
 80031a2:	4770      	bx	lr
	...

080031b0 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 80031b0:	b500      	push	{lr}
 80031b2:	b083      	sub	sp, #12
 80031b4:	9001      	str	r0, [sp, #4]

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
 80031b6:	9b01      	ldr	r3, [sp, #4]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ffe9 	bl	8003190 <queue_init.lto_priv.5>
  mp->owner = NULL;
 80031be:	9b01      	ldr	r3, [sp, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 80031c4:	b003      	add	sp, #12
 80031c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80031ca:	bf00      	nop
 80031cc:	0000      	movs	r0, r0
	...

080031d0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80031d0:	b500      	push	{lr}
 80031d2:	b085      	sub	sp, #20
 80031d4:	9001      	str	r0, [sp, #4]
 80031d6:	9100      	str	r1, [sp, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 80031d8:	9b01      	ldr	r3, [sp, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	9303      	str	r3, [sp, #12]
 80031de:	e019      	b.n	8003214 <chEvtBroadcastFlagsI+0x44>
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
 80031e0:	9b03      	ldr	r3, [sp, #12]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	9b00      	ldr	r3, [sp, #0]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	9b03      	ldr	r3, [sp, #12]
 80031ea:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80031ec:	9b00      	ldr	r3, [sp, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <chEvtBroadcastFlagsI+0x2e>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 80031f2:	9b03      	ldr	r3, [sp, #12]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	9b00      	ldr	r3, [sp, #0]
 80031f8:	4013      	ands	r3, r2
    if ((flags == (eventflags_t)0) ||
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d007      	beq.n	800320e <chEvtBroadcastFlagsI+0x3e>
      chEvtSignalI(elp->listener, elp->events);
 80031fe:	9b03      	ldr	r3, [sp, #12]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	9b03      	ldr	r3, [sp, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	4619      	mov	r1, r3
 8003208:	4610      	mov	r0, r2
 800320a:	f000 f811 	bl	8003230 <chEvtSignalI>
    }
    elp = elp->next;
 800320e:	9b03      	ldr	r3, [sp, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	9303      	str	r3, [sp, #12]
  while (elp != (event_listener_t *)esp) {
 8003214:	9a03      	ldr	r2, [sp, #12]
 8003216:	9b01      	ldr	r3, [sp, #4]
 8003218:	429a      	cmp	r2, r3
 800321a:	d1e1      	bne.n	80031e0 <chEvtBroadcastFlagsI+0x10>
  }
}
 800321c:	b005      	add	sp, #20
 800321e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003222:	bf00      	nop
	...

08003230 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 8003230:	b500      	push	{lr}
 8003232:	b083      	sub	sp, #12
 8003234:	9001      	str	r0, [sp, #4]
 8003236:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8003238:	9b01      	ldr	r3, [sp, #4]
 800323a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800323c:	9b00      	ldr	r3, [sp, #0]
 800323e:	431a      	orrs	r2, r3
 8003240:	9b01      	ldr	r3, [sp, #4]
 8003242:	635a      	str	r2, [r3, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003244:	9b01      	ldr	r3, [sp, #4]
 8003246:	f893 3020 	ldrb.w	r3, [r3, #32]
 800324a:	2b0a      	cmp	r3, #10
 800324c:	d106      	bne.n	800325c <chEvtSignalI+0x2c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800324e:	9b01      	ldr	r3, [sp, #4]
 8003250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003252:	9b01      	ldr	r3, [sp, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	4013      	ands	r3, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10d      	bne.n	8003278 <chEvtSignalI+0x48>
      ((tp->state == CH_STATE_WTANDEVT) &&
 800325c:	9b01      	ldr	r3, [sp, #4]
 800325e:	f893 3020 	ldrb.w	r3, [r3, #32]
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8003262:	2b0b      	cmp	r3, #11
 8003264:	d10e      	bne.n	8003284 <chEvtSignalI+0x54>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8003266:	9b01      	ldr	r3, [sp, #4]
 8003268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800326a:	9b01      	ldr	r3, [sp, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	401a      	ands	r2, r3
 8003270:	9b01      	ldr	r3, [sp, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8003274:	429a      	cmp	r2, r3
 8003276:	d105      	bne.n	8003284 <chEvtSignalI+0x54>
    tp->u.rdymsg = MSG_OK;
 8003278:	9b01      	ldr	r3, [sp, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800327e:	9801      	ldr	r0, [sp, #4]
 8003280:	f7ff fb8e 	bl	80029a0 <chSchReadyI>
  }
}
 8003284:	b003      	add	sp, #12
 8003286:	f85d fb04 	ldr.w	pc, [sp], #4
 800328a:	bf00      	nop
 800328c:	0000      	movs	r0, r0
	...

08003290 <chSysLock.lto_priv.14>:
static inline void chSysLock(void) {
 8003290:	b082      	sub	sp, #8
 8003292:	2320      	movs	r3, #32
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	9b01      	ldr	r3, [sp, #4]
 8003298:	f383 8811 	msr	BASEPRI, r3
}
 800329c:	b002      	add	sp, #8
 800329e:	4770      	bx	lr

080032a0 <chSysUnlock.lto_priv.14>:
static inline void chSysUnlock(void) {
 80032a0:	b082      	sub	sp, #8
 80032a2:	2300      	movs	r3, #0
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	9b01      	ldr	r3, [sp, #4]
 80032a8:	f383 8811 	msr	BASEPRI, r3
}
 80032ac:	b002      	add	sp, #8
 80032ae:	4770      	bx	lr

080032b0 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.basemem = __heap_base__;
 80032b0:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <_core_init+0x10>)
 80032b2:	4a04      	ldr	r2, [pc, #16]	; (80032c4 <_core_init+0x14>)
 80032b4:	601a      	str	r2, [r3, #0]
  ch_memcore.topmem  = __heap_end__;
 80032b6:	4b02      	ldr	r3, [pc, #8]	; (80032c0 <_core_init+0x10>)
 80032b8:	4a03      	ldr	r2, [pc, #12]	; (80032c8 <_core_init+0x18>)
 80032ba:	605a      	str	r2, [r3, #4]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.basemem = &static_heap[0];
  ch_memcore.topmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	200009e0 	.word	0x200009e0
 80032c4:	20000fc0 	.word	0x20000fc0
 80032c8:	20018000 	.word	0x20018000
 80032cc:	00000000 	.word	0x00000000

080032d0 <chCoreAllocFromTopI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
 80032d0:	b086      	sub	sp, #24
 80032d2:	9003      	str	r0, [sp, #12]
 80032d4:	9102      	str	r1, [sp, #8]
 80032d6:	9201      	str	r2, [sp, #4]
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80032d8:	4b10      	ldr	r3, [pc, #64]	; (800331c <chCoreAllocFromTopI+0x4c>)
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	9b03      	ldr	r3, [sp, #12]
 80032de:	425b      	negs	r3, r3
 80032e0:	4413      	add	r3, r2
 80032e2:	461a      	mov	r2, r3
 80032e4:	9b02      	ldr	r3, [sp, #8]
 80032e6:	425b      	negs	r3, r3
 80032e8:	4013      	ands	r3, r2
 80032ea:	9305      	str	r3, [sp, #20]
  prev = p - offset;
 80032ec:	9b01      	ldr	r3, [sp, #4]
 80032ee:	425b      	negs	r3, r3
 80032f0:	9a05      	ldr	r2, [sp, #20]
 80032f2:	4413      	add	r3, r2
 80032f4:	9304      	str	r3, [sp, #16]

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <chCoreAllocFromTopI+0x4c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	9a04      	ldr	r2, [sp, #16]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d304      	bcc.n	800330a <chCoreAllocFromTopI+0x3a>
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <chCoreAllocFromTopI+0x4c>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	9a04      	ldr	r2, [sp, #16]
 8003306:	429a      	cmp	r2, r3
 8003308:	d901      	bls.n	800330e <chCoreAllocFromTopI+0x3e>
    return NULL;
 800330a:	2300      	movs	r3, #0
 800330c:	e003      	b.n	8003316 <chCoreAllocFromTopI+0x46>
  }

  ch_memcore.topmem = prev;
 800330e:	4a03      	ldr	r2, [pc, #12]	; (800331c <chCoreAllocFromTopI+0x4c>)
 8003310:	9b04      	ldr	r3, [sp, #16]
 8003312:	6053      	str	r3, [r2, #4]

  return p;
 8003314:	9b05      	ldr	r3, [sp, #20]
}
 8003316:	4618      	mov	r0, r3
 8003318:	b006      	add	sp, #24
 800331a:	4770      	bx	lr
 800331c:	200009e0 	.word	0x200009e0

08003320 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8003320:	b500      	push	{lr}
 8003322:	b087      	sub	sp, #28
 8003324:	9003      	str	r0, [sp, #12]
 8003326:	9102      	str	r1, [sp, #8]
 8003328:	9201      	str	r2, [sp, #4]
  void *p;

  chSysLock();
 800332a:	f7ff ffb1 	bl	8003290 <chSysLock.lto_priv.14>
  p = chCoreAllocFromTopI(size, align, offset);
 800332e:	9a01      	ldr	r2, [sp, #4]
 8003330:	9902      	ldr	r1, [sp, #8]
 8003332:	9803      	ldr	r0, [sp, #12]
 8003334:	f7ff ffcc 	bl	80032d0 <chCoreAllocFromTopI>
 8003338:	9005      	str	r0, [sp, #20]
  chSysUnlock();
 800333a:	f7ff ffb1 	bl	80032a0 <chSysUnlock.lto_priv.14>

  return p;
 800333e:	9b05      	ldr	r3, [sp, #20]
}
 8003340:	4618      	mov	r0, r3
 8003342:	b007      	add	sp, #28
 8003344:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003350 <_heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
 8003350:	b508      	push	{r3, lr}

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8003352:	4b06      	ldr	r3, [pc, #24]	; (800336c <_heap_init+0x1c>)
 8003354:	4a06      	ldr	r2, [pc, #24]	; (8003370 <_heap_init+0x20>)
 8003356:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
 8003358:	4b04      	ldr	r3, [pc, #16]	; (800336c <_heap_init+0x1c>)
 800335a:	2200      	movs	r2, #0
 800335c:	605a      	str	r2, [r3, #4]
  H_PAGES(&default_heap.header) = 0;
 800335e:	4b03      	ldr	r3, [pc, #12]	; (800336c <_heap_init+0x1c>)
 8003360:	2200      	movs	r2, #0
 8003362:	609a      	str	r2, [r3, #8]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 8003364:	4803      	ldr	r0, [pc, #12]	; (8003374 <_heap_init+0x24>)
 8003366:	f7ff ff23 	bl	80031b0 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
 800336a:	bd08      	pop	{r3, pc}
 800336c:	200009e8 	.word	0x200009e8
 8003370:	08003321 	.word	0x08003321
 8003374:	200009f4 	.word	0x200009f4
	...

08003380 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 8003380:	b084      	sub	sp, #16
 8003382:	9003      	str	r0, [sp, #12]
 8003384:	9102      	str	r1, [sp, #8]
 8003386:	9201      	str	r2, [sp, #4]
 8003388:	9300      	str	r3, [sp, #0]
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 800338a:	9b03      	ldr	r3, [sp, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
 8003390:	9b03      	ldr	r3, [sp, #12]
 8003392:	9a02      	ldr	r2, [sp, #8]
 8003394:	605a      	str	r2, [r3, #4]
  mp->align = align;
 8003396:	9b03      	ldr	r3, [sp, #12]
 8003398:	9a01      	ldr	r2, [sp, #4]
 800339a:	609a      	str	r2, [r3, #8]
  mp->provider = provider;
 800339c:	9b03      	ldr	r3, [sp, #12]
 800339e:	9a00      	ldr	r2, [sp, #0]
 80033a0:	60da      	str	r2, [r3, #12]
}
 80033a2:	b004      	add	sp, #16
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
	...

080033b0 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 80033b0:	b500      	push	{lr}
 80033b2:	b083      	sub	sp, #12
 80033b4:	9001      	str	r0, [sp, #4]
 80033b6:	9100      	str	r1, [sp, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 80033b8:	2200      	movs	r2, #0
 80033ba:	9900      	ldr	r1, [sp, #0]
 80033bc:	9801      	ldr	r0, [sp, #4]
 80033be:	f7ff ff87 	bl	80032d0 <chCoreAllocFromTopI>
 80033c2:	4603      	mov	r3, r0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	b003      	add	sp, #12
 80033c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80033cc:	0000      	movs	r0, r0
	...

080033d0 <chPoolObjectInit.lto_priv.0>:
 *
 * @init
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {
 80033d0:	b500      	push	{lr}
 80033d2:	b085      	sub	sp, #20
 80033d4:	9003      	str	r0, [sp, #12]
 80033d6:	9102      	str	r1, [sp, #8]
 80033d8:	9201      	str	r2, [sp, #4]

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 80033da:	9b01      	ldr	r3, [sp, #4]
 80033dc:	2204      	movs	r2, #4
 80033de:	9902      	ldr	r1, [sp, #8]
 80033e0:	9803      	ldr	r0, [sp, #12]
 80033e2:	f7ff ffcd 	bl	8003380 <chPoolObjectInitAligned>
}
 80033e6:	b005      	add	sp, #20
 80033e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80033ec:	0000      	movs	r0, r0
	...

080033f0 <dyn_list_init>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {
 80033f0:	b082      	sub	sp, #8
 80033f2:	9001      	str	r0, [sp, #4]

  dlp->next = (dyn_element_t *)dlp;
 80033f4:	9b01      	ldr	r3, [sp, #4]
 80033f6:	9a01      	ldr	r2, [sp, #4]
 80033f8:	601a      	str	r2, [r3, #0]
}
 80033fa:	b002      	add	sp, #8
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop

08003400 <_factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void _factory_init(void) {
 8003400:	b508      	push	{r3, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 8003402:	4810      	ldr	r0, [pc, #64]	; (8003444 <_factory_init+0x44>)
 8003404:	f7ff fed4 	bl	80031b0 <chMtxObjectInit>
#else
  chSemObjectInit(&ch_factory.sem, (cnt_t)1);
#endif

#if CH_CFG_FACTORY_OBJECTS_REGISTRY == TRUE
  dyn_list_init(&ch_factory.obj_list);
 8003408:	480f      	ldr	r0, [pc, #60]	; (8003448 <_factory_init+0x48>)
 800340a:	f7ff fff1 	bl	80033f0 <dyn_list_init>
  chPoolObjectInit(&ch_factory.obj_pool,
 800340e:	4a0f      	ldr	r2, [pc, #60]	; (800344c <_factory_init+0x4c>)
 8003410:	2114      	movs	r1, #20
 8003412:	480f      	ldr	r0, [pc, #60]	; (8003450 <_factory_init+0x50>)
 8003414:	f7ff ffdc 	bl	80033d0 <chPoolObjectInit.lto_priv.0>
                   sizeof (registered_object_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_GENERIC_BUFFERS == TRUE
  dyn_list_init(&ch_factory.buf_list);
 8003418:	480e      	ldr	r0, [pc, #56]	; (8003454 <_factory_init+0x54>)
 800341a:	f7ff ffe9 	bl	80033f0 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_SEMAPHORES == TRUE
  dyn_list_init(&ch_factory.sem_list);
 800341e:	480e      	ldr	r0, [pc, #56]	; (8003458 <_factory_init+0x58>)
 8003420:	f7ff ffe6 	bl	80033f0 <dyn_list_init>
  chPoolObjectInit(&ch_factory.sem_pool,
 8003424:	4a09      	ldr	r2, [pc, #36]	; (800344c <_factory_init+0x4c>)
 8003426:	211c      	movs	r1, #28
 8003428:	480c      	ldr	r0, [pc, #48]	; (800345c <_factory_init+0x5c>)
 800342a:	f7ff ffd1 	bl	80033d0 <chPoolObjectInit.lto_priv.0>
                   sizeof (dyn_semaphore_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_MAILBOXES == TRUE
  dyn_list_init(&ch_factory.mbx_list);
 800342e:	480c      	ldr	r0, [pc, #48]	; (8003460 <_factory_init+0x60>)
 8003430:	f7ff ffde 	bl	80033f0 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_OBJ_FIFOS == TRUE
  dyn_list_init(&ch_factory.fifo_list);
 8003434:	480b      	ldr	r0, [pc, #44]	; (8003464 <_factory_init+0x64>)
 8003436:	f7ff ffdb 	bl	80033f0 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
 800343a:	480b      	ldr	r0, [pc, #44]	; (8003468 <_factory_init+0x68>)
 800343c:	f7ff ffd8 	bl	80033f0 <dyn_list_init>
#endif
}
 8003440:	bd08      	pop	{r3, pc}
 8003442:	bf00      	nop
 8003444:	20000a04 	.word	0x20000a04
 8003448:	20000a14 	.word	0x20000a14
 800344c:	080033b1 	.word	0x080033b1
 8003450:	20000a18 	.word	0x20000a18
 8003454:	20000a28 	.word	0x20000a28
 8003458:	20000a2c 	.word	0x20000a2c
 800345c:	20000a30 	.word	0x20000a30
 8003460:	20000a40 	.word	0x20000a40
 8003464:	20000a44 	.word	0x20000a44
 8003468:	20000a48 	.word	0x20000a48
 800346c:	00000000 	.word	0x00000000

08003470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003470:	b084      	sub	sp, #16
 8003472:	9001      	str	r0, [sp, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003474:	9b01      	ldr	r3, [sp, #4]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	9303      	str	r3, [sp, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <__NVIC_SetPriorityGrouping+0x38>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003482:	9a02      	ldr	r2, [sp, #8]
 8003484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003488:	4013      	ands	r3, r2
 800348a:	9302      	str	r3, [sp, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800348c:	9b03      	ldr	r3, [sp, #12]
 800348e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003490:	9b02      	ldr	r3, [sp, #8]
 8003492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800349c:	9302      	str	r3, [sp, #8]
  SCB->AIRCR =  reg_value;
 800349e:	4a02      	ldr	r2, [pc, #8]	; (80034a8 <__NVIC_SetPriorityGrouping+0x38>)
 80034a0:	9b02      	ldr	r3, [sp, #8]
 80034a2:	60d3      	str	r3, [r2, #12]
}
 80034a4:	b004      	add	sp, #16
 80034a6:	4770      	bx	lr
 80034a8:	e000ed00 	.word	0xe000ed00
 80034ac:	00000000 	.word	0x00000000

080034b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b0:	b082      	sub	sp, #8
 80034b2:	4603      	mov	r3, r0
 80034b4:	9100      	str	r1, [sp, #0]
 80034b6:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ba:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	db0a      	blt.n	80034d8 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c2:	9b00      	ldr	r3, [sp, #0]
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	490b      	ldr	r1, [pc, #44]	; (80034f4 <__NVIC_SetPriority+0x44>)
 80034c8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80034cc:	0112      	lsls	r2, r2, #4
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	440b      	add	r3, r1
 80034d2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80034d6:	e00b      	b.n	80034f0 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d8:	9b00      	ldr	r3, [sp, #0]
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	4906      	ldr	r1, [pc, #24]	; (80034f8 <__NVIC_SetPriority+0x48>)
 80034de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	3b04      	subs	r3, #4
 80034e8:	0112      	lsls	r2, r2, #4
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	440b      	add	r3, r1
 80034ee:	761a      	strb	r2, [r3, #24]
  }
}
 80034f0:	b002      	add	sp, #8
 80034f2:	4770      	bx	lr
 80034f4:	e000e100 	.word	0xe000e100
 80034f8:	e000ed00 	.word	0xe000ed00
 80034fc:	00000000 	.word	0x00000000

08003500 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch and, optionally, for system calls.
 * @note    The SVC vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 8003500:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003502:	f3ef 8309 	mrs	r3, PSP
 8003506:	9300      	str	r3, [sp, #0]
  return(result);
 8003508:	9b00      	ldr	r3, [sp, #0]
/*lint -restore*/
  uint32_t psp = __get_PSP();
 800350a:	9303      	str	r3, [sp, #12]
    /* From privileged mode, it is used for context discarding in the
       preemption code.*/

    /* Unstacking procedure, discarding the current exception context and
       positioning the stack to point to the real one.*/
    psp += sizeof (struct port_extctx);
 800350c:	9b03      	ldr	r3, [sp, #12]
 800350e:	3320      	adds	r3, #32
 8003510:	9303      	str	r3, [sp, #12]
 8003512:	9b03      	ldr	r3, [sp, #12]
 8003514:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003516:	9b01      	ldr	r3, [sp, #4]
 8003518:	f383 8809 	msr	PSP, r3
 800351c:	2300      	movs	r3, #0
 800351e:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003520:	9b02      	ldr	r3, [sp, #8]
 8003522:	f383 8811 	msr	BASEPRI, r3
#endif

    /* Restoring the normal interrupts status.*/
    port_unlock_from_isr();
  }
}
 8003526:	b004      	add	sp, #16
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	0000      	movs	r0, r0
	...

08003530 <port_init>:
/*===========================================================================*/

/**
 * @brief   Port-related initialization code.
 */
void port_init(void) {
 8003530:	b500      	push	{lr}
 8003532:	b083      	sub	sp, #12
 8003534:	2320      	movs	r3, #32
 8003536:	9301      	str	r3, [sp, #4]
 8003538:	9b01      	ldr	r3, [sp, #4]
 800353a:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 800353e:	b662      	cpsie	i

  /* Starting in a known IRQ configuration.*/
  port_suspend();

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
 8003540:	2003      	movs	r0, #3
 8003542:	f7ff ff95 	bl	8003470 <__NVIC_SetPriorityGrouping>

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <port_init+0x48>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	4a0b      	ldr	r2, [pc, #44]	; (8003578 <port_init+0x48>)
 800354c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003550:	60d3      	str	r3, [r2, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <port_init+0x4c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a09      	ldr	r2, [pc, #36]	; (800357c <port_init+0x4c>)
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	6013      	str	r3, [r2, #0]

  /* Initialization of the system vectors used by the port.*/
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
 800355e:	2101      	movs	r1, #1
 8003560:	f06f 0004 	mvn.w	r0, #4
 8003564:	f7ff ffa4 	bl	80034b0 <__NVIC_SetPriority>
#endif
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 8003568:	2102      	movs	r1, #2
 800356a:	f06f 0001 	mvn.w	r0, #1
 800356e:	f7ff ff9f 	bl	80034b0 <__NVIC_SetPriority>

#if PORT_USE_SYSCALL == TRUE
  /* MPU is enabled.*/
  mpuEnable(MPU_CTRL_PRIVDEFENA);
#endif
}
 8003572:	b003      	add	sp, #12
 8003574:	f85d fb04 	ldr.w	pc, [sp], #4
 8003578:	e000edf0 	.word	0xe000edf0
 800357c:	e0001000 	.word	0xe0001000

08003580 <_port_irq_epilogue>:
#endif

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8003580:	b500      	push	{lr}
 8003582:	b087      	sub	sp, #28
 8003584:	2320      	movs	r3, #32
 8003586:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003588:	9b03      	ldr	r3, [sp, #12]
 800358a:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800358e:	4b17      	ldr	r3, [pc, #92]	; (80035ec <_port_irq_epilogue+0x6c>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003596:	2b00      	cmp	r3, #0
 8003598:	d01f      	beq.n	80035da <_port_irq_epilogue+0x5a>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800359a:	f3ef 8309 	mrs	r3, PSP
 800359e:	9301      	str	r3, [sp, #4]
  return(result);
 80035a0:	9b01      	ldr	r3, [sp, #4]
        lctxp->control = control;
        lctxp->ectxp   = (struct port_extctx *)psp;
      }
    }
#else
    s_psp = __get_PSP();
 80035a2:	9305      	str	r3, [sp, #20]
#endif

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    s_psp -= sizeof (struct port_extctx);
 80035a4:	9b05      	ldr	r3, [sp, #20]
 80035a6:	3b20      	subs	r3, #32
 80035a8:	9305      	str	r3, [sp, #20]

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)s_psp;
 80035aa:	9b05      	ldr	r3, [sp, #20]
 80035ac:	9304      	str	r3, [sp, #16]

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 80035ae:	9b04      	ldr	r3, [sp, #16]
 80035b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035b4:	61da      	str	r2, [r3, #28]
 80035b6:	9b05      	ldr	r3, [sp, #20]
 80035b8:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80035ba:	9b02      	ldr	r3, [sp, #8]
 80035bc:	f383 8809 	msr	PSP, r3
    /* Writing back the modified S-PSP value.*/
    __set_PSP(s_psp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80035c0:	f7ff fb06 	bl	8002bd0 <chSchIsPreemptionRequired>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <_port_irq_epilogue+0x52>
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 80035ca:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <_port_irq_epilogue+0x70>)
 80035cc:	9b04      	ldr	r3, [sp, #16]
 80035ce:	619a      	str	r2, [r3, #24]
      ectxp->pc = (uint32_t)_port_exit_from_isr;
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
 80035d0:	e008      	b.n	80035e4 <_port_irq_epilogue+0x64>
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 80035d2:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <_port_irq_epilogue+0x74>)
 80035d4:	9b04      	ldr	r3, [sp, #16]
 80035d6:	619a      	str	r2, [r3, #24]
 80035d8:	e004      	b.n	80035e4 <_port_irq_epilogue+0x64>
 80035da:	2300      	movs	r3, #0
 80035dc:	9300      	str	r3, [sp, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80035de:	9b00      	ldr	r3, [sp, #0]
 80035e0:	f383 8811 	msr	BASEPRI, r3
  }
  port_unlock_from_isr();
}
 80035e4:	b007      	add	sp, #28
 80035e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80035ea:	bf00      	nop
 80035ec:	e000ed00 	.word	0xe000ed00
 80035f0:	080002a3 	.word	0x080002a3
 80035f4:	080002a6 	.word	0x080002a6
	...

08003600 <crc16>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

uint16_t crc16(uint16_t crc, const uint8_t *data, size_t n) {
 8003600:	b084      	sub	sp, #16
 8003602:	4603      	mov	r3, r0
 8003604:	9102      	str	r1, [sp, #8]
 8003606:	9201      	str	r2, [sp, #4]
 8003608:	f8ad 300e 	strh.w	r3, [sp, #14]
 800360c:	e019      	b.n	8003642 <crc16+0x42>

  while (n > 0U) {
    crc = (crc << 8U) ^ crc16_table[(crc >> 8U) ^ (uint16_t)*data];
 800360e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	b21a      	sxth	r2, r3
 8003616:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800361a:	0a1b      	lsrs	r3, r3, #8
 800361c:	b29b      	uxth	r3, r3
 800361e:	4619      	mov	r1, r3
 8003620:	9b02      	ldr	r3, [sp, #8]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	404b      	eors	r3, r1
 8003626:	490b      	ldr	r1, [pc, #44]	; (8003654 <crc16+0x54>)
 8003628:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800362c:	b21b      	sxth	r3, r3
 800362e:	4053      	eors	r3, r2
 8003630:	b21b      	sxth	r3, r3
 8003632:	f8ad 300e 	strh.w	r3, [sp, #14]
    data++;
 8003636:	9b02      	ldr	r3, [sp, #8]
 8003638:	3301      	adds	r3, #1
 800363a:	9302      	str	r3, [sp, #8]
    n--;
 800363c:	9b01      	ldr	r3, [sp, #4]
 800363e:	3b01      	subs	r3, #1
 8003640:	9301      	str	r3, [sp, #4]
  while (n > 0U) {
 8003642:	9b01      	ldr	r3, [sp, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e2      	bne.n	800360e <crc16+0xe>
  }

  return crc;
 8003648:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
 800364c:	4618      	mov	r0, r3
 800364e:	b004      	add	sp, #16
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	080087d0 	.word	0x080087d0
	...

08003660 <mfs_state_reset>:

static void mfs_state_reset(MFSDriver *mfsp) {
 8003660:	b084      	sub	sp, #16
 8003662:	9001      	str	r0, [sp, #4]
  unsigned i;

  mfsp->current_bank    = MFS_BANK_0;
 8003664:	9b01      	ldr	r3, [sp, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	721a      	strb	r2, [r3, #8]
  mfsp->current_counter = 0U;
 800366a:	9b01      	ldr	r3, [sp, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	60da      	str	r2, [r3, #12]
  mfsp->next_offset     = 0U;
 8003670:	9b01      	ldr	r3, [sp, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	611a      	str	r2, [r3, #16]
  mfsp->used_space      = 0U;
 8003676:	9b01      	ldr	r3, [sp, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	615a      	str	r2, [r3, #20]

  for (i = 0; i < MFS_CFG_MAX_RECORDS; i++) {
 800367c:	2300      	movs	r3, #0
 800367e:	9303      	str	r3, [sp, #12]
 8003680:	e00f      	b.n	80036a2 <mfs_state_reset+0x42>
    mfsp->descriptors[i].offset = 0U;
 8003682:	9b01      	ldr	r3, [sp, #4]
 8003684:	9a03      	ldr	r2, [sp, #12]
 8003686:	3203      	adds	r2, #3
 8003688:	2100      	movs	r1, #0
 800368a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    mfsp->descriptors[i].size   = 0U;
 800368e:	9a01      	ldr	r2, [sp, #4]
 8003690:	9b03      	ldr	r3, [sp, #12]
 8003692:	3303      	adds	r3, #3
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	2200      	movs	r2, #0
 800369a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < MFS_CFG_MAX_RECORDS; i++) {
 800369c:	9b03      	ldr	r3, [sp, #12]
 800369e:	3301      	adds	r3, #1
 80036a0:	9303      	str	r3, [sp, #12]
 80036a2:	9b03      	ldr	r3, [sp, #12]
 80036a4:	2b1f      	cmp	r3, #31
 80036a6:	d9ec      	bls.n	8003682 <mfs_state_reset+0x22>
  }
}
 80036a8:	b004      	add	sp, #16
 80036aa:	4770      	bx	lr
 80036ac:	0000      	movs	r0, r0
	...

080036b0 <mfs_flash_get_bank_offset>:

static flash_offset_t mfs_flash_get_bank_offset(MFSDriver *mfsp,
                                                mfs_bank_t bank) {
 80036b0:	b500      	push	{lr}
 80036b2:	b083      	sub	sp, #12
 80036b4:	9001      	str	r0, [sp, #4]
 80036b6:	460b      	mov	r3, r1
 80036b8:	f88d 3003 	strb.w	r3, [sp, #3]

  return bank == MFS_BANK_0 ? flashGetSectorOffset(mfsp->config->flashp,
                                                   mfsp->config->bank0_start) :
 80036bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10b      	bne.n	80036dc <mfs_flash_get_bank_offset+0x2c>
  return bank == MFS_BANK_0 ? flashGetSectorOffset(mfsp->config->flashp,
 80036c4:	9b01      	ldr	r3, [sp, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
                                                   mfsp->config->bank0_start) :
 80036ca:	9b01      	ldr	r3, [sp, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
  return bank == MFS_BANK_0 ? flashGetSectorOffset(mfsp->config->flashp,
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4619      	mov	r1, r3
 80036d2:	4610      	mov	r0, r2
 80036d4:	f7fd fc4c 	bl	8000f70 <flashGetSectorOffset>
 80036d8:	4603      	mov	r3, r0
 80036da:	e00a      	b.n	80036f2 <mfs_flash_get_bank_offset+0x42>
                              flashGetSectorOffset(mfsp->config->flashp,
 80036dc:	9b01      	ldr	r3, [sp, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	681a      	ldr	r2, [r3, #0]
                                                   mfsp->config->bank1_start);
 80036e2:	9b01      	ldr	r3, [sp, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
                              flashGetSectorOffset(mfsp->config->flashp,
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	4619      	mov	r1, r3
 80036ea:	4610      	mov	r0, r2
 80036ec:	f7fd fc40 	bl	8000f70 <flashGetSectorOffset>
 80036f0:	4603      	mov	r3, r0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	b003      	add	sp, #12
 80036f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80036fa:	bf00      	nop
 80036fc:	0000      	movs	r0, r0
	...

08003700 <mfs_flash_read>:
 * @return              The operation status.
 *
 * @notapi
 */
static mfs_error_t mfs_flash_read(MFSDriver *mfsp, flash_offset_t offset,
                                  size_t n, uint8_t *rp) {
 8003700:	b510      	push	{r4, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	9003      	str	r0, [sp, #12]
 8003706:	9102      	str	r1, [sp, #8]
 8003708:	9201      	str	r2, [sp, #4]
 800370a:	9300      	str	r3, [sp, #0]
  flash_error_t ferr;

  ferr = flashRead(mfsp->config->flashp, offset, n, rp);
 800370c:	9b03      	ldr	r3, [sp, #12]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689c      	ldr	r4, [r3, #8]
 8003716:	9b03      	ldr	r3, [sp, #12]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	9b00      	ldr	r3, [sp, #0]
 800371e:	9a01      	ldr	r2, [sp, #4]
 8003720:	9902      	ldr	r1, [sp, #8]
 8003722:	47a0      	blx	r4
 8003724:	4603      	mov	r3, r0
 8003726:	f88d 3017 	strb.w	r3, [sp, #23]
  if (ferr != FLASH_NO_ERROR) {
 800372a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <mfs_flash_read+0x3e>
    mfsp->state = MFS_ERROR;
 8003732:	9b03      	ldr	r3, [sp, #12]
 8003734:	2204      	movs	r2, #4
 8003736:	701a      	strb	r2, [r3, #0]
    return MFS_ERR_FLASH_FAILURE;
 8003738:	f06f 0307 	mvn.w	r3, #7
 800373c:	e000      	b.n	8003740 <mfs_flash_read+0x40>
  }

  return MFS_NO_ERROR;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	b006      	add	sp, #24
 8003744:	bd10      	pop	{r4, pc}
 8003746:	bf00      	nop
	...

08003750 <mfs_flash_write>:
 * @notapi
 */
static mfs_error_t mfs_flash_write(MFSDriver *mfsp,
                                   flash_offset_t offset,
                                   size_t n,
                                   const uint8_t *wp) {
 8003750:	b510      	push	{r4, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	9003      	str	r0, [sp, #12]
 8003756:	9102      	str	r1, [sp, #8]
 8003758:	9201      	str	r2, [sp, #4]
 800375a:	9300      	str	r3, [sp, #0]
  flash_error_t ferr;

  ferr = flashProgram(mfsp->config->flashp, offset, n, wp);
 800375c:	9b03      	ldr	r3, [sp, #12]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68dc      	ldr	r4, [r3, #12]
 8003766:	9b03      	ldr	r3, [sp, #12]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	9b00      	ldr	r3, [sp, #0]
 800376e:	9a01      	ldr	r2, [sp, #4]
 8003770:	9902      	ldr	r1, [sp, #8]
 8003772:	47a0      	blx	r4
 8003774:	4603      	mov	r3, r0
 8003776:	f88d 301f 	strb.w	r3, [sp, #31]
  if (ferr != FLASH_NO_ERROR) {
 800377a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d039      	beq.n	80037f6 <mfs_flash_write+0xa6>
    mfsp->state = MFS_ERROR;
 8003782:	9b03      	ldr	r3, [sp, #12]
 8003784:	2204      	movs	r2, #4
 8003786:	701a      	strb	r2, [r3, #0]
    return MFS_ERR_FLASH_FAILURE;
 8003788:	f06f 0307 	mvn.w	r3, #7
 800378c:	e037      	b.n	80037fe <mfs_flash_write+0xae>
  }

#if MFS_CFG_WRITE_VERIFY == TRUE
  /* Verifying the written data by reading it back and comparing.*/
  while (n > 0U) {
    size_t chunk = n <= MFS_CFG_BUFFER_SIZE ? n : MFS_CFG_BUFFER_SIZE;
 800378e:	9b01      	ldr	r3, [sp, #4]
 8003790:	2b20      	cmp	r3, #32
 8003792:	bf28      	it	cs
 8003794:	2320      	movcs	r3, #32
 8003796:	9306      	str	r3, [sp, #24]

    RET_ON_ERROR(mfs_flash_read(mfsp, offset, chunk, mfsp->buffer.data8));
 8003798:	9b03      	ldr	r3, [sp, #12]
 800379a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800379e:	9a06      	ldr	r2, [sp, #24]
 80037a0:	9902      	ldr	r1, [sp, #8]
 80037a2:	9803      	ldr	r0, [sp, #12]
 80037a4:	f7ff ffac 	bl	8003700 <mfs_flash_read>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f88d 3017 	strb.w	r3, [sp, #23]
 80037ae:	f99d 3017 	ldrsb.w	r3, [sp, #23]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <mfs_flash_write+0x6c>
 80037b6:	f99d 3017 	ldrsb.w	r3, [sp, #23]
 80037ba:	e020      	b.n	80037fe <mfs_flash_write+0xae>

    if (memcmp((void *)mfsp->buffer.data8, (void *)wp, chunk)) {
 80037bc:	9b03      	ldr	r3, [sp, #12]
 80037be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80037c2:	9a06      	ldr	r2, [sp, #24]
 80037c4:	9900      	ldr	r1, [sp, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f004 f8bc 	bl	8007944 <memcmp>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <mfs_flash_write+0x8e>
      mfsp->state = MFS_ERROR;
 80037d2:	9b03      	ldr	r3, [sp, #12]
 80037d4:	2204      	movs	r2, #4
 80037d6:	701a      	strb	r2, [r3, #0]
      return MFS_ERR_FLASH_FAILURE;
 80037d8:	f06f 0307 	mvn.w	r3, #7
 80037dc:	e00f      	b.n	80037fe <mfs_flash_write+0xae>
    }
    n -= chunk;
 80037de:	9a01      	ldr	r2, [sp, #4]
 80037e0:	9b06      	ldr	r3, [sp, #24]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	9301      	str	r3, [sp, #4]
    offset += (flash_offset_t)chunk;
 80037e6:	9a02      	ldr	r2, [sp, #8]
 80037e8:	9b06      	ldr	r3, [sp, #24]
 80037ea:	4413      	add	r3, r2
 80037ec:	9302      	str	r3, [sp, #8]
    wp += chunk;
 80037ee:	9a00      	ldr	r2, [sp, #0]
 80037f0:	9b06      	ldr	r3, [sp, #24]
 80037f2:	4413      	add	r3, r2
 80037f4:	9300      	str	r3, [sp, #0]
  while (n > 0U) {
 80037f6:	9b01      	ldr	r3, [sp, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1c8      	bne.n	800378e <mfs_flash_write+0x3e>
  }
#endif

  return MFS_NO_ERROR;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	b008      	add	sp, #32
 8003802:	bd10      	pop	{r4, pc}
	...

08003810 <mfs_flash_copy>:
 * @notapi
 */
static mfs_error_t mfs_flash_copy(MFSDriver *mfsp,
                                  flash_offset_t doffset,
                                  flash_offset_t soffset,
                                  uint32_t n) {
 8003810:	b500      	push	{lr}
 8003812:	b087      	sub	sp, #28
 8003814:	9003      	str	r0, [sp, #12]
 8003816:	9102      	str	r1, [sp, #8]
 8003818:	9201      	str	r2, [sp, #4]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	e03c      	b.n	8003898 <mfs_flash_copy+0x88>

  /* Splitting the operation in smaller operations because the buffer is
     small.*/
  while (n > 0U) {
    /* Data size that can be written in a single program page operation.*/
    size_t chunk = (size_t)(((doffset | (MFS_CFG_BUFFER_SIZE - 1U)) + 1U) -
 800381e:	9b02      	ldr	r3, [sp, #8]
 8003820:	f043 021f 	orr.w	r2, r3, #31
 8003824:	9b02      	ldr	r3, [sp, #8]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	3301      	adds	r3, #1
 800382a:	9305      	str	r3, [sp, #20]
                            doffset);
    if (chunk > n) {
 800382c:	9a05      	ldr	r2, [sp, #20]
 800382e:	9b00      	ldr	r3, [sp, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d901      	bls.n	8003838 <mfs_flash_copy+0x28>
      chunk = n;
 8003834:	9b00      	ldr	r3, [sp, #0]
 8003836:	9305      	str	r3, [sp, #20]
    }

    RET_ON_ERROR(mfs_flash_read(mfsp, soffset, chunk, mfsp->buffer.data8));
 8003838:	9b03      	ldr	r3, [sp, #12]
 800383a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800383e:	9a05      	ldr	r2, [sp, #20]
 8003840:	9901      	ldr	r1, [sp, #4]
 8003842:	9803      	ldr	r0, [sp, #12]
 8003844:	f7ff ff5c 	bl	8003700 <mfs_flash_read>
 8003848:	4603      	mov	r3, r0
 800384a:	f88d 3013 	strb.w	r3, [sp, #19]
 800384e:	f99d 3013 	ldrsb.w	r3, [sp, #19]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <mfs_flash_copy+0x4c>
 8003856:	f99d 3013 	ldrsb.w	r3, [sp, #19]
 800385a:	e021      	b.n	80038a0 <mfs_flash_copy+0x90>
    RET_ON_ERROR(mfs_flash_write(mfsp, doffset, chunk, mfsp->buffer.data8));
 800385c:	9b03      	ldr	r3, [sp, #12]
 800385e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003862:	9a05      	ldr	r2, [sp, #20]
 8003864:	9902      	ldr	r1, [sp, #8]
 8003866:	9803      	ldr	r0, [sp, #12]
 8003868:	f7ff ff72 	bl	8003750 <mfs_flash_write>
 800386c:	4603      	mov	r3, r0
 800386e:	f88d 3012 	strb.w	r3, [sp, #18]
 8003872:	f99d 3012 	ldrsb.w	r3, [sp, #18]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <mfs_flash_copy+0x70>
 800387a:	f99d 3012 	ldrsb.w	r3, [sp, #18]
 800387e:	e00f      	b.n	80038a0 <mfs_flash_copy+0x90>

    /* Next page.*/
    soffset += chunk;
 8003880:	9a01      	ldr	r2, [sp, #4]
 8003882:	9b05      	ldr	r3, [sp, #20]
 8003884:	4413      	add	r3, r2
 8003886:	9301      	str	r3, [sp, #4]
    doffset += chunk;
 8003888:	9a02      	ldr	r2, [sp, #8]
 800388a:	9b05      	ldr	r3, [sp, #20]
 800388c:	4413      	add	r3, r2
 800388e:	9302      	str	r3, [sp, #8]
    n       -= chunk;
 8003890:	9a00      	ldr	r2, [sp, #0]
 8003892:	9b05      	ldr	r3, [sp, #20]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	9300      	str	r3, [sp, #0]
  while (n > 0U) {
 8003898:	9b00      	ldr	r3, [sp, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1bf      	bne.n	800381e <mfs_flash_copy+0xe>
  }

  return MFS_NO_ERROR;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	b007      	add	sp, #28
 80038a4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080038b0 <mfs_bank_erase>:
 * @param[in] bank      bank to be erased
 * @return              The operation status.
 *
 * @notapi
 */
static mfs_error_t mfs_bank_erase(MFSDriver *mfsp, mfs_bank_t bank) {
 80038b0:	b500      	push	{lr}
 80038b2:	b087      	sub	sp, #28
 80038b4:	9001      	str	r0, [sp, #4]
 80038b6:	460b      	mov	r3, r1
 80038b8:	f88d 3003 	strb.w	r3, [sp, #3]
  flash_sector_t sector, end;

  if (bank == MFS_BANK_0) {
 80038bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10c      	bne.n	80038de <mfs_bank_erase+0x2e>
    sector = mfsp->config->bank0_start;
 80038c4:	9b01      	ldr	r3, [sp, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	9305      	str	r3, [sp, #20]
    end    = mfsp->config->bank0_start + mfsp->config->bank0_sectors;
 80038cc:	9b01      	ldr	r3, [sp, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	9b01      	ldr	r3, [sp, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	4413      	add	r3, r2
 80038da:	9304      	str	r3, [sp, #16]
 80038dc:	e052      	b.n	8003984 <mfs_bank_erase+0xd4>
  }
  else {
    sector = mfsp->config->bank1_start;
 80038de:	9b01      	ldr	r3, [sp, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	9305      	str	r3, [sp, #20]
    end    = mfsp->config->bank1_start + mfsp->config->bank1_sectors;
 80038e6:	9b01      	ldr	r3, [sp, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	9b01      	ldr	r3, [sp, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	4413      	add	r3, r2
 80038f4:	9304      	str	r3, [sp, #16]
 80038f6:	e045      	b.n	8003984 <mfs_bank_erase+0xd4>
  }

  while (sector < end) {
    flash_error_t ferr;

    ferr = flashStartEraseSector(mfsp->config->flashp, sector);
 80038f8:	9b01      	ldr	r3, [sp, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	9a01      	ldr	r2, [sp, #4]
 8003904:	6852      	ldr	r2, [r2, #4]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	9905      	ldr	r1, [sp, #20]
 800390a:	4610      	mov	r0, r2
 800390c:	4798      	blx	r3
 800390e:	4603      	mov	r3, r0
 8003910:	f88d 300f 	strb.w	r3, [sp, #15]
    if (ferr != FLASH_NO_ERROR) {
 8003914:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <mfs_bank_erase+0x78>
      mfsp->state = MFS_ERROR;
 800391c:	9b01      	ldr	r3, [sp, #4]
 800391e:	2204      	movs	r2, #4
 8003920:	701a      	strb	r2, [r3, #0]
      return MFS_ERR_FLASH_FAILURE;
 8003922:	f06f 0307 	mvn.w	r3, #7
 8003926:	e032      	b.n	800398e <mfs_bank_erase+0xde>
    }
    ferr = flashWaitErase(mfsp->config->flashp);
 8003928:	9b01      	ldr	r3, [sp, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd fab6 	bl	8000ea0 <flashWaitErase>
 8003934:	4603      	mov	r3, r0
 8003936:	f88d 300f 	strb.w	r3, [sp, #15]
    if (ferr != FLASH_NO_ERROR) {
 800393a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <mfs_bank_erase+0x9e>
      mfsp->state = MFS_ERROR;
 8003942:	9b01      	ldr	r3, [sp, #4]
 8003944:	2204      	movs	r2, #4
 8003946:	701a      	strb	r2, [r3, #0]
      return MFS_ERR_FLASH_FAILURE;
 8003948:	f06f 0307 	mvn.w	r3, #7
 800394c:	e01f      	b.n	800398e <mfs_bank_erase+0xde>
    }
    ferr = flashVerifyErase(mfsp->config->flashp, sector);
 800394e:	9b01      	ldr	r3, [sp, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	9a01      	ldr	r2, [sp, #4]
 800395a:	6852      	ldr	r2, [r2, #4]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	9905      	ldr	r1, [sp, #20]
 8003960:	4610      	mov	r0, r2
 8003962:	4798      	blx	r3
 8003964:	4603      	mov	r3, r0
 8003966:	f88d 300f 	strb.w	r3, [sp, #15]
    if (ferr != FLASH_NO_ERROR) {
 800396a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <mfs_bank_erase+0xce>
      mfsp->state = MFS_ERROR;
 8003972:	9b01      	ldr	r3, [sp, #4]
 8003974:	2204      	movs	r2, #4
 8003976:	701a      	strb	r2, [r3, #0]
      return MFS_ERR_FLASH_FAILURE;
 8003978:	f06f 0307 	mvn.w	r3, #7
 800397c:	e007      	b.n	800398e <mfs_bank_erase+0xde>
    }

    sector++;
 800397e:	9b05      	ldr	r3, [sp, #20]
 8003980:	3301      	adds	r3, #1
 8003982:	9305      	str	r3, [sp, #20]
  while (sector < end) {
 8003984:	9a05      	ldr	r2, [sp, #20]
 8003986:	9b04      	ldr	r3, [sp, #16]
 8003988:	429a      	cmp	r2, r3
 800398a:	d3b5      	bcc.n	80038f8 <mfs_bank_erase+0x48>
  }

  return MFS_NO_ERROR;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	b007      	add	sp, #28
 8003992:	f85d fb04 	ldr.w	pc, [sp], #4
 8003996:	bf00      	nop
	...

080039a0 <mfs_bank_verify_erase>:
 * @param[in] bank      bank to be verified
 * @return              The operation status.
 *
 * @notapi
 */
static mfs_error_t mfs_bank_verify_erase(MFSDriver *mfsp, mfs_bank_t bank) {
 80039a0:	b500      	push	{lr}
 80039a2:	b087      	sub	sp, #28
 80039a4:	9001      	str	r0, [sp, #4]
 80039a6:	460b      	mov	r3, r1
 80039a8:	f88d 3003 	strb.w	r3, [sp, #3]
  flash_sector_t sector, end;

  if (bank == MFS_BANK_0) {
 80039ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10c      	bne.n	80039ce <mfs_bank_verify_erase+0x2e>
    sector = mfsp->config->bank0_start;
 80039b4:	9b01      	ldr	r3, [sp, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	9305      	str	r3, [sp, #20]
    end    = mfsp->config->bank0_start + mfsp->config->bank0_sectors;
 80039bc:	9b01      	ldr	r3, [sp, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	9b01      	ldr	r3, [sp, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	4413      	add	r3, r2
 80039ca:	9304      	str	r3, [sp, #16]
 80039cc:	e02e      	b.n	8003a2c <mfs_bank_verify_erase+0x8c>
  }
  else {
    sector = mfsp->config->bank1_start;
 80039ce:	9b01      	ldr	r3, [sp, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	9305      	str	r3, [sp, #20]
    end    = mfsp->config->bank1_start + mfsp->config->bank1_sectors;
 80039d6:	9b01      	ldr	r3, [sp, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	695a      	ldr	r2, [r3, #20]
 80039dc:	9b01      	ldr	r3, [sp, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	4413      	add	r3, r2
 80039e4:	9304      	str	r3, [sp, #16]
 80039e6:	e021      	b.n	8003a2c <mfs_bank_verify_erase+0x8c>
  }

  while (sector < end) {
    flash_error_t ferr;

    ferr = flashVerifyErase(mfsp->config->flashp, sector);
 80039e8:	9b01      	ldr	r3, [sp, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	9a01      	ldr	r2, [sp, #4]
 80039f4:	6852      	ldr	r2, [r2, #4]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	9905      	ldr	r1, [sp, #20]
 80039fa:	4610      	mov	r0, r2
 80039fc:	4798      	blx	r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	f88d 300f 	strb.w	r3, [sp, #15]
    if (ferr == FLASH_ERROR_VERIFY) {
 8003a04:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003a08:	2b05      	cmp	r3, #5
 8003a0a:	d102      	bne.n	8003a12 <mfs_bank_verify_erase+0x72>
      return MFS_ERR_NOT_ERASED;
 8003a0c:	f06f 0306 	mvn.w	r3, #6
 8003a10:	e011      	b.n	8003a36 <mfs_bank_verify_erase+0x96>
    }
    if (ferr != FLASH_NO_ERROR) {
 8003a12:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <mfs_bank_verify_erase+0x86>
      mfsp->state = MFS_ERROR;
 8003a1a:	9b01      	ldr	r3, [sp, #4]
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	701a      	strb	r2, [r3, #0]
      return MFS_ERR_FLASH_FAILURE;
 8003a20:	f06f 0307 	mvn.w	r3, #7
 8003a24:	e007      	b.n	8003a36 <mfs_bank_verify_erase+0x96>
    }

    sector++;
 8003a26:	9b05      	ldr	r3, [sp, #20]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	9305      	str	r3, [sp, #20]
  while (sector < end) {
 8003a2c:	9a05      	ldr	r2, [sp, #20]
 8003a2e:	9b04      	ldr	r3, [sp, #16]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d3d9      	bcc.n	80039e8 <mfs_bank_verify_erase+0x48>
  }

  return MFS_NO_ERROR;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	b007      	add	sp, #28
 8003a3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a3e:	bf00      	nop

08003a40 <mfs_bank_write_header>:
 *
 * @notapi
 */
static mfs_error_t mfs_bank_write_header(MFSDriver *mfsp,
                                         mfs_bank_t bank,
                                         uint32_t cnt) {
 8003a40:	b500      	push	{lr}
 8003a42:	b08b      	sub	sp, #44	; 0x2c
 8003a44:	9003      	str	r0, [sp, #12]
 8003a46:	460b      	mov	r3, r1
 8003a48:	9201      	str	r2, [sp, #4]
 8003a4a:	f88d 300b 	strb.w	r3, [sp, #11]
  flash_sector_t sector;
  mfs_bank_header_t bhdr;

  if (bank == MFS_BANK_0) {
 8003a4e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d104      	bne.n	8003a60 <mfs_bank_write_header+0x20>
    sector = mfsp->config->bank0_start;
 8003a56:	9b03      	ldr	r3, [sp, #12]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a5e:	e003      	b.n	8003a68 <mfs_bank_write_header+0x28>
  }
  else {
    sector = mfsp->config->bank1_start;
 8003a60:	9b03      	ldr	r3, [sp, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	9309      	str	r3, [sp, #36]	; 0x24
  }

  bhdr.fields.magic1    = MFS_BANK_MAGIC_1;
 8003a68:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <mfs_bank_write_header+0x78>)
 8003a6a:	9305      	str	r3, [sp, #20]
  bhdr.fields.magic2    = MFS_BANK_MAGIC_2;
 8003a6c:	4b13      	ldr	r3, [pc, #76]	; (8003abc <mfs_bank_write_header+0x7c>)
 8003a6e:	9306      	str	r3, [sp, #24]
  bhdr.fields.counter   = cnt;
 8003a70:	9b01      	ldr	r3, [sp, #4]
 8003a72:	9307      	str	r3, [sp, #28]
  bhdr.fields.reserved1 = (uint16_t)mfsp->config->erased;
 8003a74:	9b03      	ldr	r3, [sp, #12]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	f8ad 3020 	strh.w	r3, [sp, #32]
  bhdr.fields.crc       = crc16(0xFFFFU, bhdr.hdr8,
 8003a80:	ab05      	add	r3, sp, #20
 8003a82:	220e      	movs	r2, #14
 8003a84:	4619      	mov	r1, r3
 8003a86:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003a8a:	f7ff fdb9 	bl	8003600 <crc16>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
                                sizeof (mfs_bank_header_t) - sizeof (uint16_t));

  return mfs_flash_write(mfsp,
                         flashGetSectorOffset(mfsp->config->flashp, sector),
 8003a94:	9b03      	ldr	r3, [sp, #12]
 8003a96:	685b      	ldr	r3, [r3, #4]
  return mfs_flash_write(mfsp,
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fd fa67 	bl	8000f70 <flashGetSectorOffset>
 8003aa2:	4601      	mov	r1, r0
 8003aa4:	ab05      	add	r3, sp, #20
 8003aa6:	2210      	movs	r2, #16
 8003aa8:	9803      	ldr	r0, [sp, #12]
 8003aaa:	f7ff fe51 	bl	8003750 <mfs_flash_write>
 8003aae:	4603      	mov	r3, r0
                         sizeof (mfs_bank_header_t),
                         bhdr.hdr8);
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	b00b      	add	sp, #44	; 0x2c
 8003ab4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ab8:	ec705ade 	.word	0xec705ade
 8003abc:	f0339cc5 	.word	0xf0339cc5

08003ac0 <mfs_bank_check_header>:
 * @param[in] mfsp      pointer to the @p MFSDriver object
 * @return              The header state.
 *
 * @notapi
 */
static mfs_bank_state_t mfs_bank_check_header(MFSDriver *mfsp) {
 8003ac0:	b500      	push	{lr}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	9001      	str	r0, [sp, #4]
  uint16_t crc;

  if ((mfsp->buffer.bhdr.hdr32[0] == mfsp->config->erased) &&
 8003ac6:	9b01      	ldr	r3, [sp, #4]
 8003ac8:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 8003acc:	9b01      	ldr	r3, [sp, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d119      	bne.n	8003b0a <mfs_bank_check_header+0x4a>
      (mfsp->buffer.bhdr.hdr32[1] == mfsp->config->erased) &&
 8003ad6:	9b01      	ldr	r3, [sp, #4]
 8003ad8:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 8003adc:	9b01      	ldr	r3, [sp, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
  if ((mfsp->buffer.bhdr.hdr32[0] == mfsp->config->erased) &&
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d111      	bne.n	8003b0a <mfs_bank_check_header+0x4a>
      (mfsp->buffer.bhdr.hdr32[2] == mfsp->config->erased) &&
 8003ae6:	9b01      	ldr	r3, [sp, #4]
 8003ae8:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8003aec:	9b01      	ldr	r3, [sp, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
      (mfsp->buffer.bhdr.hdr32[1] == mfsp->config->erased) &&
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d109      	bne.n	8003b0a <mfs_bank_check_header+0x4a>
      (mfsp->buffer.bhdr.hdr32[3] == mfsp->config->erased)) {
 8003af6:	9b01      	ldr	r3, [sp, #4]
 8003af8:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8003afc:	9b01      	ldr	r3, [sp, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
      (mfsp->buffer.bhdr.hdr32[2] == mfsp->config->erased) &&
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d101      	bne.n	8003b0a <mfs_bank_check_header+0x4a>
    return MFS_BANK_ERASED;
 8003b06:	2300      	movs	r3, #0
 8003b08:	e034      	b.n	8003b74 <mfs_bank_check_header+0xb4>
  }

  /* Checking header fields integrity.*/
  if ((mfsp->buffer.bhdr.fields.magic1 != MFS_BANK_MAGIC_1) ||
 8003b0a:	9b01      	ldr	r3, [sp, #4]
 8003b0c:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8003b10:	4a1a      	ldr	r2, [pc, #104]	; (8003b7c <mfs_bank_check_header+0xbc>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d116      	bne.n	8003b44 <mfs_bank_check_header+0x84>
      (mfsp->buffer.bhdr.fields.magic2 != MFS_BANK_MAGIC_2) ||
 8003b16:	9b01      	ldr	r3, [sp, #4]
 8003b18:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
  if ((mfsp->buffer.bhdr.fields.magic1 != MFS_BANK_MAGIC_1) ||
 8003b1c:	4a18      	ldr	r2, [pc, #96]	; (8003b80 <mfs_bank_check_header+0xc0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d110      	bne.n	8003b44 <mfs_bank_check_header+0x84>
      (mfsp->buffer.bhdr.fields.counter == mfsp->config->erased) ||
 8003b22:	9b01      	ldr	r3, [sp, #4]
 8003b24:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8003b28:	9b01      	ldr	r3, [sp, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
      (mfsp->buffer.bhdr.fields.magic2 != MFS_BANK_MAGIC_2) ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d008      	beq.n	8003b44 <mfs_bank_check_header+0x84>
      (mfsp->buffer.bhdr.fields.reserved1 != (uint16_t)mfsp->config->erased)) {
 8003b32:	9b01      	ldr	r3, [sp, #4]
 8003b34:	f8b3 21f0 	ldrh.w	r2, [r3, #496]	; 0x1f0
 8003b38:	9b01      	ldr	r3, [sp, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	b29b      	uxth	r3, r3
      (mfsp->buffer.bhdr.fields.counter == mfsp->config->erased) ||
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <mfs_bank_check_header+0x88>
    return MFS_BANK_GARBAGE;
 8003b44:	2302      	movs	r3, #2
 8003b46:	e015      	b.n	8003b74 <mfs_bank_check_header+0xb4>
  }

  /* Verifying header CRC.*/
  crc = crc16(0xFFFFU, mfsp->buffer.bhdr.hdr8,
 8003b48:	9b01      	ldr	r3, [sp, #4]
 8003b4a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003b4e:	220e      	movs	r2, #14
 8003b50:	4619      	mov	r1, r3
 8003b52:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003b56:	f7ff fd53 	bl	8003600 <crc16>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f8ad 300e 	strh.w	r3, [sp, #14]
              sizeof (mfs_bank_header_t) - sizeof (uint16_t));
  if (crc != mfsp->buffer.bhdr.fields.crc) {
 8003b60:	9b01      	ldr	r3, [sp, #4]
 8003b62:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	; 0x1f2
 8003b66:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d001      	beq.n	8003b72 <mfs_bank_check_header+0xb2>
    return MFS_BANK_GARBAGE;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e000      	b.n	8003b74 <mfs_bank_check_header+0xb4>
  }

  return MFS_BANK_OK;
 8003b72:	2301      	movs	r3, #1
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	b005      	add	sp, #20
 8003b78:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b7c:	ec705ade 	.word	0xec705ade
 8003b80:	f0339cc5 	.word	0xf0339cc5
	...

08003b90 <mfs_bank_scan_records>:
 *
 * @notapi
 */
static mfs_error_t mfs_bank_scan_records(MFSDriver *mfsp,
                                         mfs_bank_t bank,
                                         bool *wflagp) {
 8003b90:	b500      	push	{lr}
 8003b92:	b093      	sub	sp, #76	; 0x4c
 8003b94:	9003      	str	r0, [sp, #12]
 8003b96:	460b      	mov	r3, r1
 8003b98:	9201      	str	r2, [sp, #4]
 8003b9a:	f88d 300b 	strb.w	r3, [sp, #11]
  flash_offset_t hdr_offset, start_offset, end_offset;

  /* No warning by default.*/
  *wflagp = false;
 8003b9e:	9b01      	ldr	r3, [sp, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]

  /* Boundaries.*/
  start_offset = mfs_flash_get_bank_offset(mfsp, bank);
 8003ba4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	9803      	ldr	r0, [sp, #12]
 8003bac:	f7ff fd80 	bl	80036b0 <mfs_flash_get_bank_offset>
 8003bb0:	900d      	str	r0, [sp, #52]	; 0x34
  hdr_offset   = start_offset + (flash_offset_t)ALIGNED_SIZEOF(mfs_bank_header_t);
 8003bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bb4:	3310      	adds	r3, #16
 8003bb6:	9311      	str	r3, [sp, #68]	; 0x44
  end_offset   = start_offset + mfsp->config->bank_size;
 8003bb8:	9b03      	ldr	r3, [sp, #12]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003bc0:	4413      	add	r3, r2
 8003bc2:	930c      	str	r3, [sp, #48]	; 0x30
 8003bc4:	e0af      	b.n	8003d26 <mfs_bank_scan_records+0x196>
      uint8_t               data8[ALIGNED_SIZEOF(mfs_data_header_t)];
    } u;
    uint16_t crc;

    /* Reading the current record header.*/
    RET_ON_ERROR(mfs_flash_read(mfsp, hdr_offset,
 8003bc6:	ab05      	add	r3, sp, #20
 8003bc8:	2210      	movs	r2, #16
 8003bca:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003bcc:	9803      	ldr	r0, [sp, #12]
 8003bce:	f7ff fd97 	bl	8003700 <mfs_flash_read>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8003bd8:	f99d 302f 	ldrsb.w	r3, [sp, #47]	; 0x2f
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <mfs_bank_scan_records+0x56>
 8003be0:	f99d 302f 	ldrsb.w	r3, [sp, #47]	; 0x2f
 8003be4:	e0ab      	b.n	8003d3e <mfs_bank_scan_records+0x1ae>
                                sizeof (mfs_data_header_t),
                                u.data8));

    /* Checking if the found header is in erased state.*/
    if ((u.dhdr.hdr32[0] == mfsp->config->erased) &&
 8003be6:	9a05      	ldr	r2, [sp, #20]
 8003be8:	9b03      	ldr	r3, [sp, #12]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d10c      	bne.n	8003c0c <mfs_bank_scan_records+0x7c>
        (u.dhdr.hdr32[1] == mfsp->config->erased) &&
 8003bf2:	9a06      	ldr	r2, [sp, #24]
 8003bf4:	9b03      	ldr	r3, [sp, #12]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
    if ((u.dhdr.hdr32[0] == mfsp->config->erased) &&
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d106      	bne.n	8003c0c <mfs_bank_scan_records+0x7c>
        (u.dhdr.hdr32[2] == mfsp->config->erased)) {
 8003bfe:	9a07      	ldr	r2, [sp, #28]
 8003c00:	9b03      	ldr	r3, [sp, #12]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
        (u.dhdr.hdr32[1] == mfsp->config->erased) &&
 8003c06:	429a      	cmp	r2, r3
 8003c08:	f000 8094 	beq.w	8003d34 <mfs_bank_scan_records+0x1a4>
      break;
    }

    /* It is not erased so checking for integrity.*/
    if ((u.dhdr.fields.magic1 != MFS_HEADER_MAGIC_1) ||
 8003c0c:	9b05      	ldr	r3, [sp, #20]
 8003c0e:	4a4e      	ldr	r2, [pc, #312]	; (8003d48 <mfs_bank_scan_records+0x1b8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d111      	bne.n	8003c38 <mfs_bank_scan_records+0xa8>
        (u.dhdr.fields.magic2 != MFS_HEADER_MAGIC_2) ||
 8003c14:	9b06      	ldr	r3, [sp, #24]
    if ((u.dhdr.fields.magic1 != MFS_HEADER_MAGIC_1) ||
 8003c16:	4a4d      	ldr	r2, [pc, #308]	; (8003d4c <mfs_bank_scan_records+0x1bc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d10d      	bne.n	8003c38 <mfs_bank_scan_records+0xa8>
        (u.dhdr.fields.id < 1U) ||
 8003c1c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        (u.dhdr.fields.magic2 != MFS_HEADER_MAGIC_2) ||
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d009      	beq.n	8003c38 <mfs_bank_scan_records+0xa8>
        (u.dhdr.fields.id > (uint32_t)MFS_CFG_MAX_RECORDS) ||
 8003c24:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        (u.dhdr.fields.id < 1U) ||
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d805      	bhi.n	8003c38 <mfs_bank_scan_records+0xa8>
        (u.dhdr.fields.size > end_offset - hdr_offset)) {
 8003c2c:	9a08      	ldr	r2, [sp, #32]
 8003c2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c32:	1acb      	subs	r3, r1, r3
        (u.dhdr.fields.id > (uint32_t)MFS_CFG_MAX_RECORDS) ||
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d903      	bls.n	8003c40 <mfs_bank_scan_records+0xb0>
      *wflagp = true;
 8003c38:	9b01      	ldr	r3, [sp, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	701a      	strb	r2, [r3, #0]
      break;
 8003c3e:	e079      	b.n	8003d34 <mfs_bank_scan_records+0x1a4>
      break;
    }

    /* Finally checking the CRC, we need to perform it in chunks because
       we have a limited buffer.*/
    crc = 0xFFFFU;
 8003c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c44:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    if (u.dhdr.fields.size > 0U) {
 8003c48:	9b08      	ldr	r3, [sp, #32]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d033      	beq.n	8003cb6 <mfs_bank_scan_records+0x126>
      flash_offset_t data = hdr_offset + sizeof (mfs_data_header_t);
 8003c4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c50:	3310      	adds	r3, #16
 8003c52:	930f      	str	r3, [sp, #60]	; 0x3c
      uint32_t total = u.dhdr.fields.size;
 8003c54:	9b08      	ldr	r3, [sp, #32]
 8003c56:	930e      	str	r3, [sp, #56]	; 0x38
 8003c58:	e02a      	b.n	8003cb0 <mfs_bank_scan_records+0x120>

      while (total > 0U) {
        uint32_t chunk = total > MFS_CFG_BUFFER_SIZE ? MFS_CFG_BUFFER_SIZE :
 8003c5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	bf28      	it	cs
 8003c60:	2320      	movcs	r3, #32
 8003c62:	930a      	str	r3, [sp, #40]	; 0x28
                                                       total;

        /* Reading the data chunk.*/
        RET_ON_ERROR(mfs_flash_read(mfsp, data, chunk, mfsp->buffer.data8));
 8003c64:	9b03      	ldr	r3, [sp, #12]
 8003c66:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003c6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003c6e:	9803      	ldr	r0, [sp, #12]
 8003c70:	f7ff fd46 	bl	8003700 <mfs_flash_read>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8003c7a:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <mfs_bank_scan_records+0xf8>
 8003c82:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
    RET_ON_ERROR(mfs_flash_read(mfsp, hdr_offset,
 8003c86:	e05a      	b.n	8003d3e <mfs_bank_scan_records+0x1ae>

        /* CRC on the read data chunk.*/
        crc = crc16(crc, &mfsp->buffer.data8[0], chunk);
 8003c88:	9b03      	ldr	r3, [sp, #12]
 8003c8a:	f503 71f2 	add.w	r1, r3, #484	; 0x1e4
 8003c8e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8003c92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff fcb3 	bl	8003600 <crc16>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42

        /* Next chunk.*/
        data  += chunk;
 8003ca0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ca4:	4413      	add	r3, r2
 8003ca6:	930f      	str	r3, [sp, #60]	; 0x3c
        total -= chunk;
 8003ca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	930e      	str	r3, [sp, #56]	; 0x38
      while (total > 0U) {
 8003cb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1d1      	bne.n	8003c5a <mfs_bank_scan_records+0xca>
      }
    }
    if (crc != u.dhdr.fields.crc) {
 8003cb6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8003cba:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d003      	beq.n	8003cca <mfs_bank_scan_records+0x13a>
      /* If the CRC is invalid then this record is ignored but scanning
         continues because there could be more valid records afterward.*/
      *wflagp = true;
 8003cc2:	9b01      	ldr	r3, [sp, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	e025      	b.n	8003d16 <mfs_bank_scan_records+0x186>
    }
    else {
      /* Zero-sized records are erase markers.*/
      if (u.dhdr.fields.size == 0U) {
 8003cca:	9b08      	ldr	r3, [sp, #32]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d111      	bne.n	8003cf4 <mfs_bank_scan_records+0x164>
        mfsp->descriptors[u.dhdr.fields.id - 1U].offset = 0U;
 8003cd0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8003cd4:	1e5a      	subs	r2, r3, #1
 8003cd6:	9b03      	ldr	r3, [sp, #12]
 8003cd8:	3203      	adds	r2, #3
 8003cda:	2100      	movs	r1, #0
 8003cdc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        mfsp->descriptors[u.dhdr.fields.id - 1U].size   = 0U;
 8003ce0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	9a03      	ldr	r2, [sp, #12]
 8003ce8:	3303      	adds	r3, #3
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4413      	add	r3, r2
 8003cee:	2200      	movs	r2, #0
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	e010      	b.n	8003d16 <mfs_bank_scan_records+0x186>
      }
      else {
        mfsp->descriptors[u.dhdr.fields.id - 1U].offset = hdr_offset;
 8003cf4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8003cf8:	1e5a      	subs	r2, r3, #1
 8003cfa:	9b03      	ldr	r3, [sp, #12]
 8003cfc:	3203      	adds	r2, #3
 8003cfe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003d00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        mfsp->descriptors[u.dhdr.fields.id - 1U].size   = u.dhdr.fields.size;
 8003d04:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	9a08      	ldr	r2, [sp, #32]
 8003d0c:	9903      	ldr	r1, [sp, #12]
 8003d0e:	3303      	adds	r3, #3
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	440b      	add	r3, r1
 8003d14:	605a      	str	r2, [r3, #4]
      }
    }

    /* On the next header.*/
    hdr_offset = hdr_offset + ALIGNED_REC_SIZE(u.dhdr.fields.size);
 8003d16:	9b08      	ldr	r3, [sp, #32]
 8003d18:	330f      	adds	r3, #15
 8003d1a:	f023 0201 	bic.w	r2, r3, #1
 8003d1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d20:	4413      	add	r3, r2
 8003d22:	3302      	adds	r3, #2
 8003d24:	9311      	str	r3, [sp, #68]	; 0x44
  while (hdr_offset < end_offset - ALIGNED_DHDR_SIZE) {
 8003d26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d28:	3b10      	subs	r3, #16
 8003d2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	f4ff af4a 	bcc.w	8003bc6 <mfs_bank_scan_records+0x36>
 8003d32:	e000      	b.n	8003d36 <mfs_bank_scan_records+0x1a6>
      break;
 8003d34:	bf00      	nop
  }

  /* Next writable offset.*/
  mfsp->next_offset = hdr_offset;
 8003d36:	9b03      	ldr	r3, [sp, #12]
 8003d38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003d3a:	611a      	str	r2, [r3, #16]

  return MFS_NO_ERROR;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	b013      	add	sp, #76	; 0x4c
 8003d42:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d46:	bf00      	nop
 8003d48:	5fae45f0 	.word	0x5fae45f0
 8003d4c:	f045ae5f 	.word	0xf045ae5f

08003d50 <mfs_bank_get_state>:
 * @notapi
 */
static mfs_error_t mfs_bank_get_state(MFSDriver *mfsp,
                                      mfs_bank_t bank,
                                      mfs_bank_state_t *statep,
                                      uint32_t *cntp) {
 8003d50:	b500      	push	{lr}
 8003d52:	b087      	sub	sp, #28
 8003d54:	9003      	str	r0, [sp, #12]
 8003d56:	9201      	str	r2, [sp, #4]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	f88d 300b 	strb.w	r3, [sp, #11]

  /* Reading the current bank header.*/
  RET_ON_ERROR(mfs_flash_read(mfsp, mfs_flash_get_bank_offset(mfsp, bank),
 8003d60:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003d64:	4619      	mov	r1, r3
 8003d66:	9803      	ldr	r0, [sp, #12]
 8003d68:	f7ff fca2 	bl	80036b0 <mfs_flash_get_bank_offset>
 8003d6c:	4601      	mov	r1, r0
 8003d6e:	9b03      	ldr	r3, [sp, #12]
 8003d70:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003d74:	2210      	movs	r2, #16
 8003d76:	9803      	ldr	r0, [sp, #12]
 8003d78:	f7ff fcc2 	bl	8003700 <mfs_flash_read>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f88d 3017 	strb.w	r3, [sp, #23]
 8003d82:	f99d 3017 	ldrsb.w	r3, [sp, #23]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <mfs_bank_get_state+0x40>
 8003d8a:	f99d 3017 	ldrsb.w	r3, [sp, #23]
 8003d8e:	e021      	b.n	8003dd4 <mfs_bank_get_state+0x84>
                              sizeof (mfs_bank_header_t),
                              mfsp->buffer.data8));

  /* Getting the counter regardless of the bank state, it is only valid if
     the state is MFS_BANK_OK.*/
  *cntp = mfsp->buffer.bhdr.fields.counter;
 8003d90:	9b03      	ldr	r3, [sp, #12]
 8003d92:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8003d96:	9b00      	ldr	r3, [sp, #0]
 8003d98:	601a      	str	r2, [r3, #0]

  /* Checking just the header.*/
  *statep = mfs_bank_check_header(mfsp);
 8003d9a:	9803      	ldr	r0, [sp, #12]
 8003d9c:	f7ff fe90 	bl	8003ac0 <mfs_bank_check_header>
 8003da0:	4603      	mov	r3, r0
 8003da2:	461a      	mov	r2, r3
 8003da4:	9b01      	ldr	r3, [sp, #4]
 8003da6:	701a      	strb	r2, [r3, #0]
  if (*statep == MFS_BANK_ERASED) {
 8003da8:	9b01      	ldr	r3, [sp, #4]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d110      	bne.n	8003dd2 <mfs_bank_get_state+0x82>
    mfs_error_t err;

    /* Checking if the bank is really all erased.*/
    err = mfs_bank_verify_erase(mfsp, bank);
 8003db0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003db4:	4619      	mov	r1, r3
 8003db6:	9803      	ldr	r0, [sp, #12]
 8003db8:	f7ff fdf2 	bl	80039a0 <mfs_bank_verify_erase>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f88d 3016 	strb.w	r3, [sp, #22]
    if (err == MFS_ERR_NOT_ERASED) {
 8003dc2:	f99d 3016 	ldrsb.w	r3, [sp, #22]
 8003dc6:	f113 0f07 	cmn.w	r3, #7
 8003dca:	d102      	bne.n	8003dd2 <mfs_bank_get_state+0x82>
      *statep = MFS_BANK_GARBAGE;
 8003dcc:	9b01      	ldr	r3, [sp, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	701a      	strb	r2, [r3, #0]
    }
  }

  return MFS_NO_ERROR;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	b007      	add	sp, #28
 8003dd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ddc:	0000      	movs	r0, r0
	...

08003de0 <mfs_garbage_collect>:
 * @param[out] mfsp     pointer to the @p MFSDriver object
 * @return              The operation status.
 *
 * @notapi
 */
static mfs_error_t mfs_garbage_collect(MFSDriver *mfsp) {
 8003de0:	b500      	push	{lr}
 8003de2:	b089      	sub	sp, #36	; 0x24
 8003de4:	9001      	str	r0, [sp, #4]
  unsigned i;
  mfs_bank_t sbank, dbank;
  flash_offset_t dest_offset;

  sbank = mfsp->current_bank;
 8003de6:	9b01      	ldr	r3, [sp, #4]
 8003de8:	7a1b      	ldrb	r3, [r3, #8]
 8003dea:	f88d 3013 	strb.w	r3, [sp, #19]
  if (sbank == MFS_BANK_0) {
 8003dee:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d103      	bne.n	8003dfe <mfs_garbage_collect+0x1e>
    dbank = MFS_BANK_1;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f88d 301b 	strb.w	r3, [sp, #27]
 8003dfc:	e002      	b.n	8003e04 <mfs_garbage_collect+0x24>
  }
  else {
    dbank = MFS_BANK_0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f88d 301b 	strb.w	r3, [sp, #27]
  }

  /* Write address.*/
  dest_offset = mfs_flash_get_bank_offset(mfsp, dbank) +
 8003e04:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	9801      	ldr	r0, [sp, #4]
 8003e0c:	f7ff fc50 	bl	80036b0 <mfs_flash_get_bank_offset>
 8003e10:	4603      	mov	r3, r0
 8003e12:	3310      	adds	r3, #16
 8003e14:	9305      	str	r3, [sp, #20]
                ALIGNED_SIZEOF(mfs_bank_header_t);

  /* Copying the most recent record instances only.*/
  for (i = 0; i < MFS_CFG_MAX_RECORDS; i++) {
 8003e16:	2300      	movs	r3, #0
 8003e18:	9307      	str	r3, [sp, #28]
 8003e1a:	e032      	b.n	8003e82 <mfs_garbage_collect+0xa2>
    uint32_t totsize = ALIGNED_REC_SIZE(mfsp->descriptors[i].size);
 8003e1c:	9a01      	ldr	r2, [sp, #4]
 8003e1e:	9b07      	ldr	r3, [sp, #28]
 8003e20:	3303      	adds	r3, #3
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4413      	add	r3, r2
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	330f      	adds	r3, #15
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	3302      	adds	r3, #2
 8003e30:	9303      	str	r3, [sp, #12]
    if (mfsp->descriptors[i].offset != 0) {
 8003e32:	9b01      	ldr	r3, [sp, #4]
 8003e34:	9a07      	ldr	r2, [sp, #28]
 8003e36:	3203      	adds	r2, #3
 8003e38:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01d      	beq.n	8003e7c <mfs_garbage_collect+0x9c>
      RET_ON_ERROR(mfs_flash_copy(mfsp, dest_offset,
 8003e40:	9b01      	ldr	r3, [sp, #4]
 8003e42:	9a07      	ldr	r2, [sp, #28]
 8003e44:	3203      	adds	r2, #3
 8003e46:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8003e4a:	9b03      	ldr	r3, [sp, #12]
 8003e4c:	9905      	ldr	r1, [sp, #20]
 8003e4e:	9801      	ldr	r0, [sp, #4]
 8003e50:	f7ff fcde 	bl	8003810 <mfs_flash_copy>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f88d 300b 	strb.w	r3, [sp, #11]
 8003e5a:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <mfs_garbage_collect+0x88>
 8003e62:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8003e66:	e03e      	b.n	8003ee6 <mfs_garbage_collect+0x106>
                                  mfsp->descriptors[i].offset,
                                  totsize));
      mfsp->descriptors[i].offset = dest_offset;
 8003e68:	9b01      	ldr	r3, [sp, #4]
 8003e6a:	9a07      	ldr	r2, [sp, #28]
 8003e6c:	3203      	adds	r2, #3
 8003e6e:	9905      	ldr	r1, [sp, #20]
 8003e70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
      dest_offset += totsize;
 8003e74:	9a05      	ldr	r2, [sp, #20]
 8003e76:	9b03      	ldr	r3, [sp, #12]
 8003e78:	4413      	add	r3, r2
 8003e7a:	9305      	str	r3, [sp, #20]
  for (i = 0; i < MFS_CFG_MAX_RECORDS; i++) {
 8003e7c:	9b07      	ldr	r3, [sp, #28]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	9307      	str	r3, [sp, #28]
 8003e82:	9b07      	ldr	r3, [sp, #28]
 8003e84:	2b1f      	cmp	r3, #31
 8003e86:	d9c9      	bls.n	8003e1c <mfs_garbage_collect+0x3c>
    }
  }

  /* New current bank.*/
  mfsp->current_bank = dbank;
 8003e88:	9b01      	ldr	r3, [sp, #4]
 8003e8a:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8003e8e:	721a      	strb	r2, [r3, #8]
  mfsp->current_counter += 1U;
 8003e90:	9b01      	ldr	r3, [sp, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	9b01      	ldr	r3, [sp, #4]
 8003e98:	60da      	str	r2, [r3, #12]
  mfsp->next_offset = dest_offset;
 8003e9a:	9b01      	ldr	r3, [sp, #4]
 8003e9c:	9a05      	ldr	r2, [sp, #20]
 8003e9e:	611a      	str	r2, [r3, #16]

  /* The header is written after the data.*/
  RET_ON_ERROR(mfs_bank_write_header(mfsp, dbank, mfsp->current_counter));
 8003ea0:	9b01      	ldr	r3, [sp, #4]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	9801      	ldr	r0, [sp, #4]
 8003eac:	f7ff fdc8 	bl	8003a40 <mfs_bank_write_header>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f88d 3012 	strb.w	r3, [sp, #18]
 8003eb6:	f99d 3012 	ldrsb.w	r3, [sp, #18]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <mfs_garbage_collect+0xe4>
 8003ebe:	f99d 3012 	ldrsb.w	r3, [sp, #18]
 8003ec2:	e010      	b.n	8003ee6 <mfs_garbage_collect+0x106>

  /* The source bank is erased last.*/
  RET_ON_ERROR(mfs_bank_erase(mfsp, sbank));
 8003ec4:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	9801      	ldr	r0, [sp, #4]
 8003ecc:	f7ff fcf0 	bl	80038b0 <mfs_bank_erase>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f88d 3011 	strb.w	r3, [sp, #17]
 8003ed6:	f99d 3011 	ldrsb.w	r3, [sp, #17]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <mfs_garbage_collect+0x104>
 8003ede:	f99d 3011 	ldrsb.w	r3, [sp, #17]
 8003ee2:	e000      	b.n	8003ee6 <mfs_garbage_collect+0x106>

  return MFS_NO_ERROR;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	b009      	add	sp, #36	; 0x24
 8003eea:	f85d fb04 	ldr.w	pc, [sp], #4
 8003eee:	bf00      	nop

08003ef0 <mfs_try_mount>:
 * @param[in] mfsp      pointer to the @p MFSDriver object
 * @return              The operation status.
 *
 * @api
 */
static mfs_error_t mfs_try_mount(MFSDriver *mfsp) {
 8003ef0:	b500      	push	{lr}
 8003ef2:	b08d      	sub	sp, #52	; 0x34
 8003ef4:	9001      	str	r0, [sp, #4]
  mfs_bank_state_t sts0, sts1;
  mfs_bank_t bank;
  uint32_t cnt0 = 0, cnt1 = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	9304      	str	r3, [sp, #16]
 8003efa:	2300      	movs	r3, #0
 8003efc:	9303      	str	r3, [sp, #12]
  bool w1 = false, w2 = false;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8003f04:	2300      	movs	r3, #0
 8003f06:	f88d 300b 	strb.w	r3, [sp, #11]

  /* Resetting the bank state.*/
  mfs_state_reset(mfsp);
 8003f0a:	9801      	ldr	r0, [sp, #4]
 8003f0c:	f7ff fba8 	bl	8003660 <mfs_state_reset>

  /* Assessing the state of the two banks.*/
  RET_ON_ERROR(mfs_bank_get_state(mfsp, MFS_BANK_0, &sts0, &cnt0));
 8003f10:	ab04      	add	r3, sp, #16
 8003f12:	f10d 0216 	add.w	r2, sp, #22
 8003f16:	2100      	movs	r1, #0
 8003f18:	9801      	ldr	r0, [sp, #4]
 8003f1a:	f7ff ff19 	bl	8003d50 <mfs_bank_get_state>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8003f24:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <mfs_try_mount+0x42>
 8003f2c:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
 8003f30:	e19a      	b.n	8004268 <mfs_try_mount+0x378>
  RET_ON_ERROR(mfs_bank_get_state(mfsp, MFS_BANK_1, &sts1, &cnt1));
 8003f32:	ab03      	add	r3, sp, #12
 8003f34:	f10d 0215 	add.w	r2, sp, #21
 8003f38:	2101      	movs	r1, #1
 8003f3a:	9801      	ldr	r0, [sp, #4]
 8003f3c:	f7ff ff08 	bl	8003d50 <mfs_bank_get_state>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 8003f46:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <mfs_try_mount+0x64>
 8003f4e:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
 8003f52:	e189      	b.n	8004268 <mfs_try_mount+0x378>

  /* Handling all possible scenarios, each one requires its own recovery
     strategy.*/
  switch (PAIR(sts0, sts1)) {
 8003f54:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	2b0a      	cmp	r3, #10
 8003f62:	f200 8103 	bhi.w	800416c <mfs_try_mount+0x27c>
 8003f66:	a201      	add	r2, pc, #4	; (adr r2, 8003f6c <mfs_try_mount+0x7c>)
 8003f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6c:	08003f99 	.word	0x08003f99
 8003f70:	08004079 	.word	0x08004079
 8003f74:	08004089 	.word	0x08004089
 8003f78:	0800416d 	.word	0x0800416d
 8003f7c:	08004081 	.word	0x08004081
 8003f80:	08003fbf 	.word	0x08003fbf
 8003f84:	08004119 	.word	0x08004119
 8003f88:	0800416d 	.word	0x0800416d
 8003f8c:	080040d1 	.word	0x080040d1
 8003f90:	08004143 	.word	0x08004143
 8003f94:	08004015 	.word	0x08004015

  case PAIR(MFS_BANK_ERASED, MFS_BANK_ERASED):
    /* Both banks erased, first initialization.*/
    RET_ON_ERROR(mfs_bank_write_header(mfsp, MFS_BANK_0, 1));
 8003f98:	2201      	movs	r2, #1
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	9801      	ldr	r0, [sp, #4]
 8003f9e:	f7ff fd4f 	bl	8003a40 <mfs_bank_write_header>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f88d 301a 	strb.w	r3, [sp, #26]
 8003fa8:	f99d 301a 	ldrsb.w	r3, [sp, #26]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <mfs_try_mount+0xc6>
 8003fb0:	f99d 301a 	ldrsb.w	r3, [sp, #26]
 8003fb4:	e158      	b.n	8004268 <mfs_try_mount+0x378>
    bank = MFS_BANK_0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8003fbc:	e0d9      	b.n	8004172 <mfs_try_mount+0x282>
    break;

  case PAIR(MFS_BANK_OK, MFS_BANK_OK):
    /* Both banks appear to be valid but one must be newer, erasing the
       older one.*/
    if (cnt0 > cnt1) {
 8003fbe:	9a04      	ldr	r2, [sp, #16]
 8003fc0:	9b03      	ldr	r3, [sp, #12]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d911      	bls.n	8003fea <mfs_try_mount+0xfa>
      /* Bank 0 is newer.*/
      RET_ON_ERROR(mfs_bank_erase(mfsp, MFS_BANK_1));
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	9801      	ldr	r0, [sp, #4]
 8003fca:	f7ff fc71 	bl	80038b0 <mfs_bank_erase>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f88d 301d 	strb.w	r3, [sp, #29]
 8003fd4:	f99d 301d 	ldrsb.w	r3, [sp, #29]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <mfs_try_mount+0xf2>
 8003fdc:	f99d 301d 	ldrsb.w	r3, [sp, #29]
 8003fe0:	e142      	b.n	8004268 <mfs_try_mount+0x378>
      bank = MFS_BANK_0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8003fe8:	e010      	b.n	800400c <mfs_try_mount+0x11c>
    }
    else {
      /* Bank 1 is newer.*/
      RET_ON_ERROR(mfs_bank_erase(mfsp, MFS_BANK_0));
 8003fea:	2100      	movs	r1, #0
 8003fec:	9801      	ldr	r0, [sp, #4]
 8003fee:	f7ff fc5f 	bl	80038b0 <mfs_bank_erase>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f88d 301e 	strb.w	r3, [sp, #30]
 8003ff8:	f99d 301e 	ldrsb.w	r3, [sp, #30]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <mfs_try_mount+0x116>
 8004000:	f99d 301e 	ldrsb.w	r3, [sp, #30]
 8004004:	e130      	b.n	8004268 <mfs_try_mount+0x378>
      bank = MFS_BANK_1;
 8004006:	2301      	movs	r3, #1
 8004008:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    }
    w1 = true;
 800400c:	2301      	movs	r3, #1
 800400e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8004012:	e0ae      	b.n	8004172 <mfs_try_mount+0x282>
    break;

  case PAIR(MFS_BANK_GARBAGE, MFS_BANK_GARBAGE):
    /* Both banks are unreadable, reinitializing.*/
    RET_ON_ERROR(mfs_bank_erase(mfsp, MFS_BANK_0));
 8004014:	2100      	movs	r1, #0
 8004016:	9801      	ldr	r0, [sp, #4]
 8004018:	f7ff fc4a 	bl	80038b0 <mfs_bank_erase>
 800401c:	4603      	mov	r3, r0
 800401e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8004022:	f99d 3025 	ldrsb.w	r3, [sp, #37]	; 0x25
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <mfs_try_mount+0x140>
 800402a:	f99d 3025 	ldrsb.w	r3, [sp, #37]	; 0x25
 800402e:	e11b      	b.n	8004268 <mfs_try_mount+0x378>
    RET_ON_ERROR(mfs_bank_erase(mfsp, MFS_BANK_1));
 8004030:	2101      	movs	r1, #1
 8004032:	9801      	ldr	r0, [sp, #4]
 8004034:	f7ff fc3c 	bl	80038b0 <mfs_bank_erase>
 8004038:	4603      	mov	r3, r0
 800403a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800403e:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <mfs_try_mount+0x15c>
 8004046:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
 800404a:	e10d      	b.n	8004268 <mfs_try_mount+0x378>
    RET_ON_ERROR(mfs_bank_write_header(mfsp, MFS_BANK_0, 1));
 800404c:	2201      	movs	r2, #1
 800404e:	2100      	movs	r1, #0
 8004050:	9801      	ldr	r0, [sp, #4]
 8004052:	f7ff fcf5 	bl	8003a40 <mfs_bank_write_header>
 8004056:	4603      	mov	r3, r0
 8004058:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800405c:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <mfs_try_mount+0x17a>
 8004064:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
 8004068:	e0fe      	b.n	8004268 <mfs_try_mount+0x378>
    bank = MFS_BANK_0;
 800406a:	2300      	movs	r3, #0
 800406c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    w1 = true;
 8004070:	2301      	movs	r3, #1
 8004072:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8004076:	e07c      	b.n	8004172 <mfs_try_mount+0x282>
    break;

  case PAIR(MFS_BANK_ERASED, MFS_BANK_OK):
    /* Normal situation, bank one is used.*/
    bank = MFS_BANK_1;
 8004078:	2301      	movs	r3, #1
 800407a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800407e:	e078      	b.n	8004172 <mfs_try_mount+0x282>
    break;

  case PAIR(MFS_BANK_OK, MFS_BANK_ERASED):
    /* Normal situation, bank zero is used.*/
    bank = MFS_BANK_0;
 8004080:	2300      	movs	r3, #0
 8004082:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8004086:	e074      	b.n	8004172 <mfs_try_mount+0x282>
    break;

  case PAIR(MFS_BANK_ERASED, MFS_BANK_GARBAGE):
    /* Bank zero is erased, bank one is not readable.*/
    RET_ON_ERROR(mfs_bank_erase(mfsp, MFS_BANK_1));
 8004088:	2101      	movs	r1, #1
 800408a:	9801      	ldr	r0, [sp, #4]
 800408c:	f7ff fc10 	bl	80038b0 <mfs_bank_erase>
 8004090:	4603      	mov	r3, r0
 8004092:	f88d 301c 	strb.w	r3, [sp, #28]
 8004096:	f99d 301c 	ldrsb.w	r3, [sp, #28]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <mfs_try_mount+0x1b4>
 800409e:	f99d 301c 	ldrsb.w	r3, [sp, #28]
 80040a2:	e0e1      	b.n	8004268 <mfs_try_mount+0x378>
    RET_ON_ERROR(mfs_bank_write_header(mfsp, MFS_BANK_0, 1));
 80040a4:	2201      	movs	r2, #1
 80040a6:	2100      	movs	r1, #0
 80040a8:	9801      	ldr	r0, [sp, #4]
 80040aa:	f7ff fcc9 	bl	8003a40 <mfs_bank_write_header>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f88d 301b 	strb.w	r3, [sp, #27]
 80040b4:	f99d 301b 	ldrsb.w	r3, [sp, #27]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <mfs_try_mount+0x1d2>
 80040bc:	f99d 301b 	ldrsb.w	r3, [sp, #27]
 80040c0:	e0d2      	b.n	8004268 <mfs_try_mount+0x378>
    bank = MFS_BANK_0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    w1 = true;
 80040c8:	2301      	movs	r3, #1
 80040ca:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 80040ce:	e050      	b.n	8004172 <mfs_try_mount+0x282>
    break;

  case PAIR(MFS_BANK_GARBAGE, MFS_BANK_ERASED):
    /* Bank zero is not readable, bank one is erased.*/
    RET_ON_ERROR(mfs_bank_erase(mfsp, MFS_BANK_0));
 80040d0:	2100      	movs	r1, #0
 80040d2:	9801      	ldr	r0, [sp, #4]
 80040d4:	f7ff fbec 	bl	80038b0 <mfs_bank_erase>
 80040d8:	4603      	mov	r3, r0
 80040da:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80040de:	f99d 3021 	ldrsb.w	r3, [sp, #33]	; 0x21
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <mfs_try_mount+0x1fc>
 80040e6:	f99d 3021 	ldrsb.w	r3, [sp, #33]	; 0x21
 80040ea:	e0bd      	b.n	8004268 <mfs_try_mount+0x378>
    RET_ON_ERROR(mfs_bank_write_header(mfsp, MFS_BANK_1, 1));
 80040ec:	2201      	movs	r2, #1
 80040ee:	2101      	movs	r1, #1
 80040f0:	9801      	ldr	r0, [sp, #4]
 80040f2:	f7ff fca5 	bl	8003a40 <mfs_bank_write_header>
 80040f6:	4603      	mov	r3, r0
 80040f8:	f88d 3020 	strb.w	r3, [sp, #32]
 80040fc:	f99d 3020 	ldrsb.w	r3, [sp, #32]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <mfs_try_mount+0x21a>
 8004104:	f99d 3020 	ldrsb.w	r3, [sp, #32]
 8004108:	e0ae      	b.n	8004268 <mfs_try_mount+0x378>
    bank = MFS_BANK_1;
 800410a:	2301      	movs	r3, #1
 800410c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    w1 = true;
 8004110:	2301      	movs	r3, #1
 8004112:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8004116:	e02c      	b.n	8004172 <mfs_try_mount+0x282>
    break;

  case PAIR(MFS_BANK_OK, MFS_BANK_GARBAGE):
    /* Bank zero is normal, bank one is unreadable.*/
    RET_ON_ERROR(mfs_bank_erase(mfsp, MFS_BANK_1));
 8004118:	2101      	movs	r1, #1
 800411a:	9801      	ldr	r0, [sp, #4]
 800411c:	f7ff fbc8 	bl	80038b0 <mfs_bank_erase>
 8004120:	4603      	mov	r3, r0
 8004122:	f88d 301f 	strb.w	r3, [sp, #31]
 8004126:	f99d 301f 	ldrsb.w	r3, [sp, #31]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <mfs_try_mount+0x244>
 800412e:	f99d 301f 	ldrsb.w	r3, [sp, #31]
 8004132:	e099      	b.n	8004268 <mfs_try_mount+0x378>
    bank = MFS_BANK_0;
 8004134:	2300      	movs	r3, #0
 8004136:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    w1 = true;
 800413a:	2301      	movs	r3, #1
 800413c:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8004140:	e017      	b.n	8004172 <mfs_try_mount+0x282>
    break;

  case PAIR(MFS_BANK_GARBAGE, MFS_BANK_OK):
    /* Bank zero is unreadable, bank one is normal.*/
    RET_ON_ERROR(mfs_bank_erase(mfsp, MFS_BANK_0));
 8004142:	2100      	movs	r1, #0
 8004144:	9801      	ldr	r0, [sp, #4]
 8004146:	f7ff fbb3 	bl	80038b0 <mfs_bank_erase>
 800414a:	4603      	mov	r3, r0
 800414c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8004150:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <mfs_try_mount+0x26e>
 8004158:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
 800415c:	e084      	b.n	8004268 <mfs_try_mount+0x378>
    bank = MFS_BANK_1;
 800415e:	2301      	movs	r3, #1
 8004160:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    w1 = true;
 8004164:	2301      	movs	r3, #1
 8004166:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800416a:	e002      	b.n	8004172 <mfs_try_mount+0x282>
    break;

  default:
    return MFS_ERR_INTERNAL;
 800416c:	f06f 0308 	mvn.w	r3, #8
 8004170:	e07a      	b.n	8004268 <mfs_try_mount+0x378>
  /* Mounting the bank.*/
  {
    unsigned i;

    /* Reading the bank header again.*/
    RET_ON_ERROR(mfs_flash_read(mfsp, mfs_flash_get_bank_offset(mfsp, bank),
 8004172:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8004176:	4619      	mov	r1, r3
 8004178:	9801      	ldr	r0, [sp, #4]
 800417a:	f7ff fa99 	bl	80036b0 <mfs_flash_get_bank_offset>
 800417e:	4601      	mov	r1, r0
 8004180:	9b01      	ldr	r3, [sp, #4]
 8004182:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004186:	2210      	movs	r2, #16
 8004188:	9801      	ldr	r0, [sp, #4]
 800418a:	f7ff fab9 	bl	8003700 <mfs_flash_read>
 800418e:	4603      	mov	r3, r0
 8004190:	f88d 3019 	strb.w	r3, [sp, #25]
 8004194:	f99d 3019 	ldrsb.w	r3, [sp, #25]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <mfs_try_mount+0x2b2>
 800419c:	f99d 3019 	ldrsb.w	r3, [sp, #25]
 80041a0:	e062      	b.n	8004268 <mfs_try_mount+0x378>
                                sizeof (mfs_bank_header_t),
                                mfsp->buffer.data8));

    /* Checked again for extra safety.*/
    if (mfs_bank_check_header(mfsp) != MFS_BANK_OK) {
 80041a2:	9801      	ldr	r0, [sp, #4]
 80041a4:	f7ff fc8c 	bl	8003ac0 <mfs_bank_check_header>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d002      	beq.n	80041b4 <mfs_try_mount+0x2c4>
      return MFS_ERR_INTERNAL;
 80041ae:	f06f 0308 	mvn.w	r3, #8
 80041b2:	e059      	b.n	8004268 <mfs_try_mount+0x378>
    }

    /* Storing the bank data.*/
    mfsp->current_bank    = bank;
 80041b4:	9b01      	ldr	r3, [sp, #4]
 80041b6:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80041ba:	721a      	strb	r2, [r3, #8]
    mfsp->current_counter = mfsp->buffer.bhdr.fields.counter;
 80041bc:	9b01      	ldr	r3, [sp, #4]
 80041be:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 80041c2:	9b01      	ldr	r3, [sp, #4]
 80041c4:	60da      	str	r2, [r3, #12]

    /* Scanning for the most recent instance of all records.*/
    RET_ON_ERROR(mfs_bank_scan_records(mfsp, bank, &w2));
 80041c6:	f10d 020b 	add.w	r2, sp, #11
 80041ca:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80041ce:	4619      	mov	r1, r3
 80041d0:	9801      	ldr	r0, [sp, #4]
 80041d2:	f7ff fcdd 	bl	8003b90 <mfs_bank_scan_records>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f88d 3018 	strb.w	r3, [sp, #24]
 80041dc:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <mfs_try_mount+0x2fa>
 80041e4:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 80041e8:	e03e      	b.n	8004268 <mfs_try_mount+0x378>

    /* Calculating the effective used size.*/
    mfsp->used_space = ALIGNED_SIZEOF(mfs_bank_header_t);
 80041ea:	9b01      	ldr	r3, [sp, #4]
 80041ec:	2210      	movs	r2, #16
 80041ee:	615a      	str	r2, [r3, #20]
    for (i = 0; i < MFS_CFG_MAX_RECORDS; i++) {
 80041f0:	2300      	movs	r3, #0
 80041f2:	930a      	str	r3, [sp, #40]	; 0x28
 80041f4:	e018      	b.n	8004228 <mfs_try_mount+0x338>
      if (mfsp->descriptors[i].offset != 0U) {
 80041f6:	9b01      	ldr	r3, [sp, #4]
 80041f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041fa:	3203      	adds	r2, #3
 80041fc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00e      	beq.n	8004222 <mfs_try_mount+0x332>
        mfsp->used_space += ALIGNED_REC_SIZE(mfsp->descriptors[i].size);
 8004204:	9b01      	ldr	r3, [sp, #4]
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	9901      	ldr	r1, [sp, #4]
 800420a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800420c:	3303      	adds	r3, #3
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	440b      	add	r3, r1
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	330f      	adds	r3, #15
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	4413      	add	r3, r2
 800421c:	1c9a      	adds	r2, r3, #2
 800421e:	9b01      	ldr	r3, [sp, #4]
 8004220:	615a      	str	r2, [r3, #20]
    for (i = 0; i < MFS_CFG_MAX_RECORDS; i++) {
 8004222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004224:	3301      	adds	r3, #1
 8004226:	930a      	str	r3, [sp, #40]	; 0x28
 8004228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800422a:	2b1f      	cmp	r3, #31
 800422c:	d9e3      	bls.n	80041f6 <mfs_try_mount+0x306>
    }
  }

  /* In case of detected problems then a garbage collection is performed in
     order to repair/remove anomalies.*/
  if (w2) {
 800422e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00c      	beq.n	8004250 <mfs_try_mount+0x360>
    RET_ON_ERROR(mfs_garbage_collect(mfsp));
 8004236:	9801      	ldr	r0, [sp, #4]
 8004238:	f7ff fdd2 	bl	8003de0 <mfs_garbage_collect>
 800423c:	4603      	mov	r3, r0
 800423e:	f88d 3017 	strb.w	r3, [sp, #23]
 8004242:	f99d 3017 	ldrsb.w	r3, [sp, #23]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <mfs_try_mount+0x360>
 800424a:	f99d 3017 	ldrsb.w	r3, [sp, #23]
 800424e:	e00b      	b.n	8004268 <mfs_try_mount+0x378>
  }

  return (w1 || w2) ? MFS_WARN_REPAIR : MFS_NO_ERROR;
 8004250:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8004254:	2b00      	cmp	r3, #0
 8004256:	d103      	bne.n	8004260 <mfs_try_mount+0x370>
 8004258:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <mfs_try_mount+0x374>
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <mfs_try_mount+0x376>
 8004264:	2300      	movs	r3, #0
 8004266:	b25b      	sxtb	r3, r3
}
 8004268:	4618      	mov	r0, r3
 800426a:	b00d      	add	sp, #52	; 0x34
 800426c:	f85d fb04 	ldr.w	pc, [sp], #4

08004270 <mfs_mount>:
 *                                  @p MFS_ERROR state.
 * @retval MFS_ERR_INTERNAL         if an internal logic failure is detected.
 *
 * @api
 */
mfs_error_t mfs_mount(MFSDriver *mfsp) {
 8004270:	b500      	push	{lr}
 8004272:	b085      	sub	sp, #20
 8004274:	9001      	str	r0, [sp, #4]
  unsigned i;

  /* Resetting previous state.*/
  mfs_state_reset(mfsp);
 8004276:	9801      	ldr	r0, [sp, #4]
 8004278:	f7ff f9f2 	bl	8003660 <mfs_state_reset>

  /* Attempting to mount the managed partition.*/
  for (i = 0; i < MFS_CFG_MAX_REPAIR_ATTEMPTS; i++) {
 800427c:	2300      	movs	r3, #0
 800427e:	9303      	str	r3, [sp, #12]
 8004280:	e01d      	b.n	80042be <mfs_mount+0x4e>
    mfs_error_t err;

    err = mfs_try_mount(mfsp);
 8004282:	9801      	ldr	r0, [sp, #4]
 8004284:	f7ff fe34 	bl	8003ef0 <mfs_try_mount>
 8004288:	4603      	mov	r3, r0
 800428a:	f88d 300b 	strb.w	r3, [sp, #11]
    if (err == MFS_ERR_INTERNAL) {
 800428e:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8004292:	f113 0f09 	cmn.w	r3, #9
 8004296:	d105      	bne.n	80042a4 <mfs_mount+0x34>
      /* Special case, do not retry on internal errors but report
         immediately.*/
      mfsp->state = MFS_ERROR;
 8004298:	9b01      	ldr	r3, [sp, #4]
 800429a:	2204      	movs	r2, #4
 800429c:	701a      	strb	r2, [r3, #0]
      return err;
 800429e:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 80042a2:	e014      	b.n	80042ce <mfs_mount+0x5e>
    }
    if (!MFS_IS_ERROR(err)) {
 80042a4:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	db05      	blt.n	80042b8 <mfs_mount+0x48>
      mfsp->state  = MFS_READY;
 80042ac:	9b01      	ldr	r3, [sp, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	701a      	strb	r2, [r3, #0]
      return err;
 80042b2:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 80042b6:	e00a      	b.n	80042ce <mfs_mount+0x5e>
  for (i = 0; i < MFS_CFG_MAX_REPAIR_ATTEMPTS; i++) {
 80042b8:	9b03      	ldr	r3, [sp, #12]
 80042ba:	3301      	adds	r3, #1
 80042bc:	9303      	str	r3, [sp, #12]
 80042be:	9b03      	ldr	r3, [sp, #12]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d9de      	bls.n	8004282 <mfs_mount+0x12>
    }
  }

  /* Driver start failed.*/
  mfsp->state = MFS_ERROR;
 80042c4:	9b01      	ldr	r3, [sp, #4]
 80042c6:	2204      	movs	r2, #4
 80042c8:	701a      	strb	r2, [r3, #0]
  return MFS_ERR_FLASH_FAILURE;
 80042ca:	f06f 0307 	mvn.w	r3, #7
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	b005      	add	sp, #20
 80042d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80042d6:	bf00      	nop
	...

080042e0 <mfsObjectInit>:
 *
 * @param[out] mfsp     pointer to the @p MFSDriver object
 *
 * @init
 */
void mfsObjectInit(MFSDriver *mfsp) {
 80042e0:	b082      	sub	sp, #8
 80042e2:	9001      	str	r0, [sp, #4]

  osalDbgCheck(mfsp != NULL);

  mfsp->state = MFS_STOP;
 80042e4:	9b01      	ldr	r3, [sp, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
  mfsp->config = NULL;
 80042ea:	9b01      	ldr	r3, [sp, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	605a      	str	r2, [r3, #4]
}
 80042f0:	b002      	add	sp, #8
 80042f2:	4770      	bx	lr
	...

08004300 <mfsStart>:
 *                                  @p MFS_ERROR state.
 * @retval MFS_ERR_INTERNAL         if an internal logic failure is detected.
 *
 * @api
 */
mfs_error_t mfsStart(MFSDriver *mfsp, const MFSConfig *config) {
 8004300:	b500      	push	{lr}
 8004302:	b083      	sub	sp, #12
 8004304:	9001      	str	r0, [sp, #4]
 8004306:	9100      	str	r1, [sp, #0]
  osalDbgCheck((mfsp != NULL) && (config != NULL));
  osalDbgAssert((mfsp->state == MFS_STOP) || (mfsp->state == MFS_READY) ||
                (mfsp->state == MFS_ERROR), "invalid state");

  /* Storing configuration.*/
  mfsp->config = config;
 8004308:	9b01      	ldr	r3, [sp, #4]
 800430a:	9a00      	ldr	r2, [sp, #0]
 800430c:	605a      	str	r2, [r3, #4]

  return mfs_mount(mfsp);
 800430e:	9801      	ldr	r0, [sp, #4]
 8004310:	f7ff ffae 	bl	8004270 <mfs_mount>
 8004314:	4603      	mov	r3, r0
} 
 8004316:	4618      	mov	r0, r3
 8004318:	b003      	add	sp, #12
 800431a:	f85d fb04 	ldr.w	pc, [sp], #4
 800431e:	bf00      	nop

08004320 <mfsStop>:
 *
 * @param[in] mfsp      pointer to the @p MFSDriver object
 *
 * @api
 */
void mfsStop(MFSDriver *mfsp) {
 8004320:	b082      	sub	sp, #8
 8004322:	9001      	str	r0, [sp, #4]

  osalDbgCheck(mfsp != NULL);
  osalDbgAssert((mfsp->state == MFS_STOP) || (mfsp->state == MFS_READY) ||
                (mfsp->state == MFS_ERROR), "invalid state");

  mfsp->config = NULL;
 8004324:	9b01      	ldr	r3, [sp, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	605a      	str	r2, [r3, #4]
  mfsp->state = MFS_STOP;
 800432a:	9b01      	ldr	r3, [sp, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
}
 8004330:	b002      	add	sp, #8
 8004332:	4770      	bx	lr
	...

08004340 <mfsErase>:
 *                                  @p MFS_ERROR state.
 * @retval MFS_ERR_INTERNAL         if an internal logic failure is detected.
 *
 * @api
 */
mfs_error_t mfsErase(MFSDriver *mfsp) {
 8004340:	b500      	push	{lr}
 8004342:	b085      	sub	sp, #20
 8004344:	9001      	str	r0, [sp, #4]

  osalDbgCheck(mfsp != NULL);

  if (mfsp->state != MFS_READY) {
 8004346:	9b01      	ldr	r3, [sp, #4]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d002      	beq.n	8004354 <mfsErase+0x14>
    return MFS_ERR_INV_STATE;
 800434e:	f04f 33ff 	mov.w	r3, #4294967295
 8004352:	e01f      	b.n	8004394 <mfsErase+0x54>
  }

  RET_ON_ERROR(mfs_bank_erase(mfsp, MFS_BANK_0));
 8004354:	2100      	movs	r1, #0
 8004356:	9801      	ldr	r0, [sp, #4]
 8004358:	f7ff faaa 	bl	80038b0 <mfs_bank_erase>
 800435c:	4603      	mov	r3, r0
 800435e:	f88d 300f 	strb.w	r3, [sp, #15]
 8004362:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <mfsErase+0x30>
 800436a:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 800436e:	e011      	b.n	8004394 <mfsErase+0x54>
  RET_ON_ERROR(mfs_bank_erase(mfsp, MFS_BANK_1));
 8004370:	2101      	movs	r1, #1
 8004372:	9801      	ldr	r0, [sp, #4]
 8004374:	f7ff fa9c 	bl	80038b0 <mfs_bank_erase>
 8004378:	4603      	mov	r3, r0
 800437a:	f88d 300e 	strb.w	r3, [sp, #14]
 800437e:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <mfsErase+0x4c>
 8004386:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 800438a:	e003      	b.n	8004394 <mfsErase+0x54>

  return mfs_mount(mfsp);
 800438c:	9801      	ldr	r0, [sp, #4]
 800438e:	f7ff ff6f 	bl	8004270 <mfs_mount>
 8004392:	4603      	mov	r3, r0
}
 8004394:	4618      	mov	r0, r3
 8004396:	b005      	add	sp, #20
 8004398:	f85d fb04 	ldr.w	pc, [sp], #4
 800439c:	0000      	movs	r0, r0
	...

080043a0 <mfsReadRecord>:
 * @retval MFS_ERR_INTERNAL         if an internal logic failure is detected.
 *
 * @api
 */
mfs_error_t mfsReadRecord(MFSDriver *mfsp, mfs_id_t id,
                          size_t *np, uint8_t *buffer) {
 80043a0:	b500      	push	{lr}
 80043a2:	b087      	sub	sp, #28
 80043a4:	9003      	str	r0, [sp, #12]
 80043a6:	9102      	str	r1, [sp, #8]
 80043a8:	9201      	str	r2, [sp, #4]
 80043aa:	9300      	str	r3, [sp, #0]

  osalDbgCheck((mfsp != NULL) &&
               (id >= 1U) && (id <= (mfs_id_t)MFS_CFG_MAX_RECORDS) &&
               (np != NULL) && (*np > 0U) && (buffer != NULL));

  if ((mfsp->state != MFS_READY) && (mfsp->state != MFS_TRANSACTION)) {
 80043ac:	9b03      	ldr	r3, [sp, #12]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d006      	beq.n	80043c2 <mfsReadRecord+0x22>
 80043b4:	9b03      	ldr	r3, [sp, #12]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d002      	beq.n	80043c2 <mfsReadRecord+0x22>
    return MFS_ERR_INV_STATE;
 80043bc:	f04f 33ff 	mov.w	r3, #4294967295
 80043c0:	e069      	b.n	8004496 <mfsReadRecord+0xf6>
  }

  /* Checking if the requested record actually exists.*/
  if (mfsp->descriptors[id - 1U].offset == 0U) {
 80043c2:	9b02      	ldr	r3, [sp, #8]
 80043c4:	1e5a      	subs	r2, r3, #1
 80043c6:	9b03      	ldr	r3, [sp, #12]
 80043c8:	3203      	adds	r2, #3
 80043ca:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <mfsReadRecord+0x38>
    return MFS_ERR_NOT_FOUND;
 80043d2:	f06f 0302 	mvn.w	r3, #2
 80043d6:	e05e      	b.n	8004496 <mfsReadRecord+0xf6>
  }

  /* Making sure to not overflow the buffer.*/
  if (*np < mfsp->descriptors[id - 1U].size) {
 80043d8:	9b01      	ldr	r3, [sp, #4]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	9b02      	ldr	r3, [sp, #8]
 80043de:	3b01      	subs	r3, #1
 80043e0:	9903      	ldr	r1, [sp, #12]
 80043e2:	3303      	adds	r3, #3
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	440b      	add	r3, r1
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d202      	bcs.n	80043f4 <mfsReadRecord+0x54>
    return MFS_ERR_INV_SIZE;
 80043ee:	f06f 0301 	mvn.w	r3, #1
 80043f2:	e050      	b.n	8004496 <mfsReadRecord+0xf6>
  }

  /* Header read from flash.*/
  RET_ON_ERROR(mfs_flash_read(mfsp,
 80043f4:	9b02      	ldr	r3, [sp, #8]
 80043f6:	1e5a      	subs	r2, r3, #1
 80043f8:	9b03      	ldr	r3, [sp, #12]
 80043fa:	3203      	adds	r2, #3
 80043fc:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 8004400:	9b03      	ldr	r3, [sp, #12]
 8004402:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004406:	2210      	movs	r2, #16
 8004408:	9803      	ldr	r0, [sp, #12]
 800440a:	f7ff f979 	bl	8003700 <mfs_flash_read>
 800440e:	4603      	mov	r3, r0
 8004410:	f88d 3017 	strb.w	r3, [sp, #23]
 8004414:	f99d 3017 	ldrsb.w	r3, [sp, #23]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <mfsReadRecord+0x82>
 800441c:	f99d 3017 	ldrsb.w	r3, [sp, #23]
 8004420:	e039      	b.n	8004496 <mfsReadRecord+0xf6>
                              mfsp->descriptors[id - 1U].offset,
                              sizeof (mfs_data_header_t),
                              mfsp->buffer.data8));

  /* Data read from flash.*/
  *np = mfsp->descriptors[id - 1U].size;
 8004422:	9b02      	ldr	r3, [sp, #8]
 8004424:	3b01      	subs	r3, #1
 8004426:	9a03      	ldr	r2, [sp, #12]
 8004428:	3303      	adds	r3, #3
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4413      	add	r3, r2
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	9b01      	ldr	r3, [sp, #4]
 8004432:	601a      	str	r2, [r3, #0]
  RET_ON_ERROR(mfs_flash_read(mfsp,
 8004434:	9b02      	ldr	r3, [sp, #8]
 8004436:	1e5a      	subs	r2, r3, #1
 8004438:	9b03      	ldr	r3, [sp, #12]
 800443a:	3203      	adds	r2, #3
 800443c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004440:	f103 0110 	add.w	r1, r3, #16
 8004444:	9b01      	ldr	r3, [sp, #4]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	9b00      	ldr	r3, [sp, #0]
 800444a:	9803      	ldr	r0, [sp, #12]
 800444c:	f7ff f958 	bl	8003700 <mfs_flash_read>
 8004450:	4603      	mov	r3, r0
 8004452:	f88d 3016 	strb.w	r3, [sp, #22]
 8004456:	f99d 3016 	ldrsb.w	r3, [sp, #22]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <mfsReadRecord+0xc4>
 800445e:	f99d 3016 	ldrsb.w	r3, [sp, #22]
 8004462:	e018      	b.n	8004496 <mfsReadRecord+0xf6>
                              mfsp->descriptors[id - 1U].offset + sizeof (mfs_data_header_t),
                              *np,
                              buffer));

  /* Checking CRC.*/
  crc = crc16(0xFFFFU, buffer, *np);
 8004464:	9b01      	ldr	r3, [sp, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	9900      	ldr	r1, [sp, #0]
 800446c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004470:	f7ff f8c6 	bl	8003600 <crc16>
 8004474:	4603      	mov	r3, r0
 8004476:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (crc != mfsp->buffer.dhdr.fields.crc) {
 800447a:	9b03      	ldr	r3, [sp, #12]
 800447c:	f8b3 31ee 	ldrh.w	r3, [r3, #494]	; 0x1ee
 8004480:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8004484:	429a      	cmp	r2, r3
 8004486:	d005      	beq.n	8004494 <mfsReadRecord+0xf4>
    mfsp->state = MFS_ERROR;
 8004488:	9b03      	ldr	r3, [sp, #12]
 800448a:	2204      	movs	r2, #4
 800448c:	701a      	strb	r2, [r3, #0]
    return MFS_ERR_FLASH_FAILURE;
 800448e:	f06f 0307 	mvn.w	r3, #7
 8004492:	e000      	b.n	8004496 <mfsReadRecord+0xf6>
  }

  return MFS_NO_ERROR;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	b007      	add	sp, #28
 800449a:	f85d fb04 	ldr.w	pc, [sp], #4
 800449e:	bf00      	nop

080044a0 <mfsWriteRecord>:
 * @retval MFS_ERR_INTERNAL         if an internal logic failure is detected.
 *
 * @api
 */
mfs_error_t mfsWriteRecord(MFSDriver *mfsp, mfs_id_t id,
                           size_t n, const uint8_t *buffer) {
 80044a0:	b500      	push	{lr}
 80044a2:	b08d      	sub	sp, #52	; 0x34
 80044a4:	9003      	str	r0, [sp, #12]
 80044a6:	9102      	str	r1, [sp, #8]
 80044a8:	9201      	str	r2, [sp, #4]
 80044aa:	9300      	str	r3, [sp, #0]
  osalDbgCheck((mfsp != NULL) &&
               (id >= 1U) && (id <= (mfs_id_t)MFS_CFG_MAX_RECORDS) &&
               (n > 0U) && (buffer != NULL));

  /* Aligned record size.*/
  asize = ALIGNED_REC_SIZE(n);
 80044ac:	9b01      	ldr	r3, [sp, #4]
 80044ae:	330f      	adds	r3, #15
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	3302      	adds	r3, #2
 80044b6:	930a      	str	r3, [sp, #40]	; 0x28

  /* Normal mode code path.*/
  if (mfsp->state == MFS_READY) {
 80044b8:	9b03      	ldr	r3, [sp, #12]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	f040 80c9 	bne.w	8004654 <mfsWriteRecord+0x1b4>
    bool warning = false;
 80044c2:	2300      	movs	r3, #0
 80044c4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

    /* If the required space is beyond the available (compacted) block
       size then an error is returned.
       NOTE: The space for one extra header is reserved in order to allow
       for an erase operation after the space has been fully allocated.*/
    rspace = ALIGNED_DHDR_SIZE + asize;
 80044c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044ca:	3310      	adds	r3, #16
 80044cc:	9309      	str	r3, [sp, #36]	; 0x24
    if (rspace > mfsp->config->bank_size - mfsp->used_space) {
 80044ce:	9b03      	ldr	r3, [sp, #12]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	9b03      	ldr	r3, [sp, #12]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044dc:	429a      	cmp	r2, r3
 80044de:	d902      	bls.n	80044e6 <mfsWriteRecord+0x46>
      return MFS_ERR_OUT_OF_MEM;
 80044e0:	f06f 0303 	mvn.w	r3, #3
 80044e4:	e13b      	b.n	800475e <mfsWriteRecord+0x2be>
    }

    /* Checking for immediately (not compacted) available space.*/
    free = (mfs_flash_get_bank_offset(mfsp, mfsp->current_bank) +
 80044e6:	9b03      	ldr	r3, [sp, #12]
 80044e8:	7a1b      	ldrb	r3, [r3, #8]
 80044ea:	4619      	mov	r1, r3
 80044ec:	9803      	ldr	r0, [sp, #12]
 80044ee:	f7ff f8df 	bl	80036b0 <mfs_flash_get_bank_offset>
 80044f2:	4602      	mov	r2, r0
            mfsp->config->bank_size) - mfsp->next_offset;
 80044f4:	9b03      	ldr	r3, [sp, #12]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
    free = (mfs_flash_get_bank_offset(mfsp, mfsp->current_bank) +
 80044fa:	441a      	add	r2, r3
            mfsp->config->bank_size) - mfsp->next_offset;
 80044fc:	9b03      	ldr	r3, [sp, #12]
 80044fe:	691b      	ldr	r3, [r3, #16]
    free = (mfs_flash_get_bank_offset(mfsp, mfsp->current_bank) +
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	9306      	str	r3, [sp, #24]
    if (rspace > free) {
 8004504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004506:	9b06      	ldr	r3, [sp, #24]
 8004508:	429a      	cmp	r2, r3
 800450a:	d90f      	bls.n	800452c <mfsWriteRecord+0x8c>
      /* We need to perform a garbage collection, there is enough space
         but it has to be freed.*/
      warning = true;
 800450c:	2301      	movs	r3, #1
 800450e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      RET_ON_ERROR(mfs_garbage_collect(mfsp));
 8004512:	9803      	ldr	r0, [sp, #12]
 8004514:	f7ff fc64 	bl	8003de0 <mfs_garbage_collect>
 8004518:	4603      	mov	r3, r0
 800451a:	f88d 3017 	strb.w	r3, [sp, #23]
 800451e:	f99d 3017 	ldrsb.w	r3, [sp, #23]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <mfsWriteRecord+0x8c>
 8004526:	f99d 3017 	ldrsb.w	r3, [sp, #23]
 800452a:	e118      	b.n	800475e <mfsWriteRecord+0x2be>
    }

    /* Writing the data header without the magic, it will be written last.*/
    mfsp->buffer.dhdr.fields.id     = (uint16_t)id;
 800452c:	9b02      	ldr	r3, [sp, #8]
 800452e:	b29a      	uxth	r2, r3
 8004530:	9b03      	ldr	r3, [sp, #12]
 8004532:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
    mfsp->buffer.dhdr.fields.size   = (uint32_t)n;
 8004536:	9b03      	ldr	r3, [sp, #12]
 8004538:	9a01      	ldr	r2, [sp, #4]
 800453a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
    mfsp->buffer.dhdr.fields.crc    = crc16(0xFFFFU, buffer, n);
 800453e:	9a01      	ldr	r2, [sp, #4]
 8004540:	9900      	ldr	r1, [sp, #0]
 8004542:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004546:	f7ff f85b 	bl	8003600 <crc16>
 800454a:	4603      	mov	r3, r0
 800454c:	461a      	mov	r2, r3
 800454e:	9b03      	ldr	r3, [sp, #12]
 8004550:	f8a3 21ee 	strh.w	r2, [r3, #494]	; 0x1ee
    RET_ON_ERROR(mfs_flash_write(mfsp,
 8004554:	9b03      	ldr	r3, [sp, #12]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f103 0108 	add.w	r1, r3, #8
 800455c:	9b03      	ldr	r3, [sp, #12]
 800455e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004562:	3308      	adds	r3, #8
 8004564:	2208      	movs	r2, #8
 8004566:	9803      	ldr	r0, [sp, #12]
 8004568:	f7ff f8f2 	bl	8003750 <mfs_flash_write>
 800456c:	4603      	mov	r3, r0
 800456e:	f88d 3016 	strb.w	r3, [sp, #22]
 8004572:	f99d 3016 	ldrsb.w	r3, [sp, #22]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <mfsWriteRecord+0xe0>
 800457a:	f99d 3016 	ldrsb.w	r3, [sp, #22]
 800457e:	e0ee      	b.n	800475e <mfsWriteRecord+0x2be>
                                 mfsp->next_offset + (sizeof (uint32_t) * 2U),
                                 sizeof (mfs_data_header_t) - (sizeof (uint32_t) * 2U),
                                 mfsp->buffer.data8 + (sizeof (uint32_t) * 2U)));

    /* Writing the data part.*/
    RET_ON_ERROR(mfs_flash_write(mfsp,
 8004580:	9b03      	ldr	r3, [sp, #12]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f103 0110 	add.w	r1, r3, #16
 8004588:	9b00      	ldr	r3, [sp, #0]
 800458a:	9a01      	ldr	r2, [sp, #4]
 800458c:	9803      	ldr	r0, [sp, #12]
 800458e:	f7ff f8df 	bl	8003750 <mfs_flash_write>
 8004592:	4603      	mov	r3, r0
 8004594:	f88d 3015 	strb.w	r3, [sp, #21]
 8004598:	f99d 3015 	ldrsb.w	r3, [sp, #21]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <mfsWriteRecord+0x106>
 80045a0:	f99d 3015 	ldrsb.w	r3, [sp, #21]
 80045a4:	e0db      	b.n	800475e <mfsWriteRecord+0x2be>
                                 mfsp->next_offset + sizeof (mfs_data_header_t),
                                 n,
                                 buffer));

    /* Finally writing the magic number, it seals the operation.*/
    mfsp->buffer.dhdr.fields.magic1 = (uint32_t)MFS_HEADER_MAGIC_1;
 80045a6:	9b03      	ldr	r3, [sp, #12]
 80045a8:	4a6f      	ldr	r2, [pc, #444]	; (8004768 <mfsWriteRecord+0x2c8>)
 80045aa:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
    mfsp->buffer.dhdr.fields.magic2 = (uint32_t)MFS_HEADER_MAGIC_2;
 80045ae:	9b03      	ldr	r3, [sp, #12]
 80045b0:	4a6e      	ldr	r2, [pc, #440]	; (800476c <mfsWriteRecord+0x2cc>)
 80045b2:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    RET_ON_ERROR(mfs_flash_write(mfsp,
 80045b6:	9b03      	ldr	r3, [sp, #12]
 80045b8:	6919      	ldr	r1, [r3, #16]
 80045ba:	9b03      	ldr	r3, [sp, #12]
 80045bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80045c0:	2208      	movs	r2, #8
 80045c2:	9803      	ldr	r0, [sp, #12]
 80045c4:	f7ff f8c4 	bl	8003750 <mfs_flash_write>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f88d 3014 	strb.w	r3, [sp, #20]
 80045ce:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <mfsWriteRecord+0x13c>
 80045d6:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 80045da:	e0c0      	b.n	800475e <mfsWriteRecord+0x2be>
                                 sizeof (uint32_t) * 2U,
                                 mfsp->buffer.data8));

    /* The size of the old record instance, if present, must be subtracted
       to the total used size.*/
    if (mfsp->descriptors[id - 1U].offset != 0U) {
 80045dc:	9b02      	ldr	r3, [sp, #8]
 80045de:	1e5a      	subs	r2, r3, #1
 80045e0:	9b03      	ldr	r3, [sp, #12]
 80045e2:	3203      	adds	r2, #3
 80045e4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00f      	beq.n	800460c <mfsWriteRecord+0x16c>
      mfsp->used_space -= ALIGNED_REC_SIZE(mfsp->descriptors[id - 1U].size);
 80045ec:	9b03      	ldr	r3, [sp, #12]
 80045ee:	695a      	ldr	r2, [r3, #20]
 80045f0:	9b02      	ldr	r3, [sp, #8]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	9903      	ldr	r1, [sp, #12]
 80045f6:	3303      	adds	r3, #3
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	440b      	add	r3, r1
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	330f      	adds	r3, #15
 8004600:	43db      	mvns	r3, r3
 8004602:	f023 0301 	bic.w	r3, r3, #1
 8004606:	441a      	add	r2, r3
 8004608:	9b03      	ldr	r3, [sp, #12]
 800460a:	615a      	str	r2, [r3, #20]
    }

    /* Adjusting bank-related metadata.*/
    mfsp->descriptors[id - 1U].offset = mfsp->next_offset;
 800460c:	9b02      	ldr	r3, [sp, #8]
 800460e:	1e5a      	subs	r2, r3, #1
 8004610:	9b03      	ldr	r3, [sp, #12]
 8004612:	6919      	ldr	r1, [r3, #16]
 8004614:	9b03      	ldr	r3, [sp, #12]
 8004616:	3203      	adds	r2, #3
 8004618:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    mfsp->descriptors[id - 1U].size   = (uint32_t)n;
 800461c:	9b02      	ldr	r3, [sp, #8]
 800461e:	3b01      	subs	r3, #1
 8004620:	9a03      	ldr	r2, [sp, #12]
 8004622:	3303      	adds	r3, #3
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4413      	add	r3, r2
 8004628:	9a01      	ldr	r2, [sp, #4]
 800462a:	605a      	str	r2, [r3, #4]
    mfsp->next_offset += asize;
 800462c:	9b03      	ldr	r3, [sp, #12]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004632:	441a      	add	r2, r3
 8004634:	9b03      	ldr	r3, [sp, #12]
 8004636:	611a      	str	r2, [r3, #16]
    mfsp->used_space  += asize;
 8004638:	9b03      	ldr	r3, [sp, #12]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800463e:	441a      	add	r2, r3
 8004640:	9b03      	ldr	r3, [sp, #12]
 8004642:	615a      	str	r2, [r3, #20]

    return warning ? MFS_WARN_GC : MFS_NO_ERROR;
 8004644:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <mfsWriteRecord+0x1b0>
 800464c:	2302      	movs	r3, #2
 800464e:	e086      	b.n	800475e <mfsWriteRecord+0x2be>
 8004650:	2300      	movs	r3, #0
 8004652:	e084      	b.n	800475e <mfsWriteRecord+0x2be>
  }

#if MFS_CFG_TRANSACTION_MAX > 0
  /* Transaction mode code path.*/
  if (mfsp->state == MFS_TRANSACTION) {
 8004654:	9b03      	ldr	r3, [sp, #12]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b03      	cmp	r3, #3
 800465a:	d17e      	bne.n	800475a <mfsWriteRecord+0x2ba>
    mfs_transaction_op_t *top;

    /* Checking if the maximum number of operations in a transaction is
       Exceeded.*/
    if (mfsp->tr_nops >= MFS_CFG_TRANSACTION_MAX) {
 800465c:	9b03      	ldr	r3, [sp, #12]
 800465e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004662:	2b0f      	cmp	r3, #15
 8004664:	d902      	bls.n	800466c <mfsWriteRecord+0x1cc>
      return MFS_ERR_TRANSACTION_NUM;
 8004666:	f06f 0304 	mvn.w	r3, #4
 800466a:	e078      	b.n	800475e <mfsWriteRecord+0x2be>
    }

    /* If the required space is greater than the space allocated for the
       transaction then error.*/
    rspace = asize;
 800466c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800466e:	9309      	str	r3, [sp, #36]	; 0x24
    if (rspace > mfsp->tr_limit_offet - mfsp->tr_next_offset) {
 8004670:	9b03      	ldr	r3, [sp, #12]
 8004672:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8004676:	9b03      	ldr	r3, [sp, #12]
 8004678:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004680:	429a      	cmp	r2, r3
 8004682:	d902      	bls.n	800468a <mfsWriteRecord+0x1ea>
      return MFS_ERR_TRANSACTION_SIZE;
 8004684:	f06f 0305 	mvn.w	r3, #5
 8004688:	e069      	b.n	800475e <mfsWriteRecord+0x2be>
    }

    /* Writing the data header without the magic, it will be written last.*/
    mfsp->buffer.dhdr.fields.id     = (uint16_t)id;
 800468a:	9b02      	ldr	r3, [sp, #8]
 800468c:	b29a      	uxth	r2, r3
 800468e:	9b03      	ldr	r3, [sp, #12]
 8004690:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
    mfsp->buffer.dhdr.fields.size   = (uint32_t)n;
 8004694:	9b03      	ldr	r3, [sp, #12]
 8004696:	9a01      	ldr	r2, [sp, #4]
 8004698:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
    mfsp->buffer.dhdr.fields.crc    = crc16(0xFFFFU, buffer, n);
 800469c:	9a01      	ldr	r2, [sp, #4]
 800469e:	9900      	ldr	r1, [sp, #0]
 80046a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80046a4:	f7fe ffac 	bl	8003600 <crc16>
 80046a8:	4603      	mov	r3, r0
 80046aa:	461a      	mov	r2, r3
 80046ac:	9b03      	ldr	r3, [sp, #12]
 80046ae:	f8a3 21ee 	strh.w	r2, [r3, #494]	; 0x1ee
    RET_ON_ERROR(mfs_flash_write(mfsp,
 80046b2:	9b03      	ldr	r3, [sp, #12]
 80046b4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80046b8:	f103 0108 	add.w	r1, r3, #8
 80046bc:	9b03      	ldr	r3, [sp, #12]
 80046be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80046c2:	3308      	adds	r3, #8
 80046c4:	2208      	movs	r2, #8
 80046c6:	9803      	ldr	r0, [sp, #12]
 80046c8:	f7ff f842 	bl	8003750 <mfs_flash_write>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80046d2:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <mfsWriteRecord+0x240>
 80046da:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
 80046de:	e03e      	b.n	800475e <mfsWriteRecord+0x2be>
                                 mfsp->tr_next_offset + (sizeof (uint32_t) * 2U),
                                 sizeof (mfs_data_header_t) - (sizeof (uint32_t) * 2U),
                                 mfsp->buffer.data8 + (sizeof (uint32_t) * 2U)));

    /* Writing the data part.*/
    RET_ON_ERROR(mfs_flash_write(mfsp,
 80046e0:	9b03      	ldr	r3, [sp, #12]
 80046e2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80046e6:	f103 0110 	add.w	r1, r3, #16
 80046ea:	9b00      	ldr	r3, [sp, #0]
 80046ec:	9a01      	ldr	r2, [sp, #4]
 80046ee:	9803      	ldr	r0, [sp, #12]
 80046f0:	f7ff f82e 	bl	8003750 <mfs_flash_write>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 80046fa:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <mfsWriteRecord+0x268>
 8004702:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
 8004706:	e02a      	b.n	800475e <mfsWriteRecord+0x2be>
                                 mfsp->tr_next_offset + sizeof (mfs_data_header_t),
                                 n,
                                 buffer));

    /* Adding a transaction operation record.*/
    top = &mfsp->tr_ops[mfsp->tr_nops];
 8004708:	9b03      	ldr	r3, [sp, #12]
 800470a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800470e:	4613      	mov	r3, r2
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800471a:	9a03      	ldr	r2, [sp, #12]
 800471c:	4413      	add	r3, r2
 800471e:	3304      	adds	r3, #4
 8004720:	9307      	str	r3, [sp, #28]
    top->offset = mfsp->tr_next_offset;
 8004722:	9b03      	ldr	r3, [sp, #12]
 8004724:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8004728:	9b07      	ldr	r3, [sp, #28]
 800472a:	601a      	str	r2, [r3, #0]
    top->size   = n;
 800472c:	9b07      	ldr	r3, [sp, #28]
 800472e:	9a01      	ldr	r2, [sp, #4]
 8004730:	605a      	str	r2, [r3, #4]
    top->id     = id;
 8004732:	9b07      	ldr	r3, [sp, #28]
 8004734:	9a02      	ldr	r2, [sp, #8]
 8004736:	609a      	str	r2, [r3, #8]

    /* Number of records and next write position updated.*/
    mfsp->tr_nops++;
 8004738:	9b03      	ldr	r3, [sp, #12]
 800473a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	9b03      	ldr	r3, [sp, #12]
 8004742:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    mfsp->tr_next_offset += asize;
 8004746:	9b03      	ldr	r3, [sp, #12]
 8004748:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800474c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800474e:	441a      	add	r2, r3
 8004750:	9b03      	ldr	r3, [sp, #12]
 8004752:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

    return MFS_NO_ERROR;
 8004756:	2300      	movs	r3, #0
 8004758:	e001      	b.n	800475e <mfsWriteRecord+0x2be>
  }
#endif /* MFS_CFG_TRANSACTION_MAX > 0 */

  /* Invalid state.*/
  return MFS_ERR_INV_STATE;
 800475a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800475e:	4618      	mov	r0, r3
 8004760:	b00d      	add	sp, #52	; 0x34
 8004762:	f85d fb04 	ldr.w	pc, [sp], #4
 8004766:	bf00      	nop
 8004768:	5fae45f0 	.word	0x5fae45f0
 800476c:	f045ae5f 	.word	0xf045ae5f

08004770 <mfsEraseRecord>:
 *                                  @p MFS_ERROR state.
 * @retval MFS_ERR_INTERNAL         if an internal logic failure is detected.
 *
 * @api
 */
mfs_error_t mfsEraseRecord(MFSDriver *mfsp, mfs_id_t id) {
 8004770:	b500      	push	{lr}
 8004772:	b08b      	sub	sp, #44	; 0x2c
 8004774:	9001      	str	r0, [sp, #4]
 8004776:	9100      	str	r1, [sp, #0]

  osalDbgCheck((mfsp != NULL) &&
               (id >= 1U) && (id <= (mfs_id_t)MFS_CFG_MAX_RECORDS));

  /* Aligned record size.*/
  asize = ALIGNED_DHDR_SIZE;
 8004778:	2310      	movs	r3, #16
 800477a:	9308      	str	r3, [sp, #32]

  /* Normal mode code path.*/
  if (mfsp->state == MFS_READY) {
 800477c:	9b01      	ldr	r3, [sp, #4]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2b02      	cmp	r3, #2
 8004782:	f040 8095 	bne.w	80048b0 <mfsEraseRecord+0x140>
    bool warning = false;
 8004786:	2300      	movs	r3, #0
 8004788:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

    /* Checking if the requested record actually exists.*/
    if (mfsp->descriptors[id - 1U].offset == 0U) {
 800478c:	9b00      	ldr	r3, [sp, #0]
 800478e:	1e5a      	subs	r2, r3, #1
 8004790:	9b01      	ldr	r3, [sp, #4]
 8004792:	3203      	adds	r2, #3
 8004794:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d102      	bne.n	80047a2 <mfsEraseRecord+0x32>
      return MFS_ERR_NOT_FOUND;
 800479c:	f06f 0302 	mvn.w	r3, #2
 80047a0:	e0fc      	b.n	800499c <mfsEraseRecord+0x22c>
    }

    /* If the required space is beyond the available (compacted) block
       size then an internal error is returned, it should never happen.*/
    rspace = asize;
 80047a2:	9b08      	ldr	r3, [sp, #32]
 80047a4:	9307      	str	r3, [sp, #28]
    if (rspace > mfsp->config->bank_size - mfsp->used_space) {
 80047a6:	9b01      	ldr	r3, [sp, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	9b01      	ldr	r3, [sp, #4]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	9a07      	ldr	r2, [sp, #28]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d902      	bls.n	80047be <mfsEraseRecord+0x4e>
      return MFS_ERR_INTERNAL;
 80047b8:	f06f 0308 	mvn.w	r3, #8
 80047bc:	e0ee      	b.n	800499c <mfsEraseRecord+0x22c>
    }

    /* Checking for immediately (not compacted) available space.*/
    free = (mfs_flash_get_bank_offset(mfsp, mfsp->current_bank) +
 80047be:	9b01      	ldr	r3, [sp, #4]
 80047c0:	7a1b      	ldrb	r3, [r3, #8]
 80047c2:	4619      	mov	r1, r3
 80047c4:	9801      	ldr	r0, [sp, #4]
 80047c6:	f7fe ff73 	bl	80036b0 <mfs_flash_get_bank_offset>
 80047ca:	4602      	mov	r2, r0
            mfsp->config->bank_size) - mfsp->next_offset;
 80047cc:	9b01      	ldr	r3, [sp, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
    free = (mfs_flash_get_bank_offset(mfsp, mfsp->current_bank) +
 80047d2:	441a      	add	r2, r3
            mfsp->config->bank_size) - mfsp->next_offset;
 80047d4:	9b01      	ldr	r3, [sp, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
    free = (mfs_flash_get_bank_offset(mfsp, mfsp->current_bank) +
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	9304      	str	r3, [sp, #16]
    if (rspace > free) {
 80047dc:	9a07      	ldr	r2, [sp, #28]
 80047de:	9b04      	ldr	r3, [sp, #16]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d90f      	bls.n	8004804 <mfsEraseRecord+0x94>
      /* We need to perform a garbage collection, there is enough space
         but it has to be freed.*/
      warning = true;
 80047e4:	2301      	movs	r3, #1
 80047e6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      RET_ON_ERROR(mfs_garbage_collect(mfsp));
 80047ea:	9801      	ldr	r0, [sp, #4]
 80047ec:	f7ff faf8 	bl	8003de0 <mfs_garbage_collect>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f88d 300f 	strb.w	r3, [sp, #15]
 80047f6:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <mfsEraseRecord+0x94>
 80047fe:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 8004802:	e0cb      	b.n	800499c <mfsEraseRecord+0x22c>
    }

    /* Writing the data header with size set to zero, it means that the
       record is logically erased.*/
    mfsp->buffer.dhdr.fields.magic1 = (uint32_t)MFS_HEADER_MAGIC_1;
 8004804:	9b01      	ldr	r3, [sp, #4]
 8004806:	4a67      	ldr	r2, [pc, #412]	; (80049a4 <mfsEraseRecord+0x234>)
 8004808:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
    mfsp->buffer.dhdr.fields.magic2 = (uint32_t)MFS_HEADER_MAGIC_2;
 800480c:	9b01      	ldr	r3, [sp, #4]
 800480e:	4a66      	ldr	r2, [pc, #408]	; (80049a8 <mfsEraseRecord+0x238>)
 8004810:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    mfsp->buffer.dhdr.fields.id     = (uint16_t)id;
 8004814:	9b00      	ldr	r3, [sp, #0]
 8004816:	b29a      	uxth	r2, r3
 8004818:	9b01      	ldr	r3, [sp, #4]
 800481a:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
    mfsp->buffer.dhdr.fields.size   = (uint32_t)0;
 800481e:	9b01      	ldr	r3, [sp, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
    mfsp->buffer.dhdr.fields.crc    = (uint16_t)0xFFFF;
 8004826:	9b01      	ldr	r3, [sp, #4]
 8004828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800482c:	f8a3 21ee 	strh.w	r2, [r3, #494]	; 0x1ee
    RET_ON_ERROR(mfs_flash_write(mfsp,
 8004830:	9b01      	ldr	r3, [sp, #4]
 8004832:	6919      	ldr	r1, [r3, #16]
 8004834:	9b01      	ldr	r3, [sp, #4]
 8004836:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800483a:	2210      	movs	r2, #16
 800483c:	9801      	ldr	r0, [sp, #4]
 800483e:	f7fe ff87 	bl	8003750 <mfs_flash_write>
 8004842:	4603      	mov	r3, r0
 8004844:	f88d 300e 	strb.w	r3, [sp, #14]
 8004848:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <mfsEraseRecord+0xe6>
 8004850:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 8004854:	e0a2      	b.n	800499c <mfsEraseRecord+0x22c>
                                 mfsp->next_offset,
                                 sizeof (mfs_data_header_t),
                                 mfsp->buffer.data8));

    /* Adjusting bank-related metadata.*/
    mfsp->used_space  -= ALIGNED_REC_SIZE(mfsp->descriptors[id - 1U].size);
 8004856:	9b01      	ldr	r3, [sp, #4]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	9b00      	ldr	r3, [sp, #0]
 800485c:	3b01      	subs	r3, #1
 800485e:	9901      	ldr	r1, [sp, #4]
 8004860:	3303      	adds	r3, #3
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	440b      	add	r3, r1
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	330f      	adds	r3, #15
 800486a:	43db      	mvns	r3, r3
 800486c:	f023 0301 	bic.w	r3, r3, #1
 8004870:	441a      	add	r2, r3
 8004872:	9b01      	ldr	r3, [sp, #4]
 8004874:	615a      	str	r2, [r3, #20]
    mfsp->next_offset += sizeof (mfs_data_header_t);
 8004876:	9b01      	ldr	r3, [sp, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f103 0210 	add.w	r2, r3, #16
 800487e:	9b01      	ldr	r3, [sp, #4]
 8004880:	611a      	str	r2, [r3, #16]
    mfsp->descriptors[id - 1U].offset = 0U;
 8004882:	9b00      	ldr	r3, [sp, #0]
 8004884:	1e5a      	subs	r2, r3, #1
 8004886:	9b01      	ldr	r3, [sp, #4]
 8004888:	3203      	adds	r2, #3
 800488a:	2100      	movs	r1, #0
 800488c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    mfsp->descriptors[id - 1U].size   = 0U;
 8004890:	9b00      	ldr	r3, [sp, #0]
 8004892:	3b01      	subs	r3, #1
 8004894:	9a01      	ldr	r2, [sp, #4]
 8004896:	3303      	adds	r3, #3
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4413      	add	r3, r2
 800489c:	2200      	movs	r2, #0
 800489e:	605a      	str	r2, [r3, #4]

    return warning ? MFS_WARN_GC : MFS_NO_ERROR;
 80048a0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <mfsEraseRecord+0x13c>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e077      	b.n	800499c <mfsEraseRecord+0x22c>
 80048ac:	2300      	movs	r3, #0
 80048ae:	e075      	b.n	800499c <mfsEraseRecord+0x22c>
  }

#if MFS_CFG_TRANSACTION_MAX > 0
  /* Transaction mode code path.*/
  if (mfsp->state == MFS_TRANSACTION) {
 80048b0:	9b01      	ldr	r3, [sp, #4]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d16f      	bne.n	8004998 <mfsEraseRecord+0x228>
    mfs_transaction_op_t *top;

    /* Checking if the requested record actually exists.*/
    if (mfsp->descriptors[id - 1U].offset == 0U) {
 80048b8:	9b00      	ldr	r3, [sp, #0]
 80048ba:	1e5a      	subs	r2, r3, #1
 80048bc:	9b01      	ldr	r3, [sp, #4]
 80048be:	3203      	adds	r2, #3
 80048c0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d102      	bne.n	80048ce <mfsEraseRecord+0x15e>
      return MFS_ERR_NOT_FOUND;
 80048c8:	f06f 0302 	mvn.w	r3, #2
 80048cc:	e066      	b.n	800499c <mfsEraseRecord+0x22c>
    }

    /* Checking if the maximum number of operations in a transaction is
       Exceeded.*/
    if (mfsp->tr_nops >= MFS_CFG_TRANSACTION_MAX) {
 80048ce:	9b01      	ldr	r3, [sp, #4]
 80048d0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80048d4:	2b0f      	cmp	r3, #15
 80048d6:	d902      	bls.n	80048de <mfsEraseRecord+0x16e>
      return MFS_ERR_TRANSACTION_NUM;
 80048d8:	f06f 0304 	mvn.w	r3, #4
 80048dc:	e05e      	b.n	800499c <mfsEraseRecord+0x22c>
    }

    /* If the required space is greater than the space allocated for the
       transaction then error.*/
    rspace = asize;
 80048de:	9b08      	ldr	r3, [sp, #32]
 80048e0:	9307      	str	r3, [sp, #28]
    if (rspace > mfsp->tr_limit_offet - mfsp->tr_next_offset) {
 80048e2:	9b01      	ldr	r3, [sp, #4]
 80048e4:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 80048e8:	9b01      	ldr	r3, [sp, #4]
 80048ea:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	9a07      	ldr	r2, [sp, #28]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d902      	bls.n	80048fc <mfsEraseRecord+0x18c>
      return MFS_ERR_TRANSACTION_SIZE;
 80048f6:	f06f 0305 	mvn.w	r3, #5
 80048fa:	e04f      	b.n	800499c <mfsEraseRecord+0x22c>
    }

    /* Writing the data header with size set to zero, it means that the
       record is logically erased. Note, the magic number is not set.*/
    mfsp->buffer.dhdr.fields.id     = (uint16_t)id;
 80048fc:	9b00      	ldr	r3, [sp, #0]
 80048fe:	b29a      	uxth	r2, r3
 8004900:	9b01      	ldr	r3, [sp, #4]
 8004902:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
    mfsp->buffer.dhdr.fields.size   = (uint32_t)0;
 8004906:	9b01      	ldr	r3, [sp, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
    mfsp->buffer.dhdr.fields.crc    = (uint16_t)0xFFFF;
 800490e:	9b01      	ldr	r3, [sp, #4]
 8004910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004914:	f8a3 21ee 	strh.w	r2, [r3, #494]	; 0x1ee
    RET_ON_ERROR(mfs_flash_write(mfsp,
 8004918:	9b01      	ldr	r3, [sp, #4]
 800491a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800491e:	f103 0108 	add.w	r1, r3, #8
 8004922:	9b01      	ldr	r3, [sp, #4]
 8004924:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004928:	3308      	adds	r3, #8
 800492a:	2208      	movs	r2, #8
 800492c:	9801      	ldr	r0, [sp, #4]
 800492e:	f7fe ff0f 	bl	8003750 <mfs_flash_write>
 8004932:	4603      	mov	r3, r0
 8004934:	f88d 301b 	strb.w	r3, [sp, #27]
 8004938:	f99d 301b 	ldrsb.w	r3, [sp, #27]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <mfsEraseRecord+0x1d6>
 8004940:	f99d 301b 	ldrsb.w	r3, [sp, #27]
 8004944:	e02a      	b.n	800499c <mfsEraseRecord+0x22c>
                                 mfsp->tr_next_offset + (sizeof (uint32_t) * 2U),
                                 sizeof (mfs_data_header_t) - (sizeof (uint32_t) * 2U),
                                 mfsp->buffer.data8 + (sizeof (uint32_t) * 2U)));

    /* Adding a transaction operation record.*/
    top = &mfsp->tr_ops[mfsp->tr_nops];
 8004946:	9b01      	ldr	r3, [sp, #4]
 8004948:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800494c:	4613      	mov	r3, r2
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	4413      	add	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004958:	9a01      	ldr	r2, [sp, #4]
 800495a:	4413      	add	r3, r2
 800495c:	3304      	adds	r3, #4
 800495e:	9305      	str	r3, [sp, #20]
    top->offset = mfsp->tr_next_offset;
 8004960:	9b01      	ldr	r3, [sp, #4]
 8004962:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8004966:	9b05      	ldr	r3, [sp, #20]
 8004968:	601a      	str	r2, [r3, #0]
    top->size   = 0U;
 800496a:	9b05      	ldr	r3, [sp, #20]
 800496c:	2200      	movs	r2, #0
 800496e:	605a      	str	r2, [r3, #4]
    top->id     = id;
 8004970:	9b05      	ldr	r3, [sp, #20]
 8004972:	9a00      	ldr	r2, [sp, #0]
 8004974:	609a      	str	r2, [r3, #8]

    /* Number of records and next write position updated.*/
    mfsp->tr_nops++;
 8004976:	9b01      	ldr	r3, [sp, #4]
 8004978:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	9b01      	ldr	r3, [sp, #4]
 8004980:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    mfsp->tr_next_offset += asize;
 8004984:	9b01      	ldr	r3, [sp, #4]
 8004986:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800498a:	9b08      	ldr	r3, [sp, #32]
 800498c:	441a      	add	r2, r3
 800498e:	9b01      	ldr	r3, [sp, #4]
 8004990:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

    return MFS_NO_ERROR;
 8004994:	2300      	movs	r3, #0
 8004996:	e001      	b.n	800499c <mfsEraseRecord+0x22c>
  }
#endif /* MFS_CFG_TRANSACTION_MAX > 0 */

  return MFS_ERR_INV_STATE;
 8004998:	f04f 33ff 	mov.w	r3, #4294967295
}
 800499c:	4618      	mov	r0, r3
 800499e:	b00b      	add	sp, #44	; 0x2c
 80049a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80049a4:	5fae45f0 	.word	0x5fae45f0
 80049a8:	f045ae5f 	.word	0xf045ae5f
 80049ac:	00000000 	.word	0x00000000

080049b0 <mfsPerformGarbageCollection>:
 *                                  @p MFS_ERROR state.
 * @retval MFS_ERR_INTERNAL         if an internal logic failure is detected.
 *
 * @api
 */
mfs_error_t mfsPerformGarbageCollection(MFSDriver *mfsp) {
 80049b0:	b500      	push	{lr}
 80049b2:	b083      	sub	sp, #12
 80049b4:	9001      	str	r0, [sp, #4]

  osalDbgCheck(mfsp != NULL);

  if (mfsp->state != MFS_READY) {
 80049b6:	9b01      	ldr	r3, [sp, #4]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d002      	beq.n	80049c4 <mfsPerformGarbageCollection+0x14>
    return MFS_ERR_INV_STATE;
 80049be:	f04f 33ff 	mov.w	r3, #4294967295
 80049c2:	e003      	b.n	80049cc <mfsPerformGarbageCollection+0x1c>
  }

  return mfs_garbage_collect(mfsp);
 80049c4:	9801      	ldr	r0, [sp, #4]
 80049c6:	f7ff fa0b 	bl	8003de0 <mfs_garbage_collect>
 80049ca:	4603      	mov	r3, r0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	b003      	add	sp, #12
 80049d0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080049e0 <mfsStartTransaction>:
 *                                  @p MFS_ERROR state.
 * @retval MFS_ERR_INTERNAL         if an internal logic failure is detected.
 *
 * @api
 */
mfs_error_t mfsStartTransaction(MFSDriver *mfsp, size_t size) {
 80049e0:	b500      	push	{lr}
 80049e2:	b087      	sub	sp, #28
 80049e4:	9001      	str	r0, [sp, #4]
 80049e6:	9100      	str	r1, [sp, #0]
  flash_offset_t free, tspace, rspace;

  osalDbgCheck((mfsp != NULL) && (size > ALIGNED_DHDR_SIZE));

  /* The driver must be in ready mode.*/
  if (mfsp->state != MFS_READY) {
 80049e8:	9b01      	ldr	r3, [sp, #4]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d002      	beq.n	80049f6 <mfsStartTransaction+0x16>
    return MFS_ERR_INV_STATE;
 80049f0:	f04f 33ff 	mov.w	r3, #4294967295
 80049f4:	e049      	b.n	8004a8a <mfsStartTransaction+0xaa>
  }

  /* Estimating the required contiguous compacted space.*/
  tspace = (flash_offset_t)MFS_ALIGN_NEXT(size);
 80049f6:	9b00      	ldr	r3, [sp, #0]
 80049f8:	3b01      	subs	r3, #1
 80049fa:	f023 0301 	bic.w	r3, r3, #1
 80049fe:	3302      	adds	r3, #2
 8004a00:	9305      	str	r3, [sp, #20]
  rspace = tspace + ALIGNED_DHDR_SIZE;
 8004a02:	9b05      	ldr	r3, [sp, #20]
 8004a04:	3310      	adds	r3, #16
 8004a06:	9304      	str	r3, [sp, #16]

  /* If the required space is beyond the available (compacted) block
     size then an error is returned.*/
  if (rspace > mfsp->config->bank_size - mfsp->used_space) {
 8004a08:	9b01      	ldr	r3, [sp, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	9b01      	ldr	r3, [sp, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	9a04      	ldr	r2, [sp, #16]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d902      	bls.n	8004a20 <mfsStartTransaction+0x40>
    return MFS_ERR_OUT_OF_MEM;
 8004a1a:	f06f 0303 	mvn.w	r3, #3
 8004a1e:	e034      	b.n	8004a8a <mfsStartTransaction+0xaa>
  }

  /* Checking for immediately (not compacted) available space.*/
  free = (mfs_flash_get_bank_offset(mfsp, mfsp->current_bank) +
 8004a20:	9b01      	ldr	r3, [sp, #4]
 8004a22:	7a1b      	ldrb	r3, [r3, #8]
 8004a24:	4619      	mov	r1, r3
 8004a26:	9801      	ldr	r0, [sp, #4]
 8004a28:	f7fe fe42 	bl	80036b0 <mfs_flash_get_bank_offset>
 8004a2c:	4602      	mov	r2, r0
          mfsp->config->bank_size) - mfsp->next_offset;
 8004a2e:	9b01      	ldr	r3, [sp, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
  free = (mfs_flash_get_bank_offset(mfsp, mfsp->current_bank) +
 8004a34:	441a      	add	r2, r3
          mfsp->config->bank_size) - mfsp->next_offset;
 8004a36:	9b01      	ldr	r3, [sp, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
  free = (mfs_flash_get_bank_offset(mfsp, mfsp->current_bank) +
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	9303      	str	r3, [sp, #12]
  if (rspace > free) {
 8004a3e:	9a04      	ldr	r2, [sp, #16]
 8004a40:	9b03      	ldr	r3, [sp, #12]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d90c      	bls.n	8004a60 <mfsStartTransaction+0x80>
    /* We need to perform a garbage collection, there is enough space
       but it has to be freed.*/
    RET_ON_ERROR(mfs_garbage_collect(mfsp));
 8004a46:	9801      	ldr	r0, [sp, #4]
 8004a48:	f7ff f9ca 	bl	8003de0 <mfs_garbage_collect>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f88d 300b 	strb.w	r3, [sp, #11]
 8004a52:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <mfsStartTransaction+0x80>
 8004a5a:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8004a5e:	e014      	b.n	8004a8a <mfsStartTransaction+0xaa>
  }

  /* Entering transaction mode.*/
  mfsp->state = MFS_TRANSACTION;
 8004a60:	9b01      	ldr	r3, [sp, #4]
 8004a62:	2203      	movs	r2, #3
 8004a64:	701a      	strb	r2, [r3, #0]

  /* Initializing transaction state.*/
  mfsp->tr_next_offset = mfsp->next_offset;
 8004a66:	9b01      	ldr	r3, [sp, #4]
 8004a68:	691a      	ldr	r2, [r3, #16]
 8004a6a:	9b01      	ldr	r3, [sp, #4]
 8004a6c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  mfsp->tr_nops        = 0U;
 8004a70:	9b01      	ldr	r3, [sp, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  mfsp->tr_limit_offet = mfsp->tr_next_offset + tspace;
 8004a78:	9b01      	ldr	r3, [sp, #4]
 8004a7a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8004a7e:	9b05      	ldr	r3, [sp, #20]
 8004a80:	441a      	add	r2, r3
 8004a82:	9b01      	ldr	r3, [sp, #4]
 8004a84:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return MFS_NO_ERROR;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	b007      	add	sp, #28
 8004a8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a92:	bf00      	nop
	...

08004aa0 <mfsCommitTransaction>:
 *                                  @p MFS_ERROR state.
 * @retval MFS_ERR_INTERNAL         if an internal logic failure is detected.
 *
 * @api
 */
mfs_error_t mfsCommitTransaction(MFSDriver *mfsp) {
 8004aa0:	b500      	push	{lr}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	9001      	str	r0, [sp, #4]
  mfs_transaction_op_t *top;

  osalDbgCheck(mfsp != NULL);

  /* The driver must be in transaction mode.*/
  if (mfsp->state != MFS_TRANSACTION) {
 8004aa6:	9b01      	ldr	r3, [sp, #4]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d002      	beq.n	8004ab4 <mfsCommitTransaction+0x14>
    return MFS_ERR_INV_STATE;
 8004aae:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab2:	e0a2      	b.n	8004bfa <mfsCommitTransaction+0x15a>
  }

  /* Scanning all buffered operations in reverse order.*/
  mfsp->buffer.dhdr.fields.magic1 = (uint32_t)MFS_HEADER_MAGIC_1;
 8004ab4:	9b01      	ldr	r3, [sp, #4]
 8004ab6:	4a53      	ldr	r2, [pc, #332]	; (8004c04 <mfsCommitTransaction+0x164>)
 8004ab8:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
  mfsp->buffer.dhdr.fields.magic2 = (uint32_t)MFS_HEADER_MAGIC_2;
 8004abc:	9b01      	ldr	r3, [sp, #4]
 8004abe:	4a52      	ldr	r2, [pc, #328]	; (8004c08 <mfsCommitTransaction+0x168>)
 8004ac0:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
  top = &mfsp->tr_ops[mfsp->tr_nops];
 8004ac4:	9b01      	ldr	r3, [sp, #4]
 8004ac6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8004aca:	4613      	mov	r3, r2
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	4413      	add	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004ad6:	9a01      	ldr	r2, [sp, #4]
 8004ad8:	4413      	add	r3, r2
 8004ada:	3304      	adds	r3, #4
 8004adc:	9305      	str	r3, [sp, #20]
 8004ade:	e015      	b.n	8004b0c <mfsCommitTransaction+0x6c>
  while (top > &mfsp->tr_ops[0]) {
    /* On the previous element.*/
    top--;
 8004ae0:	9b05      	ldr	r3, [sp, #20]
 8004ae2:	3b0c      	subs	r3, #12
 8004ae4:	9305      	str	r3, [sp, #20]

    /* Finalizing the operation by writing the magic number.*/
    RET_ON_ERROR(mfs_flash_write(mfsp,
 8004ae6:	9b05      	ldr	r3, [sp, #20]
 8004ae8:	6819      	ldr	r1, [r3, #0]
 8004aea:	9b01      	ldr	r3, [sp, #4]
 8004aec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004af0:	2208      	movs	r2, #8
 8004af2:	9801      	ldr	r0, [sp, #4]
 8004af4:	f7fe fe2c 	bl	8003750 <mfs_flash_write>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f88d 300f 	strb.w	r3, [sp, #15]
 8004afe:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <mfsCommitTransaction+0x6c>
 8004b06:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 8004b0a:	e076      	b.n	8004bfa <mfsCommitTransaction+0x15a>
  while (top > &mfsp->tr_ops[0]) {
 8004b0c:	9b01      	ldr	r3, [sp, #4]
 8004b0e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004b12:	9a05      	ldr	r2, [sp, #20]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d8e3      	bhi.n	8004ae0 <mfsCommitTransaction+0x40>
                                 mfsp->buffer.data8));
  }

  /* Transaction fully committed by writing the last (first in transaction)
     magic number, now updating the internal state using the buffered data.*/
  mfsp->next_offset = mfsp->tr_next_offset;
 8004b18:	9b01      	ldr	r3, [sp, #4]
 8004b1a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8004b1e:	9b01      	ldr	r3, [sp, #4]
 8004b20:	611a      	str	r2, [r3, #16]
 8004b22:	e057      	b.n	8004bd4 <mfsCommitTransaction+0x134>
  while (top < &mfsp->tr_ops[mfsp->tr_nops]) {
    unsigned i = (unsigned)top->id - 1U;
 8004b24:	9b05      	ldr	r3, [sp, #20]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	9304      	str	r3, [sp, #16]

    /* The calculation is a bit different depending on write or erase record
       operations.*/
    if (top->size > 0U) {
 8004b2c:	9b05      	ldr	r3, [sp, #20]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d030      	beq.n	8004b96 <mfsCommitTransaction+0xf6>
      /* It is a write.*/
      if (mfsp->descriptors[i].offset != 0U) {
 8004b34:	9b01      	ldr	r3, [sp, #4]
 8004b36:	9a04      	ldr	r2, [sp, #16]
 8004b38:	3203      	adds	r2, #3
 8004b3a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00e      	beq.n	8004b60 <mfsCommitTransaction+0xc0>
        /* The size of the old record instance, if present, must be subtracted
           to the total used size.*/
        mfsp->used_space -= ALIGNED_REC_SIZE(mfsp->descriptors[i].size);
 8004b42:	9b01      	ldr	r3, [sp, #4]
 8004b44:	695a      	ldr	r2, [r3, #20]
 8004b46:	9901      	ldr	r1, [sp, #4]
 8004b48:	9b04      	ldr	r3, [sp, #16]
 8004b4a:	3303      	adds	r3, #3
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	440b      	add	r3, r1
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	330f      	adds	r3, #15
 8004b54:	43db      	mvns	r3, r3
 8004b56:	f023 0301 	bic.w	r3, r3, #1
 8004b5a:	441a      	add	r2, r3
 8004b5c:	9b01      	ldr	r3, [sp, #4]
 8004b5e:	615a      	str	r2, [r3, #20]
      }

      /* Adjusting bank-related metadata.*/
      mfsp->used_space           += ALIGNED_REC_SIZE(top->size);
 8004b60:	9b01      	ldr	r3, [sp, #4]
 8004b62:	695a      	ldr	r2, [r3, #20]
 8004b64:	9b05      	ldr	r3, [sp, #20]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	330f      	adds	r3, #15
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	4413      	add	r3, r2
 8004b70:	1c9a      	adds	r2, r3, #2
 8004b72:	9b01      	ldr	r3, [sp, #4]
 8004b74:	615a      	str	r2, [r3, #20]
      mfsp->descriptors[i].offset = top->offset;
 8004b76:	9b05      	ldr	r3, [sp, #20]
 8004b78:	6819      	ldr	r1, [r3, #0]
 8004b7a:	9b01      	ldr	r3, [sp, #4]
 8004b7c:	9a04      	ldr	r2, [sp, #16]
 8004b7e:	3203      	adds	r2, #3
 8004b80:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
      mfsp->descriptors[i].size   = top->size;
 8004b84:	9b05      	ldr	r3, [sp, #20]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	9901      	ldr	r1, [sp, #4]
 8004b8a:	9b04      	ldr	r3, [sp, #16]
 8004b8c:	3303      	adds	r3, #3
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	440b      	add	r3, r1
 8004b92:	605a      	str	r2, [r3, #4]
 8004b94:	e01b      	b.n	8004bce <mfsCommitTransaction+0x12e>
    }
    else {
      /* It is an erase.*/
      mfsp->used_space           -= ALIGNED_REC_SIZE(mfsp->descriptors[i].size);
 8004b96:	9b01      	ldr	r3, [sp, #4]
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	9901      	ldr	r1, [sp, #4]
 8004b9c:	9b04      	ldr	r3, [sp, #16]
 8004b9e:	3303      	adds	r3, #3
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	440b      	add	r3, r1
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	330f      	adds	r3, #15
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	f023 0301 	bic.w	r3, r3, #1
 8004bae:	441a      	add	r2, r3
 8004bb0:	9b01      	ldr	r3, [sp, #4]
 8004bb2:	615a      	str	r2, [r3, #20]
      mfsp->descriptors[i].offset = 0U;
 8004bb4:	9b01      	ldr	r3, [sp, #4]
 8004bb6:	9a04      	ldr	r2, [sp, #16]
 8004bb8:	3203      	adds	r2, #3
 8004bba:	2100      	movs	r1, #0
 8004bbc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
      mfsp->descriptors[i].size   = 0U;
 8004bc0:	9a01      	ldr	r2, [sp, #4]
 8004bc2:	9b04      	ldr	r3, [sp, #16]
 8004bc4:	3303      	adds	r3, #3
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	4413      	add	r3, r2
 8004bca:	2200      	movs	r2, #0
 8004bcc:	605a      	str	r2, [r3, #4]
    }

    /* On the next element.*/
    top++;
 8004bce:	9b05      	ldr	r3, [sp, #20]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	9305      	str	r3, [sp, #20]
  while (top < &mfsp->tr_ops[mfsp->tr_nops]) {
 8004bd4:	9b01      	ldr	r3, [sp, #4]
 8004bd6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8004bda:	4613      	mov	r3, r2
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004be6:	9a01      	ldr	r2, [sp, #4]
 8004be8:	4413      	add	r3, r2
 8004bea:	3304      	adds	r3, #4
 8004bec:	9a05      	ldr	r2, [sp, #20]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d398      	bcc.n	8004b24 <mfsCommitTransaction+0x84>
  }

  /* Returning to ready mode.*/
  mfsp->state = MFS_READY;
 8004bf2:	9b01      	ldr	r3, [sp, #4]
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	701a      	strb	r2, [r3, #0]

  return MFS_NO_ERROR;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	b007      	add	sp, #28
 8004bfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c02:	bf00      	nop
 8004c04:	5fae45f0 	.word	0x5fae45f0
 8004c08:	f045ae5f 	.word	0xf045ae5f
 8004c0c:	00000000 	.word	0x00000000

08004c10 <mfsRollbackTransaction>:
 *                                  @p MFS_ERROR state.
 * @retval MFS_ERR_INTERNAL         if an internal logic failure is detected.
 *
 * @api
 */
mfs_error_t mfsRollbackTransaction(MFSDriver *mfsp) {
 8004c10:	b500      	push	{lr}
 8004c12:	b085      	sub	sp, #20
 8004c14:	9001      	str	r0, [sp, #4]
  mfs_error_t err;

  osalDbgCheck(mfsp != NULL);

  if (mfsp->state != MFS_TRANSACTION) {
 8004c16:	9b01      	ldr	r3, [sp, #4]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d002      	beq.n	8004c24 <mfsRollbackTransaction+0x14>
    return MFS_ERR_INV_STATE;
 8004c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c22:	e013      	b.n	8004c4c <mfsRollbackTransaction+0x3c>
  }

  /* Returning to ready mode.*/
  mfsp->state = MFS_READY;
 8004c24:	9b01      	ldr	r3, [sp, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	701a      	strb	r2, [r3, #0]

  /* If no operations have been performed then there is no need to perform
     a garbage collection.*/
  if (mfsp->tr_nops > 0U) {
 8004c2a:	9b01      	ldr	r3, [sp, #4]
 8004c2c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d006      	beq.n	8004c42 <mfsRollbackTransaction+0x32>
    err = mfs_garbage_collect(mfsp);
 8004c34:	9801      	ldr	r0, [sp, #4]
 8004c36:	f7ff f8d3 	bl	8003de0 <mfs_garbage_collect>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f88d 300f 	strb.w	r3, [sp, #15]
 8004c40:	e002      	b.n	8004c48 <mfsRollbackTransaction+0x38>
  }
  else {
    err = MFS_NO_ERROR;
 8004c42:	2300      	movs	r3, #0
 8004c44:	f88d 300f 	strb.w	r3, [sp, #15]
  }

  return err;
 8004c48:	f99d 300f 	ldrsb.w	r3, [sp, #15]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	b005      	add	sp, #20
 8004c50:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004c60 <osalThreadSleep.lto_priv.1>:
static inline void osalThreadSleep(sysinterval_t delay) {
 8004c60:	b500      	push	{lr}
 8004c62:	b083      	sub	sp, #12
 8004c64:	9001      	str	r0, [sp, #4]
  chThdSleep(delay);
 8004c66:	9801      	ldr	r0, [sp, #4]
 8004c68:	f7fe f9aa 	bl	8002fc0 <chThdSleep>
}
 8004c6c:	b003      	add	sp, #12
 8004c6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c72:	bf00      	nop
	...

08004c80 <clear_tokens>:
/* Module local functions.                                                   */
/*===========================================================================*/

static void clear_tokens(void) {

  test_tokp = test_tokens_buffer;
 8004c80:	4b01      	ldr	r3, [pc, #4]	; (8004c88 <clear_tokens+0x8>)
 8004c82:	4a02      	ldr	r2, [pc, #8]	; (8004c8c <clear_tokens+0xc>)
 8004c84:	601a      	str	r2, [r3, #0]
}
 8004c86:	4770      	bx	lr
 8004c88:	20000a68 	.word	0x20000a68
 8004c8c:	20000a58 	.word	0x20000a58

08004c90 <print_tokens>:

static void print_tokens(void) {
 8004c90:	b500      	push	{lr}
 8004c92:	b083      	sub	sp, #12
  char *cp = test_tokens_buffer;
 8004c94:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <print_tokens+0x34>)
 8004c96:	9301      	str	r3, [sp, #4]
 8004c98:	e00b      	b.n	8004cb2 <print_tokens+0x22>

  while (cp < test_tokp)
    streamPut(test_chp, *cp++);
 8004c9a:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <print_tokens+0x38>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	4b09      	ldr	r3, [pc, #36]	; (8004cc8 <print_tokens+0x38>)
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	9b01      	ldr	r3, [sp, #4]
 8004ca8:	1c59      	adds	r1, r3, #1
 8004caa:	9101      	str	r1, [sp, #4]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4790      	blx	r2
  while (cp < test_tokp)
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <print_tokens+0x3c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	9a01      	ldr	r2, [sp, #4]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d3ee      	bcc.n	8004c9a <print_tokens+0xa>
}
 8004cbc:	b003      	add	sp, #12
 8004cbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cc2:	bf00      	nop
 8004cc4:	20000a58 	.word	0x20000a58
 8004cc8:	20000a6c 	.word	0x20000a6c
 8004ccc:	20000a68 	.word	0x20000a68

08004cd0 <execute_test>:

static void execute_test(const testcase_t *tcp) {
 8004cd0:	b500      	push	{lr}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	9001      	str	r0, [sp, #4]

  /* Initialization */
  clear_tokens();
 8004cd6:	f7ff ffd3 	bl	8004c80 <clear_tokens>
  test_local_fail = false;
 8004cda:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <execute_test+0x38>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	701a      	strb	r2, [r3, #0]

  if (tcp->setup != NULL)
 8004ce0:	9b01      	ldr	r3, [sp, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <execute_test+0x1e>
    tcp->setup();
 8004ce8:	9b01      	ldr	r3, [sp, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	4798      	blx	r3
  tcp->execute();
 8004cee:	9b01      	ldr	r3, [sp, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	4798      	blx	r3
  if (tcp->teardown != NULL)
 8004cf4:	9b01      	ldr	r3, [sp, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <execute_test+0x32>
    tcp->teardown();
 8004cfc:	9b01      	ldr	r3, [sp, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	4798      	blx	r3
}
 8004d02:	b003      	add	sp, #12
 8004d04:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d08:	20000a51 	.word	0x20000a51
 8004d0c:	00000000 	.word	0x00000000

08004d10 <print_line>:

static void print_line(void) {
 8004d10:	b500      	push	{lr}
 8004d12:	b083      	sub	sp, #12
  unsigned i;

  for (i = 0; i < 76; i++)
 8004d14:	2300      	movs	r3, #0
 8004d16:	9301      	str	r3, [sp, #4]
 8004d18:	e00b      	b.n	8004d32 <print_line+0x22>
    streamPut(test_chp, '-');
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <print_line+0x40>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	4a0b      	ldr	r2, [pc, #44]	; (8004d50 <print_line+0x40>)
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	212d      	movs	r1, #45	; 0x2d
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8004d2c:	9b01      	ldr	r3, [sp, #4]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	9b01      	ldr	r3, [sp, #4]
 8004d34:	2b4b      	cmp	r3, #75	; 0x4b
 8004d36:	d9f0      	bls.n	8004d1a <print_line+0xa>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8004d38:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <print_line+0x40>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	4a03      	ldr	r2, [pc, #12]	; (8004d50 <print_line+0x40>)
 8004d42:	6810      	ldr	r0, [r2, #0]
 8004d44:	2202      	movs	r2, #2
 8004d46:	4903      	ldr	r1, [pc, #12]	; (8004d54 <print_line+0x44>)
 8004d48:	4798      	blx	r3
}
 8004d4a:	b003      	add	sp, #12
 8004d4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d50:	20000a6c 	.word	0x20000a6c
 8004d54:	080089d0 	.word	0x080089d0
	...

08004d60 <print_fat_line>:

static void print_fat_line(void) {
 8004d60:	b500      	push	{lr}
 8004d62:	b083      	sub	sp, #12
  unsigned i;

  for (i = 0; i < 76; i++)
 8004d64:	2300      	movs	r3, #0
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	e00b      	b.n	8004d82 <print_fat_line+0x22>
    streamPut(test_chp, '=');
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <print_fat_line+0x40>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	4a0b      	ldr	r2, [pc, #44]	; (8004da0 <print_fat_line+0x40>)
 8004d74:	6812      	ldr	r2, [r2, #0]
 8004d76:	213d      	movs	r1, #61	; 0x3d
 8004d78:	4610      	mov	r0, r2
 8004d7a:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8004d7c:	9b01      	ldr	r3, [sp, #4]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	9b01      	ldr	r3, [sp, #4]
 8004d84:	2b4b      	cmp	r3, #75	; 0x4b
 8004d86:	d9f0      	bls.n	8004d6a <print_fat_line+0xa>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8004d88:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <print_fat_line+0x40>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	4a03      	ldr	r2, [pc, #12]	; (8004da0 <print_fat_line+0x40>)
 8004d92:	6810      	ldr	r0, [r2, #0]
 8004d94:	2202      	movs	r2, #2
 8004d96:	4903      	ldr	r1, [pc, #12]	; (8004da4 <print_fat_line+0x44>)
 8004d98:	4798      	blx	r3
}
 8004d9a:	b003      	add	sp, #12
 8004d9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004da0:	20000a6c 	.word	0x20000a6c
 8004da4:	080089d0 	.word	0x080089d0
	...

08004db0 <_test_fail>:

/*===========================================================================*/
/* Module exported functions.                                                */
/*===========================================================================*/

bool _test_fail(const char *msg) {
 8004db0:	b082      	sub	sp, #8
 8004db2:	9001      	str	r0, [sp, #4]

  test_local_fail      = true;
 8004db4:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <_test_fail+0x20>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	701a      	strb	r2, [r3, #0]
  test_global_fail     = true;
 8004dba:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <_test_fail+0x24>)
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	701a      	strb	r2, [r3, #0]
  test_failure_message = msg;
 8004dc0:	4a05      	ldr	r2, [pc, #20]	; (8004dd8 <_test_fail+0x28>)
 8004dc2:	9b01      	ldr	r3, [sp, #4]
 8004dc4:	6013      	str	r3, [r2, #0]
  return true;
 8004dc6:	2301      	movs	r3, #1
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	b002      	add	sp, #8
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	20000a51 	.word	0x20000a51
 8004dd4:	20000a50 	.word	0x20000a50
 8004dd8:	20000a54 	.word	0x20000a54
 8004ddc:	00000000 	.word	0x00000000

08004de0 <_test_assert>:

bool _test_assert(bool condition, const char *msg) {
 8004de0:	b500      	push	{lr}
 8004de2:	b083      	sub	sp, #12
 8004de4:	4603      	mov	r3, r0
 8004de6:	9100      	str	r1, [sp, #0]
 8004de8:	f88d 3007 	strb.w	r3, [sp, #7]

  if (!condition)
 8004dec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004df0:	f083 0301 	eor.w	r3, r3, #1
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d004      	beq.n	8004e04 <_test_assert+0x24>
    return _test_fail(msg);
 8004dfa:	9800      	ldr	r0, [sp, #0]
 8004dfc:	f7ff ffd8 	bl	8004db0 <_test_fail>
 8004e00:	4603      	mov	r3, r0
 8004e02:	e000      	b.n	8004e06 <_test_assert+0x26>
  return false;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	b003      	add	sp, #12
 8004e0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e0e:	bf00      	nop

08004e10 <test_printn>:
 *
 * @param[in] n         the number to be printed
 *
 * @api
 */
void test_printn(uint32_t n) {
 8004e10:	b500      	push	{lr}
 8004e12:	b089      	sub	sp, #36	; 0x24
 8004e14:	9001      	str	r0, [sp, #4]
  char buf[16], *p;

  if (!n)
 8004e16:	9b01      	ldr	r3, [sp, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d109      	bne.n	8004e30 <test_printn+0x20>
    streamPut(test_chp, '0');
 8004e1c:	4b1d      	ldr	r3, [pc, #116]	; (8004e94 <test_printn+0x84>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	4a1b      	ldr	r2, [pc, #108]	; (8004e94 <test_printn+0x84>)
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	2130      	movs	r1, #48	; 0x30
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4798      	blx	r3
 8004e2e:	e02e      	b.n	8004e8e <test_printn+0x7e>
  else {
    p = buf;
 8004e30:	ab03      	add	r3, sp, #12
 8004e32:	9307      	str	r3, [sp, #28]
 8004e34:	e016      	b.n	8004e64 <test_printn+0x54>
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 8004e36:	9901      	ldr	r1, [sp, #4]
 8004e38:	4b17      	ldr	r3, [pc, #92]	; (8004e98 <test_printn+0x88>)
 8004e3a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e3e:	08da      	lsrs	r2, r3, #3
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	1aca      	subs	r2, r1, r3
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	9b07      	ldr	r3, [sp, #28]
 8004e4e:	1c59      	adds	r1, r3, #1
 8004e50:	9107      	str	r1, [sp, #28]
 8004e52:	3230      	adds	r2, #48	; 0x30
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	9b01      	ldr	r3, [sp, #4]
 8004e5a:	4a0f      	ldr	r2, [pc, #60]	; (8004e98 <test_printn+0x88>)
 8004e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e60:	08db      	lsrs	r3, r3, #3
 8004e62:	9301      	str	r3, [sp, #4]
    while (n)
 8004e64:	9b01      	ldr	r3, [sp, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e5      	bne.n	8004e36 <test_printn+0x26>
 8004e6a:	e00c      	b.n	8004e86 <test_printn+0x76>
    while (p > buf)
      streamPut(test_chp, *--p);
 8004e6c:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <test_printn+0x84>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	4a07      	ldr	r2, [pc, #28]	; (8004e94 <test_printn+0x84>)
 8004e76:	6810      	ldr	r0, [r2, #0]
 8004e78:	9a07      	ldr	r2, [sp, #28]
 8004e7a:	3a01      	subs	r2, #1
 8004e7c:	9207      	str	r2, [sp, #28]
 8004e7e:	9a07      	ldr	r2, [sp, #28]
 8004e80:	7812      	ldrb	r2, [r2, #0]
 8004e82:	4611      	mov	r1, r2
 8004e84:	4798      	blx	r3
    while (p > buf)
 8004e86:	ab03      	add	r3, sp, #12
 8004e88:	9a07      	ldr	r2, [sp, #28]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d8ee      	bhi.n	8004e6c <test_printn+0x5c>
  }
}
 8004e8e:	b009      	add	sp, #36	; 0x24
 8004e90:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e94:	20000a6c 	.word	0x20000a6c
 8004e98:	cccccccd 	.word	0xcccccccd
 8004e9c:	00000000 	.word	0x00000000

08004ea0 <test_print>:
 *
 * @param[in] msgp      the message
 *
 * @api
 */
void test_print(const char *msgp) {
 8004ea0:	b500      	push	{lr}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	9001      	str	r0, [sp, #4]
 8004ea6:	e00b      	b.n	8004ec0 <test_print+0x20>

  while (*msgp)
    streamPut(test_chp, *msgp++);
 8004ea8:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <test_print+0x30>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <test_print+0x30>)
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	9b01      	ldr	r3, [sp, #4]
 8004eb6:	1c59      	adds	r1, r3, #1
 8004eb8:	9101      	str	r1, [sp, #4]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4790      	blx	r2
  while (*msgp)
 8004ec0:	9b01      	ldr	r3, [sp, #4]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1ef      	bne.n	8004ea8 <test_print+0x8>
}
 8004ec8:	b003      	add	sp, #12
 8004eca:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ece:	bf00      	nop
 8004ed0:	20000a6c 	.word	0x20000a6c
	...

08004ee0 <test_println>:
 *
 * @param[in] msgp      the message
 *
 * @api
 */
void test_println(const char *msgp) {
 8004ee0:	b500      	push	{lr}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	9001      	str	r0, [sp, #4]

  test_print(msgp);
 8004ee6:	9801      	ldr	r0, [sp, #4]
 8004ee8:	f7ff ffda 	bl	8004ea0 <test_print>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <test_println+0x24>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4a03      	ldr	r2, [pc, #12]	; (8004f04 <test_println+0x24>)
 8004ef6:	6810      	ldr	r0, [r2, #0]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	4903      	ldr	r1, [pc, #12]	; (8004f08 <test_println+0x28>)
 8004efc:	4798      	blx	r3
}
 8004efe:	b003      	add	sp, #12
 8004f00:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f04:	20000a6c 	.word	0x20000a6c
 8004f08:	080089d0 	.word	0x080089d0
 8004f0c:	00000000 	.word	0x00000000

08004f10 <test_execute>:
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 *
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8004f10:	b500      	push	{lr}
 8004f12:	b085      	sub	sp, #20
 8004f14:	9001      	str	r0, [sp, #4]
 8004f16:	9100      	str	r1, [sp, #0]
  int tseq, tcase;

  test_chp = stream;
 8004f18:	4a88      	ldr	r2, [pc, #544]	; (800513c <test_execute+0x22c>)
 8004f1a:	9b01      	ldr	r3, [sp, #4]
 8004f1c:	6013      	str	r3, [r2, #0]
  test_println("");
 8004f1e:	4888      	ldr	r0, [pc, #544]	; (8005140 <test_execute+0x230>)
 8004f20:	f7ff ffde 	bl	8004ee0 <test_println>
  if (tsp->name != NULL) {
 8004f24:	9b00      	ldr	r3, [sp, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <test_execute+0x2e>
    test_print("*** ");
 8004f2c:	4885      	ldr	r0, [pc, #532]	; (8005144 <test_execute+0x234>)
 8004f2e:	f7ff ffb7 	bl	8004ea0 <test_print>
    test_println(tsp->name);
 8004f32:	9b00      	ldr	r3, [sp, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff ffd2 	bl	8004ee0 <test_println>
 8004f3c:	e002      	b.n	8004f44 <test_execute+0x34>
  }
  else {
    test_println("*** Test Suite");
 8004f3e:	4882      	ldr	r0, [pc, #520]	; (8005148 <test_execute+0x238>)
 8004f40:	f7ff ffce 	bl	8004ee0 <test_println>
  }
  test_println("***");
 8004f44:	4881      	ldr	r0, [pc, #516]	; (800514c <test_execute+0x23c>)
 8004f46:	f7ff ffcb 	bl	8004ee0 <test_println>
  test_print("*** Compiled:     ");
 8004f4a:	4881      	ldr	r0, [pc, #516]	; (8005150 <test_execute+0x240>)
 8004f4c:	f7ff ffa8 	bl	8004ea0 <test_print>
  test_println(__DATE__ " - " __TIME__);
 8004f50:	4880      	ldr	r0, [pc, #512]	; (8005154 <test_execute+0x244>)
 8004f52:	f7ff ffc5 	bl	8004ee0 <test_println>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
 8004f56:	4880      	ldr	r0, [pc, #512]	; (8005158 <test_execute+0x248>)
 8004f58:	f7ff ffa2 	bl	8004ea0 <test_print>
  test_println(PLATFORM_NAME);
 8004f5c:	487f      	ldr	r0, [pc, #508]	; (800515c <test_execute+0x24c>)
 8004f5e:	f7ff ffbf 	bl	8004ee0 <test_println>
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
 8004f62:	487f      	ldr	r0, [pc, #508]	; (8005160 <test_execute+0x250>)
 8004f64:	f7ff ff9c 	bl	8004ea0 <test_print>
  test_println(BOARD_NAME);
 8004f68:	487e      	ldr	r0, [pc, #504]	; (8005164 <test_execute+0x254>)
 8004f6a:	f7ff ffb9 	bl	8004ee0 <test_println>
  {
    extern uint8_t __text_base__,   __text_end__,
                   __rodata_base__, __rodata_end__,
                   __data_base__,   __data_end__,
                   __bss_base__,    __bss_end__;
    test_println("***");
 8004f6e:	4877      	ldr	r0, [pc, #476]	; (800514c <test_execute+0x23c>)
 8004f70:	f7ff ffb6 	bl	8004ee0 <test_println>
    test_print("*** Text size:    ");
 8004f74:	487c      	ldr	r0, [pc, #496]	; (8005168 <test_execute+0x258>)
 8004f76:	f7ff ff93 	bl	8004ea0 <test_print>
    test_printn((uint32_t)(&__text_end__ - &__text_base__));
 8004f7a:	4a7c      	ldr	r2, [pc, #496]	; (800516c <test_execute+0x25c>)
 8004f7c:	4b7c      	ldr	r3, [pc, #496]	; (8005170 <test_execute+0x260>)
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff ff45 	bl	8004e10 <test_printn>
    test_println(" bytes");
 8004f86:	487b      	ldr	r0, [pc, #492]	; (8005174 <test_execute+0x264>)
 8004f88:	f7ff ffaa 	bl	8004ee0 <test_println>
    test_print("*** RO data size: ");
 8004f8c:	487a      	ldr	r0, [pc, #488]	; (8005178 <test_execute+0x268>)
 8004f8e:	f7ff ff87 	bl	8004ea0 <test_print>
    test_printn((uint32_t)(&__rodata_end__ - &__rodata_base__));
 8004f92:	4a7a      	ldr	r2, [pc, #488]	; (800517c <test_execute+0x26c>)
 8004f94:	4b7a      	ldr	r3, [pc, #488]	; (8005180 <test_execute+0x270>)
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff ff39 	bl	8004e10 <test_printn>
    test_println(" bytes");
 8004f9e:	4875      	ldr	r0, [pc, #468]	; (8005174 <test_execute+0x264>)
 8004fa0:	f7ff ff9e 	bl	8004ee0 <test_println>
    test_print("*** Data size:    ");
 8004fa4:	4877      	ldr	r0, [pc, #476]	; (8005184 <test_execute+0x274>)
 8004fa6:	f7ff ff7b 	bl	8004ea0 <test_print>
    test_printn((uint32_t)(&__data_end__ - &__data_base__));
 8004faa:	4a77      	ldr	r2, [pc, #476]	; (8005188 <test_execute+0x278>)
 8004fac:	4b77      	ldr	r3, [pc, #476]	; (800518c <test_execute+0x27c>)
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff ff2d 	bl	8004e10 <test_printn>
    test_println(" bytes");
 8004fb6:	486f      	ldr	r0, [pc, #444]	; (8005174 <test_execute+0x264>)
 8004fb8:	f7ff ff92 	bl	8004ee0 <test_println>
    test_print("*** BSS size:     ");
 8004fbc:	4874      	ldr	r0, [pc, #464]	; (8005190 <test_execute+0x280>)
 8004fbe:	f7ff ff6f 	bl	8004ea0 <test_print>
    test_printn((uint32_t)(&__bss_end__ - &__bss_base__));
 8004fc2:	4a74      	ldr	r2, [pc, #464]	; (8005194 <test_execute+0x284>)
 8004fc4:	4b74      	ldr	r3, [pc, #464]	; (8005198 <test_execute+0x288>)
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff ff21 	bl	8004e10 <test_printn>
    test_println(" bytes");
 8004fce:	4869      	ldr	r0, [pc, #420]	; (8005174 <test_execute+0x264>)
 8004fd0:	f7ff ff86 	bl	8004ee0 <test_println>
  }
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");
 8004fd4:	485a      	ldr	r0, [pc, #360]	; (8005140 <test_execute+0x230>)
 8004fd6:	f7ff ff83 	bl	8004ee0 <test_println>

  test_global_fail = false;
 8004fda:	4b70      	ldr	r3, [pc, #448]	; (800519c <test_execute+0x28c>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
  tseq = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	9303      	str	r3, [sp, #12]
 8004fe4:	e088      	b.n	80050f8 <test_execute+0x1e8>
  while (tsp->sequences[tseq] != NULL) {
#if TEST_CFG_SHOW_SEQUENCES == TRUE
    print_fat_line();
 8004fe6:	f7ff febb 	bl	8004d60 <print_fat_line>
    test_print("=== Test Sequence ");
 8004fea:	486d      	ldr	r0, [pc, #436]	; (80051a0 <test_execute+0x290>)
 8004fec:	f7ff ff58 	bl	8004ea0 <test_print>
    test_printn(tseq + 1);
 8004ff0:	9b03      	ldr	r3, [sp, #12]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff ff0b 	bl	8004e10 <test_printn>
    test_print(" (");
 8004ffa:	486a      	ldr	r0, [pc, #424]	; (80051a4 <test_execute+0x294>)
 8004ffc:	f7ff ff50 	bl	8004ea0 <test_print>
    test_print(tsp->sequences[tseq]->name);
 8005000:	9b00      	ldr	r3, [sp, #0]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	9b03      	ldr	r3, [sp, #12]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff ff46 	bl	8004ea0 <test_print>
    test_println(")");
 8005014:	4864      	ldr	r0, [pc, #400]	; (80051a8 <test_execute+0x298>)
 8005016:	f7ff ff63 	bl	8004ee0 <test_println>
#endif
    tcase = 0;
 800501a:	2300      	movs	r3, #0
 800501c:	9302      	str	r3, [sp, #8]
 800501e:	e05b      	b.n	80050d8 <test_execute+0x1c8>
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
      print_line();
 8005020:	f7ff fe76 	bl	8004d10 <print_line>
      test_print("--- Test Case ");
 8005024:	4861      	ldr	r0, [pc, #388]	; (80051ac <test_execute+0x29c>)
 8005026:	f7ff ff3b 	bl	8004ea0 <test_print>
      test_printn(tseq + 1);
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	3301      	adds	r3, #1
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff feee 	bl	8004e10 <test_printn>
      test_print(".");
 8005034:	485e      	ldr	r0, [pc, #376]	; (80051b0 <test_execute+0x2a0>)
 8005036:	f7ff ff33 	bl	8004ea0 <test_print>
      test_printn(tcase + 1);
 800503a:	9b02      	ldr	r3, [sp, #8]
 800503c:	3301      	adds	r3, #1
 800503e:	4618      	mov	r0, r3
 8005040:	f7ff fee6 	bl	8004e10 <test_printn>
      test_print(" (");
 8005044:	4857      	ldr	r0, [pc, #348]	; (80051a4 <test_execute+0x294>)
 8005046:	f7ff ff2b 	bl	8004ea0 <test_print>
      test_print(tsp->sequences[tseq]->cases[tcase]->name);
 800504a:	9b00      	ldr	r3, [sp, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	9b03      	ldr	r3, [sp, #12]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	9b02      	ldr	r3, [sp, #8]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff ff1c 	bl	8004ea0 <test_print>
      test_println(")");
 8005068:	484f      	ldr	r0, [pc, #316]	; (80051a8 <test_execute+0x298>)
 800506a:	f7ff ff39 	bl	8004ee0 <test_println>
#if TEST_CFG_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_CFG_DELAY_BETWEEN_TESTS);
 800506e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005072:	f7ff fdf5 	bl	8004c60 <osalThreadSleep.lto_priv.1>
#endif
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8005076:	9b00      	ldr	r3, [sp, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	9b03      	ldr	r3, [sp, #12]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	9b02      	ldr	r3, [sp, #8]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff fe1f 	bl	8004cd0 <execute_test>
      if (test_local_fail) {
 8005092:	4b48      	ldr	r3, [pc, #288]	; (80051b4 <test_execute+0x2a4>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d018      	beq.n	80050cc <test_execute+0x1bc>
        test_print("--- Result: FAILURE (#");
 800509a:	4847      	ldr	r0, [pc, #284]	; (80051b8 <test_execute+0x2a8>)
 800509c:	f7ff ff00 	bl	8004ea0 <test_print>
        test_printn(test_step);
 80050a0:	4b46      	ldr	r3, [pc, #280]	; (80051bc <test_execute+0x2ac>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff feb3 	bl	8004e10 <test_printn>
        test_print(" [");
 80050aa:	4845      	ldr	r0, [pc, #276]	; (80051c0 <test_execute+0x2b0>)
 80050ac:	f7ff fef8 	bl	8004ea0 <test_print>
        print_tokens();
 80050b0:	f7ff fdee 	bl	8004c90 <print_tokens>
        test_print("] \"");
 80050b4:	4843      	ldr	r0, [pc, #268]	; (80051c4 <test_execute+0x2b4>)
 80050b6:	f7ff fef3 	bl	8004ea0 <test_print>
        test_print(test_failure_message);
 80050ba:	4b43      	ldr	r3, [pc, #268]	; (80051c8 <test_execute+0x2b8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff feee 	bl	8004ea0 <test_print>
        test_println("\")");
 80050c4:	4841      	ldr	r0, [pc, #260]	; (80051cc <test_execute+0x2bc>)
 80050c6:	f7ff ff0b 	bl	8004ee0 <test_println>
 80050ca:	e002      	b.n	80050d2 <test_execute+0x1c2>
      }
      else {
        test_println("--- Result: SUCCESS");
 80050cc:	4840      	ldr	r0, [pc, #256]	; (80051d0 <test_execute+0x2c0>)
 80050ce:	f7ff ff07 	bl	8004ee0 <test_println>
      }
      tcase++;
 80050d2:	9b02      	ldr	r3, [sp, #8]
 80050d4:	3301      	adds	r3, #1
 80050d6:	9302      	str	r3, [sp, #8]
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 80050d8:	9b00      	ldr	r3, [sp, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	9b03      	ldr	r3, [sp, #12]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	9b02      	ldr	r3, [sp, #8]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d196      	bne.n	8005020 <test_execute+0x110>
    }
    tseq++;
 80050f2:	9b03      	ldr	r3, [sp, #12]
 80050f4:	3301      	adds	r3, #1
 80050f6:	9303      	str	r3, [sp, #12]
  while (tsp->sequences[tseq] != NULL) {
 80050f8:	9b00      	ldr	r3, [sp, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	9b03      	ldr	r3, [sp, #12]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	f47f af6e 	bne.w	8004fe6 <test_execute+0xd6>
  }
  print_line();
 800510a:	f7ff fe01 	bl	8004d10 <print_line>
  test_println("");
 800510e:	480c      	ldr	r0, [pc, #48]	; (8005140 <test_execute+0x230>)
 8005110:	f7ff fee6 	bl	8004ee0 <test_println>
  test_print("Final result: ");
 8005114:	482f      	ldr	r0, [pc, #188]	; (80051d4 <test_execute+0x2c4>)
 8005116:	f7ff fec3 	bl	8004ea0 <test_print>
  if (test_global_fail)
 800511a:	4b20      	ldr	r3, [pc, #128]	; (800519c <test_execute+0x28c>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <test_execute+0x21a>
    test_println("FAILURE");
 8005122:	482d      	ldr	r0, [pc, #180]	; (80051d8 <test_execute+0x2c8>)
 8005124:	f7ff fedc 	bl	8004ee0 <test_println>
 8005128:	e002      	b.n	8005130 <test_execute+0x220>
  else
    test_println("SUCCESS");
 800512a:	482c      	ldr	r0, [pc, #176]	; (80051dc <test_execute+0x2cc>)
 800512c:	f7ff fed8 	bl	8004ee0 <test_println>

#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END
#endif

  return (msg_t)test_global_fail;
 8005130:	4b1a      	ldr	r3, [pc, #104]	; (800519c <test_execute+0x28c>)
 8005132:	781b      	ldrb	r3, [r3, #0]
}
 8005134:	4618      	mov	r0, r3
 8005136:	b005      	add	sp, #20
 8005138:	f85d fb04 	ldr.w	pc, [sp], #4
 800513c:	20000a6c 	.word	0x20000a6c
 8005140:	080089d8 	.word	0x080089d8
 8005144:	080089d4 	.word	0x080089d4
 8005148:	080089dc 	.word	0x080089dc
 800514c:	080089ec 	.word	0x080089ec
 8005150:	080089f0 	.word	0x080089f0
 8005154:	08008a04 	.word	0x08008a04
 8005158:	08008a1c 	.word	0x08008a1c
 800515c:	08008a30 	.word	0x08008a30
 8005160:	08008a4c 	.word	0x08008a4c
 8005164:	08008a60 	.word	0x08008a60
 8005168:	08008a8c 	.word	0x08008a8c
 800516c:	080079a4 	.word	0x080079a4
 8005170:	080001a0 	.word	0x080001a0
 8005174:	08008aa0 	.word	0x08008aa0
 8005178:	08008aa8 	.word	0x08008aa8
 800517c:	080094c0 	.word	0x080094c0
 8005180:	080079a4 	.word	0x080079a4
 8005184:	08008abc 	.word	0x08008abc
 8005188:	20000800 	.word	0x20000800
 800518c:	20000800 	.word	0x20000800
 8005190:	08008ad0 	.word	0x08008ad0
 8005194:	20000fc0 	.word	0x20000fc0
 8005198:	20000800 	.word	0x20000800
 800519c:	20000a50 	.word	0x20000a50
 80051a0:	08008ae4 	.word	0x08008ae4
 80051a4:	08008af8 	.word	0x08008af8
 80051a8:	08008afc 	.word	0x08008afc
 80051ac:	08008b00 	.word	0x08008b00
 80051b0:	08008b10 	.word	0x08008b10
 80051b4:	20000a51 	.word	0x20000a51
 80051b8:	08008b14 	.word	0x08008b14
 80051bc:	20000a4c 	.word	0x20000a4c
 80051c0:	08008b2c 	.word	0x08008b2c
 80051c4:	08008b30 	.word	0x08008b30
 80051c8:	20000a54 	.word	0x20000a54
 80051cc:	08008b34 	.word	0x08008b34
 80051d0:	08008b38 	.word	0x08008b38
 80051d4:	08008b4c 	.word	0x08008b4c
 80051d8:	08008b5c 	.word	0x08008b5c
 80051dc:	08008b44 	.word	0x08008b44

080051e0 <bank_erase>:

void test_print_mfs_info(void) {

}

flash_error_t bank_erase(mfs_bank_t bank) {
 80051e0:	b500      	push	{lr}
 80051e2:	b087      	sub	sp, #28
 80051e4:	4603      	mov	r3, r0
 80051e6:	f88d 3007 	strb.w	r3, [sp, #7]
  flash_sector_t sector, n;

  if (bank == MFS_BANK_0) {
 80051ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <bank_erase+0x20>
    sector = mfscfg1.bank0_start;
 80051f2:	4b1e      	ldr	r3, [pc, #120]	; (800526c <bank_erase+0x8c>)
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	9305      	str	r3, [sp, #20]
    n      = mfscfg1.bank0_sectors;
 80051f8:	4b1c      	ldr	r3, [pc, #112]	; (800526c <bank_erase+0x8c>)
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	9304      	str	r3, [sp, #16]
 80051fe:	e02b      	b.n	8005258 <bank_erase+0x78>
  }
  else {
    sector = mfscfg1.bank1_start;
 8005200:	4b1a      	ldr	r3, [pc, #104]	; (800526c <bank_erase+0x8c>)
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	9305      	str	r3, [sp, #20]
    n      = mfscfg1.bank1_sectors;
 8005206:	4b19      	ldr	r3, [pc, #100]	; (800526c <bank_erase+0x8c>)
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	9304      	str	r3, [sp, #16]
 800520c:	e024      	b.n	8005258 <bank_erase+0x78>
  }

  while (n--) {
    flash_error_t ferr;

    ferr = flashStartEraseSector(mfscfg1.flashp, sector);
 800520e:	4b17      	ldr	r3, [pc, #92]	; (800526c <bank_erase+0x8c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	4a15      	ldr	r2, [pc, #84]	; (800526c <bank_erase+0x8c>)
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	9905      	ldr	r1, [sp, #20]
 800521c:	4610      	mov	r0, r2
 800521e:	4798      	blx	r3
 8005220:	4603      	mov	r3, r0
 8005222:	f88d 300f 	strb.w	r3, [sp, #15]
    if (ferr != FLASH_NO_ERROR)
 8005226:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <bank_erase+0x54>
      return ferr;
 800522e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005232:	e017      	b.n	8005264 <bank_erase+0x84>
    ferr = flashWaitErase(mfscfg1.flashp);
 8005234:	4b0d      	ldr	r3, [pc, #52]	; (800526c <bank_erase+0x8c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f7fb fe31 	bl	8000ea0 <flashWaitErase>
 800523e:	4603      	mov	r3, r0
 8005240:	f88d 300f 	strb.w	r3, [sp, #15]
    if (ferr != FLASH_NO_ERROR)
 8005244:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <bank_erase+0x72>
      return ferr;
 800524c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005250:	e008      	b.n	8005264 <bank_erase+0x84>
    sector++;
 8005252:	9b05      	ldr	r3, [sp, #20]
 8005254:	3301      	adds	r3, #1
 8005256:	9305      	str	r3, [sp, #20]
  while (n--) {
 8005258:	9b04      	ldr	r3, [sp, #16]
 800525a:	1e5a      	subs	r2, r3, #1
 800525c:	9204      	str	r2, [sp, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1d5      	bne.n	800520e <bank_erase+0x2e>
  }
  return FLASH_NO_ERROR;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	b007      	add	sp, #28
 8005268:	f85d fb04 	ldr.w	pc, [sp], #4
 800526c:	0800949c 	.word	0x0800949c

08005270 <bank_verify_erased>:

flash_error_t bank_verify_erased(mfs_bank_t bank) {
 8005270:	b500      	push	{lr}
 8005272:	b087      	sub	sp, #28
 8005274:	4603      	mov	r3, r0
 8005276:	f88d 3007 	strb.w	r3, [sp, #7]
  flash_sector_t sector, n;

  if (bank == MFS_BANK_0) {
 800527a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <bank_verify_erased+0x20>
    sector = mfscfg1.bank0_start;
 8005282:	4b17      	ldr	r3, [pc, #92]	; (80052e0 <bank_verify_erased+0x70>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	9305      	str	r3, [sp, #20]
    n      = mfscfg1.bank0_sectors;
 8005288:	4b15      	ldr	r3, [pc, #84]	; (80052e0 <bank_verify_erased+0x70>)
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	9304      	str	r3, [sp, #16]
 800528e:	e01c      	b.n	80052ca <bank_verify_erased+0x5a>
  }
  else {
    sector = mfscfg1.bank1_start;
 8005290:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <bank_verify_erased+0x70>)
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	9305      	str	r3, [sp, #20]
    n      = mfscfg1.bank1_sectors;
 8005296:	4b12      	ldr	r3, [pc, #72]	; (80052e0 <bank_verify_erased+0x70>)
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	9304      	str	r3, [sp, #16]
 800529c:	e015      	b.n	80052ca <bank_verify_erased+0x5a>
  }

  while (n--) {
    flash_error_t ferr;

    ferr = flashVerifyErase(mfscfg1.flashp, sector);
 800529e:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <bank_verify_erased+0x70>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	4a0e      	ldr	r2, [pc, #56]	; (80052e0 <bank_verify_erased+0x70>)
 80052a8:	6812      	ldr	r2, [r2, #0]
 80052aa:	9905      	ldr	r1, [sp, #20]
 80052ac:	4610      	mov	r0, r2
 80052ae:	4798      	blx	r3
 80052b0:	4603      	mov	r3, r0
 80052b2:	f88d 300f 	strb.w	r3, [sp, #15]
    if (ferr != FLASH_NO_ERROR)
 80052b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <bank_verify_erased+0x54>
      return ferr;
 80052be:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80052c2:	e008      	b.n	80052d6 <bank_verify_erased+0x66>
    sector++;
 80052c4:	9b05      	ldr	r3, [sp, #20]
 80052c6:	3301      	adds	r3, #1
 80052c8:	9305      	str	r3, [sp, #20]
  while (n--) {
 80052ca:	9b04      	ldr	r3, [sp, #16]
 80052cc:	1e5a      	subs	r2, r3, #1
 80052ce:	9204      	str	r2, [sp, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e4      	bne.n	800529e <bank_verify_erased+0x2e>
  }
  return FLASH_NO_ERROR;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	b007      	add	sp, #28
 80052da:	f85d fb04 	ldr.w	pc, [sp], #4
 80052de:	bf00      	nop
 80052e0:	0800949c 	.word	0x0800949c
	...

080052f0 <mfs_test_001_001_setup>:
 * - [1.1.3] Calling mfsStart() on a newly initialized flash array,
 *   MFS_NO_ERROR is expected.
 * .
 */

static void mfs_test_001_001_setup(void) {
 80052f0:	b508      	push	{r3, lr}
  mfsObjectInit(&mfs1);
 80052f2:	4802      	ldr	r0, [pc, #8]	; (80052fc <mfs_test_001_001_setup+0xc>)
 80052f4:	f7fe fff4 	bl	80042e0 <mfsObjectInit>
}
 80052f8:	bd08      	pop	{r3, pc}
 80052fa:	bf00      	nop
 80052fc:	20000a70 	.word	0x20000a70

08005300 <mfs_test_001_001_teardown>:

static void mfs_test_001_001_teardown(void) {
 8005300:	b508      	push	{r3, lr}
  mfsStop(&mfs1);
 8005302:	4802      	ldr	r0, [pc, #8]	; (800530c <mfs_test_001_001_teardown+0xc>)
 8005304:	f7ff f80c 	bl	8004320 <mfsStop>
}
 8005308:	bd08      	pop	{r3, pc}
 800530a:	bf00      	nop
 800530c:	20000a70 	.word	0x20000a70

08005310 <mfs_test_001_001_execute>:

static void mfs_test_001_001_execute(void) {
 8005310:	b500      	push	{lr}
 8005312:	b083      	sub	sp, #12

  /* [1.1.1] Erasing the flash array using a low level function.*/
  test_set_step(1);
 8005314:	4b2e      	ldr	r3, [pc, #184]	; (80053d0 <mfs_test_001_001_execute+0xc0>)
 8005316:	2201      	movs	r2, #1
 8005318:	601a      	str	r2, [r3, #0]
  {
    flash_error_t ferr;

    ferr = bank_erase(MFS_BANK_0);
 800531a:	2000      	movs	r0, #0
 800531c:	f7ff ff60 	bl	80051e0 <bank_erase>
 8005320:	4603      	mov	r3, r0
 8005322:	f88d 3007 	strb.w	r3, [sp, #7]
    test_assert(ferr == FLASH_NO_ERROR, "Bank 0 erase failure");
 8005326:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800532a:	2b00      	cmp	r3, #0
 800532c:	bf0c      	ite	eq
 800532e:	2301      	moveq	r3, #1
 8005330:	2300      	movne	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	4927      	ldr	r1, [pc, #156]	; (80053d4 <mfs_test_001_001_execute+0xc4>)
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff fd52 	bl	8004de0 <_test_assert>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d142      	bne.n	80053c8 <mfs_test_001_001_execute+0xb8>
    ferr = bank_erase(MFS_BANK_1);
 8005342:	2001      	movs	r0, #1
 8005344:	f7ff ff4c 	bl	80051e0 <bank_erase>
 8005348:	4603      	mov	r3, r0
 800534a:	f88d 3007 	strb.w	r3, [sp, #7]
    test_assert(ferr == FLASH_NO_ERROR, "Bank 1 erase failure");
 800534e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005352:	2b00      	cmp	r3, #0
 8005354:	bf0c      	ite	eq
 8005356:	2301      	moveq	r3, #1
 8005358:	2300      	movne	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	491e      	ldr	r1, [pc, #120]	; (80053d8 <mfs_test_001_001_execute+0xc8>)
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff fd3e 	bl	8004de0 <_test_assert>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d12e      	bne.n	80053c8 <mfs_test_001_001_execute+0xb8>
  }
  test_end_step(1);

  /* [1.1.2] Calling mfsStart() on an uninitialized flash array,
     MFS_NO_ERROR is expected.*/
  test_set_step(2);
 800536a:	4b19      	ldr	r3, [pc, #100]	; (80053d0 <mfs_test_001_001_execute+0xc0>)
 800536c:	2202      	movs	r2, #2
 800536e:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;

    err = mfsStart(&mfs1, &mfscfg1);
 8005370:	491a      	ldr	r1, [pc, #104]	; (80053dc <mfs_test_001_001_execute+0xcc>)
 8005372:	481b      	ldr	r0, [pc, #108]	; (80053e0 <mfs_test_001_001_execute+0xd0>)
 8005374:	f7fe ffc4 	bl	8004300 <mfsStart>
 8005378:	4603      	mov	r3, r0
 800537a:	f88d 3006 	strb.w	r3, [sp, #6]
    test_assert(err == MFS_NO_ERROR, "initialization error with erased flash");
 800537e:	f99d 3006 	ldrsb.w	r3, [sp, #6]
 8005382:	2b00      	cmp	r3, #0
 8005384:	bf0c      	ite	eq
 8005386:	2301      	moveq	r3, #1
 8005388:	2300      	movne	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	4915      	ldr	r1, [pc, #84]	; (80053e4 <mfs_test_001_001_execute+0xd4>)
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fd26 	bl	8004de0 <_test_assert>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d116      	bne.n	80053c8 <mfs_test_001_001_execute+0xb8>
  }
  test_end_step(2);

  /* [1.1.3] Calling mfsStart() on a newly initialized flash array,
     MFS_NO_ERROR is expected.*/
  test_set_step(3);
 800539a:	4b0d      	ldr	r3, [pc, #52]	; (80053d0 <mfs_test_001_001_execute+0xc0>)
 800539c:	2203      	movs	r2, #3
 800539e:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;

    err = mfsStart(&mfs1, &mfscfg1);
 80053a0:	490e      	ldr	r1, [pc, #56]	; (80053dc <mfs_test_001_001_execute+0xcc>)
 80053a2:	480f      	ldr	r0, [pc, #60]	; (80053e0 <mfs_test_001_001_execute+0xd0>)
 80053a4:	f7fe ffac 	bl	8004300 <mfsStart>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f88d 3005 	strb.w	r3, [sp, #5]
    test_assert(err == MFS_NO_ERROR, "initialization error with initialized flash");
 80053ae:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	bf0c      	ite	eq
 80053b6:	2301      	moveq	r3, #1
 80053b8:	2300      	movne	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	490a      	ldr	r1, [pc, #40]	; (80053e8 <mfs_test_001_001_execute+0xd8>)
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff fd0e 	bl	8004de0 <_test_assert>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
  }
  test_end_step(3);
}
 80053c8:	b003      	add	sp, #12
 80053ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80053ce:	bf00      	nop
 80053d0:	20000a4c 	.word	0x20000a4c
 80053d4:	08008e30 	.word	0x08008e30
 80053d8:	08008e48 	.word	0x08008e48
 80053dc:	0800949c 	.word	0x0800949c
 80053e0:	20000a70 	.word	0x20000a70
 80053e4:	08008e60 	.word	0x08008e60
 80053e8:	08008e88 	.word	0x08008e88
 80053ec:	00000000 	.word	0x00000000

080053f0 <mfs_test_001_002_setup>:
 * - [1.2.1] Exploring the records space, MFS_ERR_NOT_FOUND is expected
 *   for each index.
 * .
 */

static void mfs_test_001_002_setup(void) {
 80053f0:	b508      	push	{r3, lr}
  mfsStart(&mfs1, &mfscfg1);
 80053f2:	4902      	ldr	r1, [pc, #8]	; (80053fc <mfs_test_001_002_setup+0xc>)
 80053f4:	4802      	ldr	r0, [pc, #8]	; (8005400 <mfs_test_001_002_setup+0x10>)
 80053f6:	f7fe ff83 	bl	8004300 <mfsStart>
}
 80053fa:	bd08      	pop	{r3, pc}
 80053fc:	0800949c 	.word	0x0800949c
 8005400:	20000a70 	.word	0x20000a70
	...

08005410 <mfs_test_001_002_teardown>:

static void mfs_test_001_002_teardown(void) {
 8005410:	b508      	push	{r3, lr}
  mfsStop(&mfs1);
 8005412:	4802      	ldr	r0, [pc, #8]	; (800541c <mfs_test_001_002_teardown+0xc>)
 8005414:	f7fe ff84 	bl	8004320 <mfsStop>
}
 8005418:	bd08      	pop	{r3, pc}
 800541a:	bf00      	nop
 800541c:	20000a70 	.word	0x20000a70

08005420 <mfs_test_001_002_execute>:

static void mfs_test_001_002_execute(void) {
 8005420:	b500      	push	{lr}
 8005422:	b085      	sub	sp, #20

  /* [1.2.1] Exploring the records space, MFS_ERR_NOT_FOUND is expected
     for each index.*/
  test_set_step(1);
 8005424:	4b14      	ldr	r3, [pc, #80]	; (8005478 <mfs_test_001_002_execute+0x58>)
 8005426:	2201      	movs	r2, #1
 8005428:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    mfs_id_t id;
    size_t size;

    for (id = 1; id <= MFS_CFG_MAX_RECORDS; id++) {
 800542a:	2301      	movs	r3, #1
 800542c:	9303      	str	r3, [sp, #12]
 800542e:	e01d      	b.n	800546c <mfs_test_001_002_execute+0x4c>
      size = sizeof mfs_buffer;
 8005430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005434:	9301      	str	r3, [sp, #4]
      err = mfsReadRecord(&mfs1, id, &size, mfs_buffer);
 8005436:	aa01      	add	r2, sp, #4
 8005438:	4b10      	ldr	r3, [pc, #64]	; (800547c <mfs_test_001_002_execute+0x5c>)
 800543a:	9903      	ldr	r1, [sp, #12]
 800543c:	4810      	ldr	r0, [pc, #64]	; (8005480 <mfs_test_001_002_execute+0x60>)
 800543e:	f7fe ffaf 	bl	80043a0 <mfsReadRecord>
 8005442:	4603      	mov	r3, r0
 8005444:	f88d 300b 	strb.w	r3, [sp, #11]
      test_assert(err == MFS_ERR_NOT_FOUND,
 8005448:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 800544c:	f113 0f03 	cmn.w	r3, #3
 8005450:	bf0c      	ite	eq
 8005452:	2301      	moveq	r3, #1
 8005454:	2300      	movne	r3, #0
 8005456:	b2db      	uxtb	r3, r3
 8005458:	490a      	ldr	r1, [pc, #40]	; (8005484 <mfs_test_001_002_execute+0x64>)
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff fcc0 	bl	8004de0 <_test_assert>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d105      	bne.n	8005472 <mfs_test_001_002_execute+0x52>
    for (id = 1; id <= MFS_CFG_MAX_RECORDS; id++) {
 8005466:	9b03      	ldr	r3, [sp, #12]
 8005468:	3301      	adds	r3, #1
 800546a:	9303      	str	r3, [sp, #12]
 800546c:	9b03      	ldr	r3, [sp, #12]
 800546e:	2b20      	cmp	r3, #32
 8005470:	d9de      	bls.n	8005430 <mfs_test_001_002_execute+0x10>
                  "found a record that should not exists");
    }
  }
  test_end_step(1);
}
 8005472:	b005      	add	sp, #20
 8005474:	f85d fb04 	ldr.w	pc, [sp], #4
 8005478:	20000a4c 	.word	0x20000a4c
 800547c:	20000c74 	.word	0x20000c74
 8005480:	20000a70 	.word	0x20000a70
 8005484:	08008ec4 	.word	0x08008ec4
	...

08005490 <mfs_test_001_003_setup>:
 *   MFS_NO_ERROR is expected on erase, MFS_ERR_NOT_FOUND is expected
 *   on retrieve.
 * .
 */

static void mfs_test_001_003_setup(void) {
 8005490:	b508      	push	{r3, lr}
  mfsStart(&mfs1, &mfscfg1);
 8005492:	4902      	ldr	r1, [pc, #8]	; (800549c <mfs_test_001_003_setup+0xc>)
 8005494:	4802      	ldr	r0, [pc, #8]	; (80054a0 <mfs_test_001_003_setup+0x10>)
 8005496:	f7fe ff33 	bl	8004300 <mfsStart>
}
 800549a:	bd08      	pop	{r3, pc}
 800549c:	0800949c 	.word	0x0800949c
 80054a0:	20000a70 	.word	0x20000a70
	...

080054b0 <mfs_test_001_003_teardown>:

static void mfs_test_001_003_teardown(void) {
 80054b0:	b508      	push	{r3, lr}
  mfsStop(&mfs1);
 80054b2:	4802      	ldr	r0, [pc, #8]	; (80054bc <mfs_test_001_003_teardown+0xc>)
 80054b4:	f7fe ff34 	bl	8004320 <mfsStop>
}
 80054b8:	bd08      	pop	{r3, pc}
 80054ba:	bf00      	nop
 80054bc:	20000a70 	.word	0x20000a70

080054c0 <mfs_test_001_003_execute>:

static void mfs_test_001_003_execute(void) {
 80054c0:	b500      	push	{lr}
 80054c2:	b083      	sub	sp, #12
  size_t size;

  /* [1.3.1] The record must not already exists, MFS_ERR_NOT_FOUND is
     expected.*/
  test_set_step(1);
 80054c4:	4b7f      	ldr	r3, [pc, #508]	; (80056c4 <mfs_test_001_003_execute+0x204>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
  {
    size = sizeof mfs_buffer;
 80054ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054ce:	9300      	str	r3, [sp, #0]
    mfs_error_t err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 80054d0:	466a      	mov	r2, sp
 80054d2:	4b7d      	ldr	r3, [pc, #500]	; (80056c8 <mfs_test_001_003_execute+0x208>)
 80054d4:	2101      	movs	r1, #1
 80054d6:	487d      	ldr	r0, [pc, #500]	; (80056cc <mfs_test_001_003_execute+0x20c>)
 80054d8:	f7fe ff62 	bl	80043a0 <mfsReadRecord>
 80054dc:	4603      	mov	r3, r0
 80054de:	f88d 3007 	strb.w	r3, [sp, #7]
    test_assert(err == MFS_ERR_NOT_FOUND , "record was already present");
 80054e2:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80054e6:	f113 0f03 	cmn.w	r3, #3
 80054ea:	bf0c      	ite	eq
 80054ec:	2301      	moveq	r3, #1
 80054ee:	2300      	movne	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	4977      	ldr	r1, [pc, #476]	; (80056d0 <mfs_test_001_003_execute+0x210>)
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff fc73 	bl	8004de0 <_test_assert>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f040 80de 	bne.w	80056be <mfs_test_001_003_execute+0x1fe>
  test_end_step(1);

  /* [1.3.2] Creating the record then retrieving it again, MFS_NO_ERROR
     is expected, record content and size are compared with the
     original.*/
  test_set_step(2);
 8005502:	4b70      	ldr	r3, [pc, #448]	; (80056c4 <mfs_test_001_003_execute+0x204>)
 8005504:	2202      	movs	r2, #2
 8005506:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;

    err = mfsWriteRecord(&mfs1, 1, sizeof mfs_pattern16, mfs_pattern16);
 8005508:	4b72      	ldr	r3, [pc, #456]	; (80056d4 <mfs_test_001_003_execute+0x214>)
 800550a:	2210      	movs	r2, #16
 800550c:	2101      	movs	r1, #1
 800550e:	486f      	ldr	r0, [pc, #444]	; (80056cc <mfs_test_001_003_execute+0x20c>)
 8005510:	f7fe ffc6 	bl	80044a0 <mfsWriteRecord>
 8005514:	4603      	mov	r3, r0
 8005516:	f88d 3006 	strb.w	r3, [sp, #6]
    test_assert(err == MFS_NO_ERROR, "error creating the record");
 800551a:	f99d 3006 	ldrsb.w	r3, [sp, #6]
 800551e:	2b00      	cmp	r3, #0
 8005520:	bf0c      	ite	eq
 8005522:	2301      	moveq	r3, #1
 8005524:	2300      	movne	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	496b      	ldr	r1, [pc, #428]	; (80056d8 <mfs_test_001_003_execute+0x218>)
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff fc58 	bl	8004de0 <_test_assert>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	f040 80c3 	bne.w	80056be <mfs_test_001_003_execute+0x1fe>
    size = sizeof mfs_buffer;
 8005538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800553c:	9300      	str	r3, [sp, #0]
    err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 800553e:	466a      	mov	r2, sp
 8005540:	4b61      	ldr	r3, [pc, #388]	; (80056c8 <mfs_test_001_003_execute+0x208>)
 8005542:	2101      	movs	r1, #1
 8005544:	4861      	ldr	r0, [pc, #388]	; (80056cc <mfs_test_001_003_execute+0x20c>)
 8005546:	f7fe ff2b 	bl	80043a0 <mfsReadRecord>
 800554a:	4603      	mov	r3, r0
 800554c:	f88d 3006 	strb.w	r3, [sp, #6]
    test_assert(err == MFS_NO_ERROR, "record not found");
 8005550:	f99d 3006 	ldrsb.w	r3, [sp, #6]
 8005554:	2b00      	cmp	r3, #0
 8005556:	bf0c      	ite	eq
 8005558:	2301      	moveq	r3, #1
 800555a:	2300      	movne	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	495f      	ldr	r1, [pc, #380]	; (80056dc <mfs_test_001_003_execute+0x21c>)
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff fc3d 	bl	8004de0 <_test_assert>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	f040 80a8 	bne.w	80056be <mfs_test_001_003_execute+0x1fe>
    test_assert(size == sizeof mfs_pattern16, "unexpected record length");
 800556e:	9b00      	ldr	r3, [sp, #0]
 8005570:	2b10      	cmp	r3, #16
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	4959      	ldr	r1, [pc, #356]	; (80056e0 <mfs_test_001_003_execute+0x220>)
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff fc2f 	bl	8004de0 <_test_assert>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	f040 809a 	bne.w	80056be <mfs_test_001_003_execute+0x1fe>
    test_assert(memcmp(mfs_pattern16, mfs_buffer, size) == 0, "wrong record content");
 800558a:	9b00      	ldr	r3, [sp, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	494e      	ldr	r1, [pc, #312]	; (80056c8 <mfs_test_001_003_execute+0x208>)
 8005590:	4850      	ldr	r0, [pc, #320]	; (80056d4 <mfs_test_001_003_execute+0x214>)
 8005592:	f002 f9d7 	bl	8007944 <memcmp>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	bf0c      	ite	eq
 800559c:	2301      	moveq	r3, #1
 800559e:	2300      	movne	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	4950      	ldr	r1, [pc, #320]	; (80056e4 <mfs_test_001_003_execute+0x224>)
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff fc1b 	bl	8004de0 <_test_assert>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f040 8086 	bne.w	80056be <mfs_test_001_003_execute+0x1fe>
  test_end_step(2);

  /* [1.3.3] Updating the record then retrieving it again, MFS_NO_ERROR
     is expected, record content and size are compared with the
     original.*/
  test_set_step(3);
 80055b2:	4b44      	ldr	r3, [pc, #272]	; (80056c4 <mfs_test_001_003_execute+0x204>)
 80055b4:	2203      	movs	r2, #3
 80055b6:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;

    err = mfsWriteRecord(&mfs1, 1, sizeof mfs_pattern32, mfs_pattern32);
 80055b8:	4b4b      	ldr	r3, [pc, #300]	; (80056e8 <mfs_test_001_003_execute+0x228>)
 80055ba:	2220      	movs	r2, #32
 80055bc:	2101      	movs	r1, #1
 80055be:	4843      	ldr	r0, [pc, #268]	; (80056cc <mfs_test_001_003_execute+0x20c>)
 80055c0:	f7fe ff6e 	bl	80044a0 <mfsWriteRecord>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f88d 3005 	strb.w	r3, [sp, #5]
    test_assert(err == MFS_NO_ERROR, "error updating the record");
 80055ca:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	bf0c      	ite	eq
 80055d2:	2301      	moveq	r3, #1
 80055d4:	2300      	movne	r3, #0
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	4944      	ldr	r1, [pc, #272]	; (80056ec <mfs_test_001_003_execute+0x22c>)
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff fc00 	bl	8004de0 <_test_assert>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d16b      	bne.n	80056be <mfs_test_001_003_execute+0x1fe>
    size = sizeof mfs_buffer;
 80055e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055ea:	9300      	str	r3, [sp, #0]
    err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 80055ec:	466a      	mov	r2, sp
 80055ee:	4b36      	ldr	r3, [pc, #216]	; (80056c8 <mfs_test_001_003_execute+0x208>)
 80055f0:	2101      	movs	r1, #1
 80055f2:	4836      	ldr	r0, [pc, #216]	; (80056cc <mfs_test_001_003_execute+0x20c>)
 80055f4:	f7fe fed4 	bl	80043a0 <mfsReadRecord>
 80055f8:	4603      	mov	r3, r0
 80055fa:	f88d 3005 	strb.w	r3, [sp, #5]
    test_assert(err == MFS_NO_ERROR, "record not found");
 80055fe:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8005602:	2b00      	cmp	r3, #0
 8005604:	bf0c      	ite	eq
 8005606:	2301      	moveq	r3, #1
 8005608:	2300      	movne	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	4933      	ldr	r1, [pc, #204]	; (80056dc <mfs_test_001_003_execute+0x21c>)
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff fbe6 	bl	8004de0 <_test_assert>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d151      	bne.n	80056be <mfs_test_001_003_execute+0x1fe>
    test_assert(size == sizeof mfs_pattern32, "unexpected record length");
 800561a:	9b00      	ldr	r3, [sp, #0]
 800561c:	2b20      	cmp	r3, #32
 800561e:	bf0c      	ite	eq
 8005620:	2301      	moveq	r3, #1
 8005622:	2300      	movne	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	492e      	ldr	r1, [pc, #184]	; (80056e0 <mfs_test_001_003_execute+0x220>)
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff fbd9 	bl	8004de0 <_test_assert>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d144      	bne.n	80056be <mfs_test_001_003_execute+0x1fe>
    test_assert(memcmp(mfs_pattern32, mfs_buffer, size) == 0, "wrong record content");
 8005634:	9b00      	ldr	r3, [sp, #0]
 8005636:	461a      	mov	r2, r3
 8005638:	4923      	ldr	r1, [pc, #140]	; (80056c8 <mfs_test_001_003_execute+0x208>)
 800563a:	482b      	ldr	r0, [pc, #172]	; (80056e8 <mfs_test_001_003_execute+0x228>)
 800563c:	f002 f982 	bl	8007944 <memcmp>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	bf0c      	ite	eq
 8005646:	2301      	moveq	r3, #1
 8005648:	2300      	movne	r3, #0
 800564a:	b2db      	uxtb	r3, r3
 800564c:	4925      	ldr	r1, [pc, #148]	; (80056e4 <mfs_test_001_003_execute+0x224>)
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff fbc6 	bl	8004de0 <_test_assert>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d131      	bne.n	80056be <mfs_test_001_003_execute+0x1fe>
  test_end_step(3);

  /* [1.3.4] Erasing the record then trying to retrieve it again,
     MFS_NO_ERROR is expected on erase, MFS_ERR_NOT_FOUND is expected
     on retrieve.*/
  test_set_step(4);
 800565a:	4b1a      	ldr	r3, [pc, #104]	; (80056c4 <mfs_test_001_003_execute+0x204>)
 800565c:	2204      	movs	r2, #4
 800565e:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;

    err = mfsEraseRecord(&mfs1, 1);
 8005660:	2101      	movs	r1, #1
 8005662:	481a      	ldr	r0, [pc, #104]	; (80056cc <mfs_test_001_003_execute+0x20c>)
 8005664:	f7ff f884 	bl	8004770 <mfsEraseRecord>
 8005668:	4603      	mov	r3, r0
 800566a:	f88d 3004 	strb.w	r3, [sp, #4]
    test_assert(err == MFS_NO_ERROR, "error erasing the record");
 800566e:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	bf0c      	ite	eq
 8005676:	2301      	moveq	r3, #1
 8005678:	2300      	movne	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	491c      	ldr	r1, [pc, #112]	; (80056f0 <mfs_test_001_003_execute+0x230>)
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff fbae 	bl	8004de0 <_test_assert>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d119      	bne.n	80056be <mfs_test_001_003_execute+0x1fe>
    size = sizeof mfs_buffer;
 800568a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800568e:	9300      	str	r3, [sp, #0]
    err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 8005690:	466a      	mov	r2, sp
 8005692:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <mfs_test_001_003_execute+0x208>)
 8005694:	2101      	movs	r1, #1
 8005696:	480d      	ldr	r0, [pc, #52]	; (80056cc <mfs_test_001_003_execute+0x20c>)
 8005698:	f7fe fe82 	bl	80043a0 <mfsReadRecord>
 800569c:	4603      	mov	r3, r0
 800569e:	f88d 3004 	strb.w	r3, [sp, #4]
    test_assert(err == MFS_ERR_NOT_FOUND, "record not erased");
 80056a2:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 80056a6:	f113 0f03 	cmn.w	r3, #3
 80056aa:	bf0c      	ite	eq
 80056ac:	2301      	moveq	r3, #1
 80056ae:	2300      	movne	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	4910      	ldr	r1, [pc, #64]	; (80056f4 <mfs_test_001_003_execute+0x234>)
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff fb93 	bl	8004de0 <_test_assert>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
  }
  test_end_step(4);
}
 80056be:	b003      	add	sp, #12
 80056c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80056c4:	20000a4c 	.word	0x20000a4c
 80056c8:	20000c74 	.word	0x20000c74
 80056cc:	20000a70 	.word	0x20000a70
 80056d0:	08008efc 	.word	0x08008efc
 80056d4:	08008bf4 	.word	0x08008bf4
 80056d8:	08008f18 	.word	0x08008f18
 80056dc:	08008f34 	.word	0x08008f34
 80056e0:	08008f48 	.word	0x08008f48
 80056e4:	08008f64 	.word	0x08008f64
 80056e8:	08008c04 	.word	0x08008c04
 80056ec:	08008f7c 	.word	0x08008f7c
 80056f0:	08008f98 	.word	0x08008f98
 80056f4:	08008fb4 	.word	0x08008fb4
	...

08005700 <mfs_test_001_004_setup>:
 *   removed, MFS_NO_ERROR is expected on erase, MFS_ERR_NOT_FOUND is
 *   expected on retrieve.
 * .
 */

static void mfs_test_001_004_setup(void) {
 8005700:	b508      	push	{r3, lr}
  bank_erase(MFS_BANK_0);
 8005702:	2000      	movs	r0, #0
 8005704:	f7ff fd6c 	bl	80051e0 <bank_erase>
  bank_erase(MFS_BANK_1);
 8005708:	2001      	movs	r0, #1
 800570a:	f7ff fd69 	bl	80051e0 <bank_erase>
  mfsStart(&mfs1, &mfscfg1);
 800570e:	4902      	ldr	r1, [pc, #8]	; (8005718 <mfs_test_001_004_setup+0x18>)
 8005710:	4802      	ldr	r0, [pc, #8]	; (800571c <mfs_test_001_004_setup+0x1c>)
 8005712:	f7fe fdf5 	bl	8004300 <mfsStart>
}
 8005716:	bd08      	pop	{r3, pc}
 8005718:	0800949c 	.word	0x0800949c
 800571c:	20000a70 	.word	0x20000a70

08005720 <mfs_test_001_004_teardown>:

static void mfs_test_001_004_teardown(void) {
 8005720:	b508      	push	{r3, lr}
  mfsStop(&mfs1);
 8005722:	4802      	ldr	r0, [pc, #8]	; (800572c <mfs_test_001_004_teardown+0xc>)
 8005724:	f7fe fdfc 	bl	8004320 <mfsStop>
}
 8005728:	bd08      	pop	{r3, pc}
 800572a:	bf00      	nop
 800572c:	20000a70 	.word	0x20000a70

08005730 <mfs_test_001_004_execute>:

static void mfs_test_001_004_execute(void) {
 8005730:	b500      	push	{lr}
 8005732:	b085      	sub	sp, #20

  /* [1.4.1] Creating records 1, 2 and 3, MFS_NO_ERROR is expected.*/
  test_set_step(1);
 8005734:	4bb9      	ldr	r3, [pc, #740]	; (8005a1c <mfs_test_001_004_execute+0x2ec>)
 8005736:	2201      	movs	r2, #1
 8005738:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;

    err = mfsWriteRecord(&mfs1, 1, sizeof mfs_pattern16, mfs_pattern16);
 800573a:	4bb9      	ldr	r3, [pc, #740]	; (8005a20 <mfs_test_001_004_execute+0x2f0>)
 800573c:	2210      	movs	r2, #16
 800573e:	2101      	movs	r1, #1
 8005740:	48b8      	ldr	r0, [pc, #736]	; (8005a24 <mfs_test_001_004_execute+0x2f4>)
 8005742:	f7fe fead 	bl	80044a0 <mfsWriteRecord>
 8005746:	4603      	mov	r3, r0
 8005748:	f88d 300f 	strb.w	r3, [sp, #15]
    test_assert(err == MFS_NO_ERROR, "error creating record 1");
 800574c:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 8005750:	2b00      	cmp	r3, #0
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	49b3      	ldr	r1, [pc, #716]	; (8005a28 <mfs_test_001_004_execute+0x2f8>)
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff fb3f 	bl	8004de0 <_test_assert>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	f040 817e 	bne.w	8005a66 <mfs_test_001_004_execute+0x336>
    err = mfsWriteRecord(&mfs1, 2, sizeof mfs_pattern32, mfs_pattern32);
 800576a:	4bb0      	ldr	r3, [pc, #704]	; (8005a2c <mfs_test_001_004_execute+0x2fc>)
 800576c:	2220      	movs	r2, #32
 800576e:	2102      	movs	r1, #2
 8005770:	48ac      	ldr	r0, [pc, #688]	; (8005a24 <mfs_test_001_004_execute+0x2f4>)
 8005772:	f7fe fe95 	bl	80044a0 <mfsWriteRecord>
 8005776:	4603      	mov	r3, r0
 8005778:	f88d 300f 	strb.w	r3, [sp, #15]
    test_assert(err == MFS_NO_ERROR, "error creating record 2");
 800577c:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 8005780:	2b00      	cmp	r3, #0
 8005782:	bf0c      	ite	eq
 8005784:	2301      	moveq	r3, #1
 8005786:	2300      	movne	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	49a9      	ldr	r1, [pc, #676]	; (8005a30 <mfs_test_001_004_execute+0x300>)
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff fb27 	bl	8004de0 <_test_assert>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	f040 8166 	bne.w	8005a66 <mfs_test_001_004_execute+0x336>
    err = mfsWriteRecord(&mfs1, 3, sizeof mfs_pattern10, mfs_pattern10);
 800579a:	4ba6      	ldr	r3, [pc, #664]	; (8005a34 <mfs_test_001_004_execute+0x304>)
 800579c:	220a      	movs	r2, #10
 800579e:	2103      	movs	r1, #3
 80057a0:	48a0      	ldr	r0, [pc, #640]	; (8005a24 <mfs_test_001_004_execute+0x2f4>)
 80057a2:	f7fe fe7d 	bl	80044a0 <mfsWriteRecord>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f88d 300f 	strb.w	r3, [sp, #15]
    test_assert(err == MFS_NO_ERROR, "error creating record 3");
 80057ac:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	bf0c      	ite	eq
 80057b4:	2301      	moveq	r3, #1
 80057b6:	2300      	movne	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	499f      	ldr	r1, [pc, #636]	; (8005a38 <mfs_test_001_004_execute+0x308>)
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff fb0f 	bl	8004de0 <_test_assert>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f040 814e 	bne.w	8005a66 <mfs_test_001_004_execute+0x336>
  }
  test_end_step(1);

  /* [1.4.2] Records must exist.*/
  test_set_step(2);
 80057ca:	4b94      	ldr	r3, [pc, #592]	; (8005a1c <mfs_test_001_004_execute+0x2ec>)
 80057cc:	2202      	movs	r2, #2
 80057ce:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;

    size = sizeof mfs_buffer;
 80057d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057d4:	9300      	str	r3, [sp, #0]
    err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 80057d6:	466a      	mov	r2, sp
 80057d8:	4b98      	ldr	r3, [pc, #608]	; (8005a3c <mfs_test_001_004_execute+0x30c>)
 80057da:	2101      	movs	r1, #1
 80057dc:	4891      	ldr	r0, [pc, #580]	; (8005a24 <mfs_test_001_004_execute+0x2f4>)
 80057de:	f7fe fddf 	bl	80043a0 <mfsReadRecord>
 80057e2:	4603      	mov	r3, r0
 80057e4:	f88d 300e 	strb.w	r3, [sp, #14]
    test_assert(err == MFS_NO_ERROR, "record 0 not present");
 80057e8:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bf0c      	ite	eq
 80057f0:	2301      	moveq	r3, #1
 80057f2:	2300      	movne	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	4992      	ldr	r1, [pc, #584]	; (8005a40 <mfs_test_001_004_execute+0x310>)
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff faf1 	bl	8004de0 <_test_assert>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d000      	beq.n	8005806 <mfs_test_001_004_execute+0xd6>
 8005804:	e12f      	b.n	8005a66 <mfs_test_001_004_execute+0x336>
    size = sizeof mfs_buffer;
 8005806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800580a:	9300      	str	r3, [sp, #0]
    err = mfsReadRecord(&mfs1, 2, &size, mfs_buffer);
 800580c:	466a      	mov	r2, sp
 800580e:	4b8b      	ldr	r3, [pc, #556]	; (8005a3c <mfs_test_001_004_execute+0x30c>)
 8005810:	2102      	movs	r1, #2
 8005812:	4884      	ldr	r0, [pc, #528]	; (8005a24 <mfs_test_001_004_execute+0x2f4>)
 8005814:	f7fe fdc4 	bl	80043a0 <mfsReadRecord>
 8005818:	4603      	mov	r3, r0
 800581a:	f88d 300e 	strb.w	r3, [sp, #14]
    test_assert(err == MFS_NO_ERROR, "record 1 not present");
 800581e:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 8005822:	2b00      	cmp	r3, #0
 8005824:	bf0c      	ite	eq
 8005826:	2301      	moveq	r3, #1
 8005828:	2300      	movne	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	4985      	ldr	r1, [pc, #532]	; (8005a44 <mfs_test_001_004_execute+0x314>)
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff fad6 	bl	8004de0 <_test_assert>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d000      	beq.n	800583c <mfs_test_001_004_execute+0x10c>
    test_assert(err == MFS_NO_ERROR, "record 0 not present");
 800583a:	e114      	b.n	8005a66 <mfs_test_001_004_execute+0x336>
    size = sizeof mfs_buffer;
 800583c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005840:	9300      	str	r3, [sp, #0]
    err = mfsReadRecord(&mfs1, 3, &size, mfs_buffer);
 8005842:	466a      	mov	r2, sp
 8005844:	4b7d      	ldr	r3, [pc, #500]	; (8005a3c <mfs_test_001_004_execute+0x30c>)
 8005846:	2103      	movs	r1, #3
 8005848:	4876      	ldr	r0, [pc, #472]	; (8005a24 <mfs_test_001_004_execute+0x2f4>)
 800584a:	f7fe fda9 	bl	80043a0 <mfsReadRecord>
 800584e:	4603      	mov	r3, r0
 8005850:	f88d 300e 	strb.w	r3, [sp, #14]
    test_assert(err == MFS_NO_ERROR, "record 2 not present");
 8005854:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 8005858:	2b00      	cmp	r3, #0
 800585a:	bf0c      	ite	eq
 800585c:	2301      	moveq	r3, #1
 800585e:	2300      	movne	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	4979      	ldr	r1, [pc, #484]	; (8005a48 <mfs_test_001_004_execute+0x318>)
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff fabb 	bl	8004de0 <_test_assert>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d000      	beq.n	8005872 <mfs_test_001_004_execute+0x142>
    test_assert(err == MFS_NO_ERROR, "record 0 not present");
 8005870:	e0f9      	b.n	8005a66 <mfs_test_001_004_execute+0x336>
  }
  test_end_step(2);

  /* [1.4.3] Re-mounting, records must still exist.*/
  test_set_step(3);
 8005872:	4b6a      	ldr	r3, [pc, #424]	; (8005a1c <mfs_test_001_004_execute+0x2ec>)
 8005874:	2203      	movs	r2, #3
 8005876:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;

    err = mfsStart(&mfs1, &mfscfg1);
 8005878:	4974      	ldr	r1, [pc, #464]	; (8005a4c <mfs_test_001_004_execute+0x31c>)
 800587a:	486a      	ldr	r0, [pc, #424]	; (8005a24 <mfs_test_001_004_execute+0x2f4>)
 800587c:	f7fe fd40 	bl	8004300 <mfsStart>
 8005880:	4603      	mov	r3, r0
 8005882:	f88d 300d 	strb.w	r3, [sp, #13]
    test_assert(err == MFS_NO_ERROR, "re-mount failed");
 8005886:	f99d 300d 	ldrsb.w	r3, [sp, #13]
 800588a:	2b00      	cmp	r3, #0
 800588c:	bf0c      	ite	eq
 800588e:	2301      	moveq	r3, #1
 8005890:	2300      	movne	r3, #0
 8005892:	b2db      	uxtb	r3, r3
 8005894:	496e      	ldr	r1, [pc, #440]	; (8005a50 <mfs_test_001_004_execute+0x320>)
 8005896:	4618      	mov	r0, r3
 8005898:	f7ff faa2 	bl	8004de0 <_test_assert>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f040 80b9 	bne.w	8005a16 <mfs_test_001_004_execute+0x2e6>
    size = sizeof mfs_buffer;
 80058a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058a8:	9301      	str	r3, [sp, #4]
    err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 80058aa:	aa01      	add	r2, sp, #4
 80058ac:	4b63      	ldr	r3, [pc, #396]	; (8005a3c <mfs_test_001_004_execute+0x30c>)
 80058ae:	2101      	movs	r1, #1
 80058b0:	485c      	ldr	r0, [pc, #368]	; (8005a24 <mfs_test_001_004_execute+0x2f4>)
 80058b2:	f7fe fd75 	bl	80043a0 <mfsReadRecord>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f88d 300d 	strb.w	r3, [sp, #13]
    test_assert(err == MFS_NO_ERROR, "record 0 not present");
 80058bc:	f99d 300d 	ldrsb.w	r3, [sp, #13]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	bf0c      	ite	eq
 80058c4:	2301      	moveq	r3, #1
 80058c6:	2300      	movne	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	495d      	ldr	r1, [pc, #372]	; (8005a40 <mfs_test_001_004_execute+0x310>)
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff fa87 	bl	8004de0 <_test_assert>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d000      	beq.n	80058da <mfs_test_001_004_execute+0x1aa>
    test_assert(err == MFS_NO_ERROR, "re-mount failed");
 80058d8:	e0c5      	b.n	8005a66 <mfs_test_001_004_execute+0x336>
    size = sizeof mfs_buffer;
 80058da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058de:	9301      	str	r3, [sp, #4]
    err = mfsReadRecord(&mfs1, 2, &size, mfs_buffer);
 80058e0:	aa01      	add	r2, sp, #4
 80058e2:	4b56      	ldr	r3, [pc, #344]	; (8005a3c <mfs_test_001_004_execute+0x30c>)
 80058e4:	2102      	movs	r1, #2
 80058e6:	484f      	ldr	r0, [pc, #316]	; (8005a24 <mfs_test_001_004_execute+0x2f4>)
 80058e8:	f7fe fd5a 	bl	80043a0 <mfsReadRecord>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f88d 300d 	strb.w	r3, [sp, #13]
    test_assert(err == MFS_NO_ERROR, "record 1 not present");
 80058f2:	f99d 300d 	ldrsb.w	r3, [sp, #13]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	bf0c      	ite	eq
 80058fa:	2301      	moveq	r3, #1
 80058fc:	2300      	movne	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	4950      	ldr	r1, [pc, #320]	; (8005a44 <mfs_test_001_004_execute+0x314>)
 8005902:	4618      	mov	r0, r3
 8005904:	f7ff fa6c 	bl	8004de0 <_test_assert>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d000      	beq.n	8005910 <mfs_test_001_004_execute+0x1e0>
    test_assert(err == MFS_NO_ERROR, "re-mount failed");
 800590e:	e0aa      	b.n	8005a66 <mfs_test_001_004_execute+0x336>
    size = sizeof mfs_buffer;
 8005910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005914:	9301      	str	r3, [sp, #4]
    err = mfsReadRecord(&mfs1, 3, &size, mfs_buffer);
 8005916:	aa01      	add	r2, sp, #4
 8005918:	4b48      	ldr	r3, [pc, #288]	; (8005a3c <mfs_test_001_004_execute+0x30c>)
 800591a:	2103      	movs	r1, #3
 800591c:	4841      	ldr	r0, [pc, #260]	; (8005a24 <mfs_test_001_004_execute+0x2f4>)
 800591e:	f7fe fd3f 	bl	80043a0 <mfsReadRecord>
 8005922:	4603      	mov	r3, r0
 8005924:	f88d 300d 	strb.w	r3, [sp, #13]
    test_assert(err == MFS_NO_ERROR, "record 2 not present");
 8005928:	f99d 300d 	ldrsb.w	r3, [sp, #13]
 800592c:	2b00      	cmp	r3, #0
 800592e:	bf0c      	ite	eq
 8005930:	2301      	moveq	r3, #1
 8005932:	2300      	movne	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	4944      	ldr	r1, [pc, #272]	; (8005a48 <mfs_test_001_004_execute+0x318>)
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff fa51 	bl	8004de0 <_test_assert>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d000      	beq.n	8005946 <mfs_test_001_004_execute+0x216>
    test_assert(err == MFS_NO_ERROR, "re-mount failed");
 8005944:	e08f      	b.n	8005a66 <mfs_test_001_004_execute+0x336>
  test_end_step(3);

  /* [1.4.4] Erasing storage and verify that the records have been
     removed, MFS_NO_ERROR is expected on erase, MFS_ERR_NOT_FOUND is
     expected on retrieve.*/
  test_set_step(4);
 8005946:	4b35      	ldr	r3, [pc, #212]	; (8005a1c <mfs_test_001_004_execute+0x2ec>)
 8005948:	2204      	movs	r2, #4
 800594a:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;

    err = mfsErase(&mfs1);
 800594c:	4835      	ldr	r0, [pc, #212]	; (8005a24 <mfs_test_001_004_execute+0x2f4>)
 800594e:	f7fe fcf7 	bl	8004340 <mfsErase>
 8005952:	4603      	mov	r3, r0
 8005954:	f88d 300c 	strb.w	r3, [sp, #12]
    test_assert(err == MFS_NO_ERROR, "storage erase error");
 8005958:	f99d 300c 	ldrsb.w	r3, [sp, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	bf0c      	ite	eq
 8005960:	2301      	moveq	r3, #1
 8005962:	2300      	movne	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	493b      	ldr	r1, [pc, #236]	; (8005a54 <mfs_test_001_004_execute+0x324>)
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff fa39 	bl	8004de0 <_test_assert>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d177      	bne.n	8005a64 <mfs_test_001_004_execute+0x334>
    size = sizeof mfs_buffer;
 8005974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005978:	9302      	str	r3, [sp, #8]
    err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 800597a:	aa02      	add	r2, sp, #8
 800597c:	4b2f      	ldr	r3, [pc, #188]	; (8005a3c <mfs_test_001_004_execute+0x30c>)
 800597e:	2101      	movs	r1, #1
 8005980:	4828      	ldr	r0, [pc, #160]	; (8005a24 <mfs_test_001_004_execute+0x2f4>)
 8005982:	f7fe fd0d 	bl	80043a0 <mfsReadRecord>
 8005986:	4603      	mov	r3, r0
 8005988:	f88d 300c 	strb.w	r3, [sp, #12]
    test_assert(err == MFS_ERR_NOT_FOUND, "record 0 still present");
 800598c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
 8005990:	f113 0f03 	cmn.w	r3, #3
 8005994:	bf0c      	ite	eq
 8005996:	2301      	moveq	r3, #1
 8005998:	2300      	movne	r3, #0
 800599a:	b2db      	uxtb	r3, r3
 800599c:	492e      	ldr	r1, [pc, #184]	; (8005a58 <mfs_test_001_004_execute+0x328>)
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff fa1e 	bl	8004de0 <_test_assert>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d15d      	bne.n	8005a66 <mfs_test_001_004_execute+0x336>
    size = sizeof mfs_buffer;
 80059aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059ae:	9302      	str	r3, [sp, #8]
    err = mfsReadRecord(&mfs1, 2, &size, mfs_buffer);
 80059b0:	aa02      	add	r2, sp, #8
 80059b2:	4b22      	ldr	r3, [pc, #136]	; (8005a3c <mfs_test_001_004_execute+0x30c>)
 80059b4:	2102      	movs	r1, #2
 80059b6:	481b      	ldr	r0, [pc, #108]	; (8005a24 <mfs_test_001_004_execute+0x2f4>)
 80059b8:	f7fe fcf2 	bl	80043a0 <mfsReadRecord>
 80059bc:	4603      	mov	r3, r0
 80059be:	f88d 300c 	strb.w	r3, [sp, #12]
    test_assert(err == MFS_ERR_NOT_FOUND, "record 1 still present");
 80059c2:	f99d 300c 	ldrsb.w	r3, [sp, #12]
 80059c6:	f113 0f03 	cmn.w	r3, #3
 80059ca:	bf0c      	ite	eq
 80059cc:	2301      	moveq	r3, #1
 80059ce:	2300      	movne	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	4922      	ldr	r1, [pc, #136]	; (8005a5c <mfs_test_001_004_execute+0x32c>)
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff fa03 	bl	8004de0 <_test_assert>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d142      	bne.n	8005a66 <mfs_test_001_004_execute+0x336>
    size = sizeof mfs_buffer;
 80059e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059e4:	9302      	str	r3, [sp, #8]
    err = mfsReadRecord(&mfs1, 3, &size, mfs_buffer);
 80059e6:	aa02      	add	r2, sp, #8
 80059e8:	4b14      	ldr	r3, [pc, #80]	; (8005a3c <mfs_test_001_004_execute+0x30c>)
 80059ea:	2103      	movs	r1, #3
 80059ec:	480d      	ldr	r0, [pc, #52]	; (8005a24 <mfs_test_001_004_execute+0x2f4>)
 80059ee:	f7fe fcd7 	bl	80043a0 <mfsReadRecord>
 80059f2:	4603      	mov	r3, r0
 80059f4:	f88d 300c 	strb.w	r3, [sp, #12]
    test_assert(err == MFS_ERR_NOT_FOUND, "record 2 still present");
 80059f8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
 80059fc:	f113 0f03 	cmn.w	r3, #3
 8005a00:	bf0c      	ite	eq
 8005a02:	2301      	moveq	r3, #1
 8005a04:	2300      	movne	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	4915      	ldr	r1, [pc, #84]	; (8005a60 <mfs_test_001_004_execute+0x330>)
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff f9e8 	bl	8004de0 <_test_assert>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	e027      	b.n	8005a66 <mfs_test_001_004_execute+0x336>
    test_assert(err == MFS_NO_ERROR, "re-mount failed");
 8005a16:	bf00      	nop
 8005a18:	e025      	b.n	8005a66 <mfs_test_001_004_execute+0x336>
 8005a1a:	bf00      	nop
 8005a1c:	20000a4c 	.word	0x20000a4c
 8005a20:	08008bf4 	.word	0x08008bf4
 8005a24:	20000a70 	.word	0x20000a70
 8005a28:	08008fd8 	.word	0x08008fd8
 8005a2c:	08008c04 	.word	0x08008c04
 8005a30:	08008ff0 	.word	0x08008ff0
 8005a34:	08008c24 	.word	0x08008c24
 8005a38:	08009008 	.word	0x08009008
 8005a3c:	20000c74 	.word	0x20000c74
 8005a40:	08009020 	.word	0x08009020
 8005a44:	08009038 	.word	0x08009038
 8005a48:	08009050 	.word	0x08009050
 8005a4c:	0800949c 	.word	0x0800949c
 8005a50:	08009068 	.word	0x08009068
 8005a54:	08009078 	.word	0x08009078
 8005a58:	0800908c 	.word	0x0800908c
 8005a5c:	080090a4 	.word	0x080090a4
 8005a60:	080090bc 	.word	0x080090bc
    test_assert(err == MFS_NO_ERROR, "storage erase error");
 8005a64:	bf00      	nop
  }
  test_end_step(4);
}
 8005a66:	b005      	add	sp, #20
 8005a68:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a6c:	0000      	movs	r0, r0
	...

08005a70 <mfs_test_001_005_setup>:
 * - [1.5.3] Adding a smaller record to fill the final gap. A
 *   reinitialization is performed and MFS_NO_ERROR is expected.
 * .
 */

static void mfs_test_001_005_setup(void) {
 8005a70:	b508      	push	{r3, lr}
  mfsStart(&mfs1, &mfscfg1);
 8005a72:	4904      	ldr	r1, [pc, #16]	; (8005a84 <mfs_test_001_005_setup+0x14>)
 8005a74:	4804      	ldr	r0, [pc, #16]	; (8005a88 <mfs_test_001_005_setup+0x18>)
 8005a76:	f7fe fc43 	bl	8004300 <mfsStart>
  mfsErase(&mfs1);
 8005a7a:	4803      	ldr	r0, [pc, #12]	; (8005a88 <mfs_test_001_005_setup+0x18>)
 8005a7c:	f7fe fc60 	bl	8004340 <mfsErase>
}
 8005a80:	bd08      	pop	{r3, pc}
 8005a82:	bf00      	nop
 8005a84:	0800949c 	.word	0x0800949c
 8005a88:	20000a70 	.word	0x20000a70
 8005a8c:	00000000 	.word	0x00000000

08005a90 <mfs_test_001_005_teardown>:

static void mfs_test_001_005_teardown(void) {
 8005a90:	b508      	push	{r3, lr}
  mfsStop(&mfs1);
 8005a92:	4802      	ldr	r0, [pc, #8]	; (8005a9c <mfs_test_001_005_teardown+0xc>)
 8005a94:	f7fe fc44 	bl	8004320 <mfsStop>
}
 8005a98:	bd08      	pop	{r3, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20000a70 	.word	0x20000a70

08005aa0 <mfs_test_001_005_execute>:

static void mfs_test_001_005_execute(void) {
 8005aa0:	b500      	push	{lr}
 8005aa2:	b089      	sub	sp, #36	; 0x24

  /* [1.5.1] Filling up the storage by writing records with increasing
     IDs, MFS_NO_ERROR is expected.*/
  test_set_step(1);
 8005aa4:	4ba3      	ldr	r3, [pc, #652]	; (8005d34 <mfs_test_001_005_execute+0x294>)
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]
  {
    mfs_id_t id;
    mfs_id_t id_max = (mfscfg1.bank_size - (sizeof (mfs_bank_header_t) +
 8005aaa:	4ba3      	ldr	r3, [pc, #652]	; (8005d38 <mfs_test_001_005_execute+0x298>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	3b20      	subs	r3, #32
 8005ab0:	4aa2      	ldr	r2, [pc, #648]	; (8005d3c <mfs_test_001_005_execute+0x29c>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	09db      	lsrs	r3, r3, #7
 8005ab8:	9306      	str	r3, [sp, #24]
                                            sizeof (mfs_data_header_t))) /
                      (sizeof (mfs_data_header_t) + sizeof mfs_pattern512);

    for (id = 1; id <= id_max; id++) {
 8005aba:	2301      	movs	r3, #1
 8005abc:	9307      	str	r3, [sp, #28]
 8005abe:	e059      	b.n	8005b74 <mfs_test_001_005_execute+0xd4>
      mfs_error_t err;
      size_t size;

      err = mfsWriteRecord(&mfs1, id, sizeof mfs_pattern512, mfs_pattern512);
 8005ac0:	4b9f      	ldr	r3, [pc, #636]	; (8005d40 <mfs_test_001_005_execute+0x2a0>)
 8005ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ac6:	9907      	ldr	r1, [sp, #28]
 8005ac8:	489e      	ldr	r0, [pc, #632]	; (8005d44 <mfs_test_001_005_execute+0x2a4>)
 8005aca:	f7fe fce9 	bl	80044a0 <mfsWriteRecord>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	f88d 300a 	strb.w	r3, [sp, #10]
      test_assert(err == MFS_NO_ERROR, "error creating the record");
 8005ad4:	f99d 300a 	ldrsb.w	r3, [sp, #10]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	bf0c      	ite	eq
 8005adc:	2301      	moveq	r3, #1
 8005ade:	2300      	movne	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	4999      	ldr	r1, [pc, #612]	; (8005d48 <mfs_test_001_005_execute+0x2a8>)
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff f97b 	bl	8004de0 <_test_assert>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d000      	beq.n	8005af2 <mfs_test_001_005_execute+0x52>
 8005af0:	e11d      	b.n	8005d2e <mfs_test_001_005_execute+0x28e>
      size = sizeof mfs_buffer;
 8005af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005af6:	9301      	str	r3, [sp, #4]
      err = mfsReadRecord(&mfs1, id, &size, mfs_buffer);
 8005af8:	aa01      	add	r2, sp, #4
 8005afa:	4b94      	ldr	r3, [pc, #592]	; (8005d4c <mfs_test_001_005_execute+0x2ac>)
 8005afc:	9907      	ldr	r1, [sp, #28]
 8005afe:	4891      	ldr	r0, [pc, #580]	; (8005d44 <mfs_test_001_005_execute+0x2a4>)
 8005b00:	f7fe fc4e 	bl	80043a0 <mfsReadRecord>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f88d 300a 	strb.w	r3, [sp, #10]
      test_assert(err == MFS_NO_ERROR,
 8005b0a:	f99d 300a 	ldrsb.w	r3, [sp, #10]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bf0c      	ite	eq
 8005b12:	2301      	moveq	r3, #1
 8005b14:	2300      	movne	r3, #0
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	498d      	ldr	r1, [pc, #564]	; (8005d50 <mfs_test_001_005_execute+0x2b0>)
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff f960 	bl	8004de0 <_test_assert>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d000      	beq.n	8005b28 <mfs_test_001_005_execute+0x88>
      test_assert(err == MFS_NO_ERROR, "error creating the record");
 8005b26:	e102      	b.n	8005d2e <mfs_test_001_005_execute+0x28e>
                  "record not found");
      test_assert(size == sizeof mfs_pattern512,
 8005b28:	9b01      	ldr	r3, [sp, #4]
 8005b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b2e:	bf0c      	ite	eq
 8005b30:	2301      	moveq	r3, #1
 8005b32:	2300      	movne	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	4987      	ldr	r1, [pc, #540]	; (8005d54 <mfs_test_001_005_execute+0x2b4>)
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff f951 	bl	8004de0 <_test_assert>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d000      	beq.n	8005b46 <mfs_test_001_005_execute+0xa6>
      test_assert(err == MFS_NO_ERROR, "error creating the record");
 8005b44:	e0f3      	b.n	8005d2e <mfs_test_001_005_execute+0x28e>
                  "unexpected record length");
      test_assert(memcmp(mfs_pattern512, mfs_buffer, size) == 0,
 8005b46:	9b01      	ldr	r3, [sp, #4]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	4980      	ldr	r1, [pc, #512]	; (8005d4c <mfs_test_001_005_execute+0x2ac>)
 8005b4c:	487c      	ldr	r0, [pc, #496]	; (8005d40 <mfs_test_001_005_execute+0x2a0>)
 8005b4e:	f001 fef9 	bl	8007944 <memcmp>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	bf0c      	ite	eq
 8005b58:	2301      	moveq	r3, #1
 8005b5a:	2300      	movne	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	497e      	ldr	r1, [pc, #504]	; (8005d58 <mfs_test_001_005_execute+0x2b8>)
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff f93d 	bl	8004de0 <_test_assert>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d000      	beq.n	8005b6e <mfs_test_001_005_execute+0xce>
      test_assert(err == MFS_NO_ERROR, "error creating the record");
 8005b6c:	e0df      	b.n	8005d2e <mfs_test_001_005_execute+0x28e>
    for (id = 1; id <= id_max; id++) {
 8005b6e:	9b07      	ldr	r3, [sp, #28]
 8005b70:	3301      	adds	r3, #1
 8005b72:	9307      	str	r3, [sp, #28]
 8005b74:	9a07      	ldr	r2, [sp, #28]
 8005b76:	9b06      	ldr	r3, [sp, #24]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d9a1      	bls.n	8005ac0 <mfs_test_001_005_execute+0x20>
  }
  test_end_step(1);

  /* [1.5.2] Creating one more record, should fail, MFS_ERR_OUT_OF_MEM
     is expected.*/
  test_set_step(2);
 8005b7c:	4b6d      	ldr	r3, [pc, #436]	; (8005d34 <mfs_test_001_005_execute+0x294>)
 8005b7e:	2202      	movs	r2, #2
 8005b80:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    mfs_id_t id_max = (mfscfg1.bank_size - (sizeof (mfs_bank_header_t) +
 8005b82:	4b6d      	ldr	r3, [pc, #436]	; (8005d38 <mfs_test_001_005_execute+0x298>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	3b20      	subs	r3, #32
 8005b88:	4a6c      	ldr	r2, [pc, #432]	; (8005d3c <mfs_test_001_005_execute+0x29c>)
 8005b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8e:	09db      	lsrs	r3, r3, #7
 8005b90:	9305      	str	r3, [sp, #20]
                                            sizeof (mfs_data_header_t))) /
                      (sizeof (mfs_data_header_t) + sizeof mfs_pattern512);

    err = mfsWriteRecord(&mfs1, id_max, sizeof mfs_pattern512 , mfs_pattern512);
 8005b92:	4b6b      	ldr	r3, [pc, #428]	; (8005d40 <mfs_test_001_005_execute+0x2a0>)
 8005b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b98:	9905      	ldr	r1, [sp, #20]
 8005b9a:	486a      	ldr	r0, [pc, #424]	; (8005d44 <mfs_test_001_005_execute+0x2a4>)
 8005b9c:	f7fe fc80 	bl	80044a0 <mfsWriteRecord>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	f88d 3013 	strb.w	r3, [sp, #19]
    test_assert(err == MFS_ERR_OUT_OF_MEM, "creation didn't fail");
 8005ba6:	f99d 3013 	ldrsb.w	r3, [sp, #19]
 8005baa:	f113 0f04 	cmn.w	r3, #4
 8005bae:	bf0c      	ite	eq
 8005bb0:	2301      	moveq	r3, #1
 8005bb2:	2300      	movne	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	4969      	ldr	r1, [pc, #420]	; (8005d5c <mfs_test_001_005_execute+0x2bc>)
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7ff f911 	bl	8004de0 <_test_assert>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f040 80b4 	bne.w	8005d2e <mfs_test_001_005_execute+0x28e>
  }
  test_end_step(2);

  /* [1.5.3] Adding a smaller record to fill the final gap. A
     reinitialization is performed and MFS_NO_ERROR is expected.*/
  test_set_step(3);
 8005bc6:	4b5b      	ldr	r3, [pc, #364]	; (8005d34 <mfs_test_001_005_execute+0x294>)
 8005bc8:	2203      	movs	r2, #3
 8005bca:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t remaining;

    remaining = (size_t)flashGetSectorOffset(mfscfg1.flashp, mfscfg1.bank0_start) +
 8005bcc:	4b5a      	ldr	r3, [pc, #360]	; (8005d38 <mfs_test_001_005_execute+0x298>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a59      	ldr	r2, [pc, #356]	; (8005d38 <mfs_test_001_005_execute+0x298>)
 8005bd2:	68d2      	ldr	r2, [r2, #12]
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fb f9ca 	bl	8000f70 <flashGetSectorOffset>
 8005bdc:	4602      	mov	r2, r0
                (size_t)mfscfg1.bank_size - (size_t)mfs1.next_offset;
 8005bde:	4b56      	ldr	r3, [pc, #344]	; (8005d38 <mfs_test_001_005_execute+0x298>)
 8005be0:	689b      	ldr	r3, [r3, #8]
    remaining = (size_t)flashGetSectorOffset(mfscfg1.flashp, mfscfg1.bank0_start) +
 8005be2:	441a      	add	r2, r3
                (size_t)mfscfg1.bank_size - (size_t)mfs1.next_offset;
 8005be4:	4b57      	ldr	r3, [pc, #348]	; (8005d44 <mfs_test_001_005_execute+0x2a4>)
 8005be6:	691b      	ldr	r3, [r3, #16]
    remaining = (size_t)flashGetSectorOffset(mfscfg1.flashp, mfscfg1.bank0_start) +
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	9303      	str	r3, [sp, #12]
    test_assert(remaining >= sizeof (mfs_data_header_t), "not enough space");
 8005bec:	9b03      	ldr	r3, [sp, #12]
 8005bee:	2b0f      	cmp	r3, #15
 8005bf0:	bf8c      	ite	hi
 8005bf2:	2301      	movhi	r3, #1
 8005bf4:	2300      	movls	r3, #0
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	4959      	ldr	r1, [pc, #356]	; (8005d60 <mfs_test_001_005_execute+0x2c0>)
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff f8f0 	bl	8004de0 <_test_assert>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f040 8093 	bne.w	8005d2e <mfs_test_001_005_execute+0x28e>

    if (remaining > sizeof (mfs_data_header_t) * 2) {
 8005c08:	9b03      	ldr	r3, [sp, #12]
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	d92e      	bls.n	8005c6c <mfs_test_001_005_execute+0x1cc>
      err = mfsWriteRecord(&mfs1, MFS_CFG_MAX_RECORDS,
 8005c0e:	9b03      	ldr	r3, [sp, #12]
 8005c10:	f1a3 0220 	sub.w	r2, r3, #32
 8005c14:	4b4a      	ldr	r3, [pc, #296]	; (8005d40 <mfs_test_001_005_execute+0x2a0>)
 8005c16:	2120      	movs	r1, #32
 8005c18:	484a      	ldr	r0, [pc, #296]	; (8005d44 <mfs_test_001_005_execute+0x2a4>)
 8005c1a:	f7fe fc41 	bl	80044a0 <mfsWriteRecord>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	f88d 300b 	strb.w	r3, [sp, #11]
                           remaining - (sizeof (mfs_data_header_t) * 2),
                           mfs_pattern512);
      test_assert(err == MFS_NO_ERROR, "error filling remaining space");
 8005c24:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	bf0c      	ite	eq
 8005c2c:	2301      	moveq	r3, #1
 8005c2e:	2300      	movne	r3, #0
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	494c      	ldr	r1, [pc, #304]	; (8005d64 <mfs_test_001_005_execute+0x2c4>)
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff f8d3 	bl	8004de0 <_test_assert>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d176      	bne.n	8005d2e <mfs_test_001_005_execute+0x28e>
      err = mfsEraseRecord(&mfs1, MFS_CFG_MAX_RECORDS);
 8005c40:	2120      	movs	r1, #32
 8005c42:	4840      	ldr	r0, [pc, #256]	; (8005d44 <mfs_test_001_005_execute+0x2a4>)
 8005c44:	f7fe fd94 	bl	8004770 <mfsEraseRecord>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	f88d 300b 	strb.w	r3, [sp, #11]
      test_assert(err == MFS_NO_ERROR, "error filling remaining space");
 8005c4e:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	bf0c      	ite	eq
 8005c56:	2301      	moveq	r3, #1
 8005c58:	2300      	movne	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	4941      	ldr	r1, [pc, #260]	; (8005d64 <mfs_test_001_005_execute+0x2c4>)
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff f8be 	bl	8004de0 <_test_assert>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d02d      	beq.n	8005cc6 <mfs_test_001_005_execute+0x226>
 8005c6a:	e060      	b.n	8005d2e <mfs_test_001_005_execute+0x28e>
    }
    else {
      if (remaining == sizeof (mfs_data_header_t) * 2) {
 8005c6c:	9b03      	ldr	r3, [sp, #12]
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d114      	bne.n	8005c9c <mfs_test_001_005_execute+0x1fc>
        err = mfsEraseRecord(&mfs1, 2);
 8005c72:	2102      	movs	r1, #2
 8005c74:	4833      	ldr	r0, [pc, #204]	; (8005d44 <mfs_test_001_005_execute+0x2a4>)
 8005c76:	f7fe fd7b 	bl	8004770 <mfsEraseRecord>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	f88d 300b 	strb.w	r3, [sp, #11]
        test_assert(err == MFS_NO_ERROR, "error filling remaining space");
 8005c80:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	bf0c      	ite	eq
 8005c88:	2301      	moveq	r3, #1
 8005c8a:	2300      	movne	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	4935      	ldr	r1, [pc, #212]	; (8005d64 <mfs_test_001_005_execute+0x2c4>)
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff f8a5 	bl	8004de0 <_test_assert>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d148      	bne.n	8005d2e <mfs_test_001_005_execute+0x28e>
      }
      err = mfsEraseRecord(&mfs1, 1);
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	4829      	ldr	r0, [pc, #164]	; (8005d44 <mfs_test_001_005_execute+0x2a4>)
 8005ca0:	f7fe fd66 	bl	8004770 <mfsEraseRecord>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f88d 300b 	strb.w	r3, [sp, #11]
      test_assert(err == MFS_NO_ERROR, "error filling remaining space");
 8005caa:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	bf0c      	ite	eq
 8005cb2:	2301      	moveq	r3, #1
 8005cb4:	2300      	movne	r3, #0
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	492a      	ldr	r1, [pc, #168]	; (8005d64 <mfs_test_001_005_execute+0x2c4>)
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7ff f890 	bl	8004de0 <_test_assert>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d133      	bne.n	8005d2e <mfs_test_001_005_execute+0x28e>
    }

    remaining = (size_t)flashGetSectorOffset(mfscfg1.flashp, mfscfg1.bank0_start) +
 8005cc6:	4b1c      	ldr	r3, [pc, #112]	; (8005d38 <mfs_test_001_005_execute+0x298>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1b      	ldr	r2, [pc, #108]	; (8005d38 <mfs_test_001_005_execute+0x298>)
 8005ccc:	68d2      	ldr	r2, [r2, #12]
 8005cce:	4611      	mov	r1, r2
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fb f94d 	bl	8000f70 <flashGetSectorOffset>
 8005cd6:	4602      	mov	r2, r0
                (size_t)mfscfg1.bank_size - (size_t)mfs1.next_offset;
 8005cd8:	4b17      	ldr	r3, [pc, #92]	; (8005d38 <mfs_test_001_005_execute+0x298>)
 8005cda:	689b      	ldr	r3, [r3, #8]
    remaining = (size_t)flashGetSectorOffset(mfscfg1.flashp, mfscfg1.bank0_start) +
 8005cdc:	441a      	add	r2, r3
                (size_t)mfscfg1.bank_size - (size_t)mfs1.next_offset;
 8005cde:	4b19      	ldr	r3, [pc, #100]	; (8005d44 <mfs_test_001_005_execute+0x2a4>)
 8005ce0:	691b      	ldr	r3, [r3, #16]
    remaining = (size_t)flashGetSectorOffset(mfscfg1.flashp, mfscfg1.bank0_start) +
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	9303      	str	r3, [sp, #12]
    test_assert(remaining == 0U, "remaining space not zero");
 8005ce6:	9b03      	ldr	r3, [sp, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	bf0c      	ite	eq
 8005cec:	2301      	moveq	r3, #1
 8005cee:	2300      	movne	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	491d      	ldr	r1, [pc, #116]	; (8005d68 <mfs_test_001_005_execute+0x2c8>)
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff f873 	bl	8004de0 <_test_assert>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d116      	bne.n	8005d2e <mfs_test_001_005_execute+0x28e>

    mfsStop(&mfs1);
 8005d00:	4810      	ldr	r0, [pc, #64]	; (8005d44 <mfs_test_001_005_execute+0x2a4>)
 8005d02:	f7fe fb0d 	bl	8004320 <mfsStop>
    err = mfsStart(&mfs1, &mfscfg1);
 8005d06:	490c      	ldr	r1, [pc, #48]	; (8005d38 <mfs_test_001_005_execute+0x298>)
 8005d08:	480e      	ldr	r0, [pc, #56]	; (8005d44 <mfs_test_001_005_execute+0x2a4>)
 8005d0a:	f7fe faf9 	bl	8004300 <mfsStart>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f88d 300b 	strb.w	r3, [sp, #11]
    test_assert(err == MFS_NO_ERROR, "initialization error");
 8005d14:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	bf0c      	ite	eq
 8005d1c:	2301      	moveq	r3, #1
 8005d1e:	2300      	movne	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	4912      	ldr	r1, [pc, #72]	; (8005d6c <mfs_test_001_005_execute+0x2cc>)
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff f85b 	bl	8004de0 <_test_assert>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
  }
  test_end_step(3);
}
 8005d2e:	b009      	add	sp, #36	; 0x24
 8005d30:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d34:	20000a4c 	.word	0x20000a4c
 8005d38:	0800949c 	.word	0x0800949c
 8005d3c:	3e0f83e1 	.word	0x3e0f83e1
 8005d40:	08008c30 	.word	0x08008c30
 8005d44:	20000a70 	.word	0x20000a70
 8005d48:	08008f18 	.word	0x08008f18
 8005d4c:	20000c74 	.word	0x20000c74
 8005d50:	08008f34 	.word	0x08008f34
 8005d54:	08008f48 	.word	0x08008f48
 8005d58:	08008f64 	.word	0x08008f64
 8005d5c:	080090e4 	.word	0x080090e4
 8005d60:	080090fc 	.word	0x080090fc
 8005d64:	08009110 	.word	0x08009110
 8005d68:	08009130 	.word	0x08009130
 8005d6c:	0800914c 	.word	0x0800914c

08005d70 <mfs_test_001_006_setup>:
 * - [1.6.7] Checking for all records in the new bank, MFS_NO_ERROR is
 *   expected for each record.
 * .
 */

static void mfs_test_001_006_setup(void) {
 8005d70:	b508      	push	{r3, lr}
  mfsStart(&mfs1, &mfscfg1);
 8005d72:	4904      	ldr	r1, [pc, #16]	; (8005d84 <mfs_test_001_006_setup+0x14>)
 8005d74:	4804      	ldr	r0, [pc, #16]	; (8005d88 <mfs_test_001_006_setup+0x18>)
 8005d76:	f7fe fac3 	bl	8004300 <mfsStart>
  mfsErase(&mfs1);
 8005d7a:	4803      	ldr	r0, [pc, #12]	; (8005d88 <mfs_test_001_006_setup+0x18>)
 8005d7c:	f7fe fae0 	bl	8004340 <mfsErase>
}
 8005d80:	bd08      	pop	{r3, pc}
 8005d82:	bf00      	nop
 8005d84:	0800949c 	.word	0x0800949c
 8005d88:	20000a70 	.word	0x20000a70
 8005d8c:	00000000 	.word	0x00000000

08005d90 <mfs_test_001_006_teardown>:

static void mfs_test_001_006_teardown(void) {
 8005d90:	b508      	push	{r3, lr}
  mfsStop(&mfs1);
 8005d92:	4802      	ldr	r0, [pc, #8]	; (8005d9c <mfs_test_001_006_teardown+0xc>)
 8005d94:	f7fe fac4 	bl	8004320 <mfsStop>
}
 8005d98:	bd08      	pop	{r3, pc}
 8005d9a:	bf00      	nop
 8005d9c:	20000a70 	.word	0x20000a70

08005da0 <mfs_test_001_006_execute>:

static void mfs_test_001_006_execute(void) {
 8005da0:	b500      	push	{lr}
 8005da2:	b091      	sub	sp, #68	; 0x44

  /* [1.6.1] Filling up the storage by writing records with increasing
     IDs, MFS_NO_ERROR is expected.*/
  test_set_step(1);
 8005da4:	4ba3      	ldr	r3, [pc, #652]	; (8006034 <mfs_test_001_006_execute+0x294>)
 8005da6:	2201      	movs	r2, #1
 8005da8:	601a      	str	r2, [r3, #0]
  {
    mfs_id_t id;
    mfs_id_t id_max = (mfscfg1.bank_size - (sizeof (mfs_bank_header_t) +
 8005daa:	4ba3      	ldr	r3, [pc, #652]	; (8006038 <mfs_test_001_006_execute+0x298>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	3b20      	subs	r3, #32
 8005db0:	4aa2      	ldr	r2, [pc, #648]	; (800603c <mfs_test_001_006_execute+0x29c>)
 8005db2:	fba2 2303 	umull	r2, r3, r2, r3
 8005db6:	09db      	lsrs	r3, r3, #7
 8005db8:	930c      	str	r3, [sp, #48]	; 0x30
                                            sizeof (mfs_data_header_t))) /
                      (sizeof (mfs_data_header_t) + sizeof mfs_pattern512);

    for (id = 1; id <= id_max; id++) {
 8005dba:	2301      	movs	r3, #1
 8005dbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dbe:	e059      	b.n	8005e74 <mfs_test_001_006_execute+0xd4>
      mfs_error_t err;
      size_t size;

      err = mfsWriteRecord(&mfs1, id, sizeof mfs_pattern512, mfs_pattern512);
 8005dc0:	4b9f      	ldr	r3, [pc, #636]	; (8006040 <mfs_test_001_006_execute+0x2a0>)
 8005dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005dc8:	489e      	ldr	r0, [pc, #632]	; (8006044 <mfs_test_001_006_execute+0x2a4>)
 8005dca:	f7fe fb69 	bl	80044a0 <mfsWriteRecord>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	f88d 301d 	strb.w	r3, [sp, #29]
      test_assert(err == MFS_NO_ERROR, "error creating the record");
 8005dd4:	f99d 301d 	ldrsb.w	r3, [sp, #29]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	bf0c      	ite	eq
 8005ddc:	2301      	moveq	r3, #1
 8005dde:	2300      	movne	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	4999      	ldr	r1, [pc, #612]	; (8006048 <mfs_test_001_006_execute+0x2a8>)
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fe fffb 	bl	8004de0 <_test_assert>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d000      	beq.n	8005df2 <mfs_test_001_006_execute+0x52>
 8005df0:	e30a      	b.n	8006408 <mfs_test_001_006_execute+0x668>
      size = sizeof mfs_buffer;
 8005df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005df6:	9304      	str	r3, [sp, #16]
      err = mfsReadRecord(&mfs1, id, &size, mfs_buffer);
 8005df8:	aa04      	add	r2, sp, #16
 8005dfa:	4b94      	ldr	r3, [pc, #592]	; (800604c <mfs_test_001_006_execute+0x2ac>)
 8005dfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005dfe:	4891      	ldr	r0, [pc, #580]	; (8006044 <mfs_test_001_006_execute+0x2a4>)
 8005e00:	f7fe face 	bl	80043a0 <mfsReadRecord>
 8005e04:	4603      	mov	r3, r0
 8005e06:	f88d 301d 	strb.w	r3, [sp, #29]
      test_assert(err == MFS_NO_ERROR,
 8005e0a:	f99d 301d 	ldrsb.w	r3, [sp, #29]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	bf0c      	ite	eq
 8005e12:	2301      	moveq	r3, #1
 8005e14:	2300      	movne	r3, #0
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	498d      	ldr	r1, [pc, #564]	; (8006050 <mfs_test_001_006_execute+0x2b0>)
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fe ffe0 	bl	8004de0 <_test_assert>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d000      	beq.n	8005e28 <mfs_test_001_006_execute+0x88>
      test_assert(err == MFS_NO_ERROR, "error creating the record");
 8005e26:	e2ef      	b.n	8006408 <mfs_test_001_006_execute+0x668>
                  "record not found");
      test_assert(size == sizeof mfs_pattern512,
 8005e28:	9b04      	ldr	r3, [sp, #16]
 8005e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e2e:	bf0c      	ite	eq
 8005e30:	2301      	moveq	r3, #1
 8005e32:	2300      	movne	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	4987      	ldr	r1, [pc, #540]	; (8006054 <mfs_test_001_006_execute+0x2b4>)
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe ffd1 	bl	8004de0 <_test_assert>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d000      	beq.n	8005e46 <mfs_test_001_006_execute+0xa6>
      test_assert(err == MFS_NO_ERROR, "error creating the record");
 8005e44:	e2e0      	b.n	8006408 <mfs_test_001_006_execute+0x668>
                  "unexpected record length");
      test_assert(memcmp(mfs_pattern512, mfs_buffer, size) == 0,
 8005e46:	9b04      	ldr	r3, [sp, #16]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4980      	ldr	r1, [pc, #512]	; (800604c <mfs_test_001_006_execute+0x2ac>)
 8005e4c:	487c      	ldr	r0, [pc, #496]	; (8006040 <mfs_test_001_006_execute+0x2a0>)
 8005e4e:	f001 fd79 	bl	8007944 <memcmp>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	bf0c      	ite	eq
 8005e58:	2301      	moveq	r3, #1
 8005e5a:	2300      	movne	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	497e      	ldr	r1, [pc, #504]	; (8006058 <mfs_test_001_006_execute+0x2b8>)
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fe ffbd 	bl	8004de0 <_test_assert>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d000      	beq.n	8005e6e <mfs_test_001_006_execute+0xce>
      test_assert(err == MFS_NO_ERROR, "error creating the record");
 8005e6c:	e2cc      	b.n	8006408 <mfs_test_001_006_execute+0x668>
    for (id = 1; id <= id_max; id++) {
 8005e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e70:	3301      	adds	r3, #1
 8005e72:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d9a1      	bls.n	8005dc0 <mfs_test_001_006_execute+0x20>
    }
  }
  test_end_step(1);

  /* [1.6.2] Erasing one record, MFS_NO_ERROR is expected.*/
  test_set_step(2);
 8005e7c:	4b6d      	ldr	r3, [pc, #436]	; (8006034 <mfs_test_001_006_execute+0x294>)
 8005e7e:	2202      	movs	r2, #2
 8005e80:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;

    err = mfsEraseRecord(&mfs1, 1);
 8005e82:	2101      	movs	r1, #1
 8005e84:	486f      	ldr	r0, [pc, #444]	; (8006044 <mfs_test_001_006_execute+0x2a4>)
 8005e86:	f7fe fc73 	bl	8004770 <mfsEraseRecord>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    test_assert(err == MFS_NO_ERROR, "error erasing the record");
 8005e90:	f99d 302f 	ldrsb.w	r3, [sp, #47]	; 0x2f
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bf0c      	ite	eq
 8005e98:	2301      	moveq	r3, #1
 8005e9a:	2300      	movne	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	496f      	ldr	r1, [pc, #444]	; (800605c <mfs_test_001_006_execute+0x2bc>)
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fe ff9d 	bl	8004de0 <_test_assert>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d000      	beq.n	8005eae <mfs_test_001_006_execute+0x10e>
 8005eac:	e2ac      	b.n	8006408 <mfs_test_001_006_execute+0x668>
    size = sizeof mfs_buffer;
 8005eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eb2:	9300      	str	r3, [sp, #0]
    err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 8005eb4:	466a      	mov	r2, sp
 8005eb6:	4b65      	ldr	r3, [pc, #404]	; (800604c <mfs_test_001_006_execute+0x2ac>)
 8005eb8:	2101      	movs	r1, #1
 8005eba:	4862      	ldr	r0, [pc, #392]	; (8006044 <mfs_test_001_006_execute+0x2a4>)
 8005ebc:	f7fe fa70 	bl	80043a0 <mfsReadRecord>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    test_assert(err == MFS_ERR_NOT_FOUND, "record not erased");
 8005ec6:	f99d 302f 	ldrsb.w	r3, [sp, #47]	; 0x2f
 8005eca:	f113 0f03 	cmn.w	r3, #3
 8005ece:	bf0c      	ite	eq
 8005ed0:	2301      	moveq	r3, #1
 8005ed2:	2300      	movne	r3, #0
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	4962      	ldr	r1, [pc, #392]	; (8006060 <mfs_test_001_006_execute+0x2c0>)
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fe ff81 	bl	8004de0 <_test_assert>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d000      	beq.n	8005ee6 <mfs_test_001_006_execute+0x146>
    test_assert(err == MFS_NO_ERROR, "error erasing the record");
 8005ee4:	e290      	b.n	8006408 <mfs_test_001_006_execute+0x668>
  test_end_step(2);

  /* [1.6.3] Writing one more record triggers garbage collection,
     MFS_WARN_GC is expected, KS state is checked for correctness after
     the operation.*/
  test_set_step(3);
 8005ee6:	4b53      	ldr	r3, [pc, #332]	; (8006034 <mfs_test_001_006_execute+0x294>)
 8005ee8:	2203      	movs	r2, #3
 8005eea:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;

    test_assert(mfs1.current_counter == 1, "not first instance");
 8005eec:	4b55      	ldr	r3, [pc, #340]	; (8006044 <mfs_test_001_006_execute+0x2a4>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	bf0c      	ite	eq
 8005ef4:	2301      	moveq	r3, #1
 8005ef6:	2300      	movne	r3, #0
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	495a      	ldr	r1, [pc, #360]	; (8006064 <mfs_test_001_006_execute+0x2c4>)
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fe ff6f 	bl	8004de0 <_test_assert>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f040 827c 	bne.w	8006402 <mfs_test_001_006_execute+0x662>
    err = mfsWriteRecord(&mfs1, 1, sizeof mfs_pattern512, mfs_pattern512);
 8005f0a:	4b4d      	ldr	r3, [pc, #308]	; (8006040 <mfs_test_001_006_execute+0x2a0>)
 8005f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f10:	2101      	movs	r1, #1
 8005f12:	484c      	ldr	r0, [pc, #304]	; (8006044 <mfs_test_001_006_execute+0x2a4>)
 8005f14:	f7fe fac4 	bl	80044a0 <mfsWriteRecord>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    test_assert(err == MFS_WARN_GC, "error creating the record");
 8005f1e:	f99d 302e 	ldrsb.w	r3, [sp, #46]	; 0x2e
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	bf0c      	ite	eq
 8005f26:	2301      	moveq	r3, #1
 8005f28:	2300      	movne	r3, #0
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	4946      	ldr	r1, [pc, #280]	; (8006048 <mfs_test_001_006_execute+0x2a8>)
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe ff56 	bl	8004de0 <_test_assert>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d000      	beq.n	8005f3c <mfs_test_001_006_execute+0x19c>
    test_assert(mfs1.current_counter == 1, "not first instance");
 8005f3a:	e265      	b.n	8006408 <mfs_test_001_006_execute+0x668>
    test_assert(mfs1.current_counter == 2, "not second instance");
 8005f3c:	4b41      	ldr	r3, [pc, #260]	; (8006044 <mfs_test_001_006_execute+0x2a4>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	bf0c      	ite	eq
 8005f44:	2301      	moveq	r3, #1
 8005f46:	2300      	movne	r3, #0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	4947      	ldr	r1, [pc, #284]	; (8006068 <mfs_test_001_006_execute+0x2c8>)
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fe ff47 	bl	8004de0 <_test_assert>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d000      	beq.n	8005f5a <mfs_test_001_006_execute+0x1ba>
    test_assert(mfs1.current_counter == 1, "not first instance");
 8005f58:	e256      	b.n	8006408 <mfs_test_001_006_execute+0x668>
    size = sizeof mfs_buffer;
 8005f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f5e:	9301      	str	r3, [sp, #4]
    err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 8005f60:	aa01      	add	r2, sp, #4
 8005f62:	4b3a      	ldr	r3, [pc, #232]	; (800604c <mfs_test_001_006_execute+0x2ac>)
 8005f64:	2101      	movs	r1, #1
 8005f66:	4837      	ldr	r0, [pc, #220]	; (8006044 <mfs_test_001_006_execute+0x2a4>)
 8005f68:	f7fe fa1a 	bl	80043a0 <mfsReadRecord>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    test_assert(err == MFS_NO_ERROR, "record not found");
 8005f72:	f99d 302e 	ldrsb.w	r3, [sp, #46]	; 0x2e
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bf0c      	ite	eq
 8005f7a:	2301      	moveq	r3, #1
 8005f7c:	2300      	movne	r3, #0
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	4933      	ldr	r1, [pc, #204]	; (8006050 <mfs_test_001_006_execute+0x2b0>)
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fe ff2c 	bl	8004de0 <_test_assert>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d000      	beq.n	8005f90 <mfs_test_001_006_execute+0x1f0>
    test_assert(mfs1.current_counter == 1, "not first instance");
 8005f8e:	e23b      	b.n	8006408 <mfs_test_001_006_execute+0x668>
    test_assert(size == sizeof mfs_pattern512, "unexpected record length");
 8005f90:	9b01      	ldr	r3, [sp, #4]
 8005f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f96:	bf0c      	ite	eq
 8005f98:	2301      	moveq	r3, #1
 8005f9a:	2300      	movne	r3, #0
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	492d      	ldr	r1, [pc, #180]	; (8006054 <mfs_test_001_006_execute+0x2b4>)
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fe ff1d 	bl	8004de0 <_test_assert>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d000      	beq.n	8005fae <mfs_test_001_006_execute+0x20e>
    test_assert(mfs1.current_counter == 1, "not first instance");
 8005fac:	e22c      	b.n	8006408 <mfs_test_001_006_execute+0x668>
    test_assert(memcmp(mfs_pattern512, mfs_buffer, size) == 0,
 8005fae:	9b01      	ldr	r3, [sp, #4]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4926      	ldr	r1, [pc, #152]	; (800604c <mfs_test_001_006_execute+0x2ac>)
 8005fb4:	4822      	ldr	r0, [pc, #136]	; (8006040 <mfs_test_001_006_execute+0x2a0>)
 8005fb6:	f001 fcc5 	bl	8007944 <memcmp>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	bf0c      	ite	eq
 8005fc0:	2301      	moveq	r3, #1
 8005fc2:	2300      	movne	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	4924      	ldr	r1, [pc, #144]	; (8006058 <mfs_test_001_006_execute+0x2b8>)
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fe ff09 	bl	8004de0 <_test_assert>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d000      	beq.n	8005fd6 <mfs_test_001_006_execute+0x236>
    test_assert(mfs1.current_counter == 1, "not first instance");
 8005fd4:	e218      	b.n	8006408 <mfs_test_001_006_execute+0x668>
                "wrong record content");
    test_assert(mfs1.current_bank == MFS_BANK_1, "unexpected bank");
 8005fd6:	4b1b      	ldr	r3, [pc, #108]	; (8006044 <mfs_test_001_006_execute+0x2a4>)
 8005fd8:	7a1b      	ldrb	r3, [r3, #8]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	bf0c      	ite	eq
 8005fde:	2301      	moveq	r3, #1
 8005fe0:	2300      	movne	r3, #0
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	4921      	ldr	r1, [pc, #132]	; (800606c <mfs_test_001_006_execute+0x2cc>)
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fe fefa 	bl	8004de0 <_test_assert>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d000      	beq.n	8005ff4 <mfs_test_001_006_execute+0x254>
    test_assert(mfs1.current_counter == 1, "not first instance");
 8005ff2:	e209      	b.n	8006408 <mfs_test_001_006_execute+0x668>
    test_assert(bank_verify_erased(MFS_BANK_0) == FLASH_NO_ERROR, "bank 0 not erased");
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	f7ff f93b 	bl	8005270 <bank_verify_erased>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bf0c      	ite	eq
 8006000:	2301      	moveq	r3, #1
 8006002:	2300      	movne	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	491a      	ldr	r1, [pc, #104]	; (8006070 <mfs_test_001_006_execute+0x2d0>)
 8006008:	4618      	mov	r0, r3
 800600a:	f7fe fee9 	bl	8004de0 <_test_assert>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d000      	beq.n	8006016 <mfs_test_001_006_execute+0x276>
    test_assert(mfs1.current_counter == 1, "not first instance");
 8006014:	e1f8      	b.n	8006408 <mfs_test_001_006_execute+0x668>
  }
  test_end_step(3);

  /* [1.6.4] Checking for all records in the new bank, MFS_NOERROR is
     expected for each record.*/
  test_set_step(4);
 8006016:	4b07      	ldr	r3, [pc, #28]	; (8006034 <mfs_test_001_006_execute+0x294>)
 8006018:	2204      	movs	r2, #4
 800601a:	601a      	str	r2, [r3, #0]
  {
    mfs_id_t id;
    mfs_id_t id_max = (mfscfg1.bank_size - (sizeof (mfs_bank_header_t) +
 800601c:	4b06      	ldr	r3, [pc, #24]	; (8006038 <mfs_test_001_006_execute+0x298>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	3b20      	subs	r3, #32
 8006022:	4a06      	ldr	r2, [pc, #24]	; (800603c <mfs_test_001_006_execute+0x29c>)
 8006024:	fba2 2303 	umull	r2, r3, r2, r3
 8006028:	09db      	lsrs	r3, r3, #7
 800602a:	930a      	str	r3, [sp, #40]	; 0x28
                                            sizeof (mfs_data_header_t))) /
                      (sizeof (mfs_data_header_t) + sizeof mfs_pattern512);

    for (id = 1; id <= MFS_CFG_MAX_RECORDS; id++) {
 800602c:	2301      	movs	r3, #1
 800602e:	930e      	str	r3, [sp, #56]	; 0x38
 8006030:	e081      	b.n	8006136 <mfs_test_001_006_execute+0x396>
 8006032:	bf00      	nop
 8006034:	20000a4c 	.word	0x20000a4c
 8006038:	0800949c 	.word	0x0800949c
 800603c:	3e0f83e1 	.word	0x3e0f83e1
 8006040:	08008c30 	.word	0x08008c30
 8006044:	20000a70 	.word	0x20000a70
 8006048:	08008f18 	.word	0x08008f18
 800604c:	20000c74 	.word	0x20000c74
 8006050:	08008f34 	.word	0x08008f34
 8006054:	08008f48 	.word	0x08008f48
 8006058:	08008f64 	.word	0x08008f64
 800605c:	08008f98 	.word	0x08008f98
 8006060:	08008fb4 	.word	0x08008fb4
 8006064:	08009174 	.word	0x08009174
 8006068:	08009188 	.word	0x08009188
 800606c:	0800919c 	.word	0x0800919c
 8006070:	080091ac 	.word	0x080091ac
      mfs_error_t err;
      size_t size;

      if (id <= id_max) {
 8006074:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006078:	429a      	cmp	r2, r3
 800607a:	d83d      	bhi.n	80060f8 <mfs_test_001_006_execute+0x358>
        size = sizeof mfs_buffer;
 800607c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006080:	9305      	str	r3, [sp, #20]
        err = mfsReadRecord(&mfs1, id, &size, mfs_buffer);
 8006082:	aa05      	add	r2, sp, #20
 8006084:	4baa      	ldr	r3, [pc, #680]	; (8006330 <mfs_test_001_006_execute+0x590>)
 8006086:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006088:	48aa      	ldr	r0, [pc, #680]	; (8006334 <mfs_test_001_006_execute+0x594>)
 800608a:	f7fe f989 	bl	80043a0 <mfsReadRecord>
 800608e:	4603      	mov	r3, r0
 8006090:	f88d 301e 	strb.w	r3, [sp, #30]
        test_assert(err == MFS_NO_ERROR, "record not found");
 8006094:	f99d 301e 	ldrsb.w	r3, [sp, #30]
 8006098:	2b00      	cmp	r3, #0
 800609a:	bf0c      	ite	eq
 800609c:	2301      	moveq	r3, #1
 800609e:	2300      	movne	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	49a5      	ldr	r1, [pc, #660]	; (8006338 <mfs_test_001_006_execute+0x598>)
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fe fe9b 	bl	8004de0 <_test_assert>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d000      	beq.n	80060b2 <mfs_test_001_006_execute+0x312>
 80060b0:	e1aa      	b.n	8006408 <mfs_test_001_006_execute+0x668>
        test_assert(size == sizeof mfs_pattern512, "unexpected record length");
 80060b2:	9b05      	ldr	r3, [sp, #20]
 80060b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b8:	bf0c      	ite	eq
 80060ba:	2301      	moveq	r3, #1
 80060bc:	2300      	movne	r3, #0
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	499e      	ldr	r1, [pc, #632]	; (800633c <mfs_test_001_006_execute+0x59c>)
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fe fe8c 	bl	8004de0 <_test_assert>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d000      	beq.n	80060d0 <mfs_test_001_006_execute+0x330>
        test_assert(err == MFS_NO_ERROR, "record not found");
 80060ce:	e19b      	b.n	8006408 <mfs_test_001_006_execute+0x668>
        test_assert(memcmp(mfs_pattern512, mfs_buffer, size) == 0,
 80060d0:	9b05      	ldr	r3, [sp, #20]
 80060d2:	461a      	mov	r2, r3
 80060d4:	4996      	ldr	r1, [pc, #600]	; (8006330 <mfs_test_001_006_execute+0x590>)
 80060d6:	489a      	ldr	r0, [pc, #616]	; (8006340 <mfs_test_001_006_execute+0x5a0>)
 80060d8:	f001 fc34 	bl	8007944 <memcmp>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	bf0c      	ite	eq
 80060e2:	2301      	moveq	r3, #1
 80060e4:	2300      	movne	r3, #0
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	4996      	ldr	r1, [pc, #600]	; (8006344 <mfs_test_001_006_execute+0x5a4>)
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fe fe78 	bl	8004de0 <_test_assert>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d01c      	beq.n	8006130 <mfs_test_001_006_execute+0x390>
        test_assert(err == MFS_NO_ERROR, "record not found");
 80060f6:	e187      	b.n	8006408 <mfs_test_001_006_execute+0x668>
                    "wrong record content");
      }
      else {
        size = sizeof mfs_buffer;
 80060f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060fc:	9305      	str	r3, [sp, #20]
        err = mfsReadRecord(&mfs1, id, &size, mfs_buffer);
 80060fe:	aa05      	add	r2, sp, #20
 8006100:	4b8b      	ldr	r3, [pc, #556]	; (8006330 <mfs_test_001_006_execute+0x590>)
 8006102:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006104:	488b      	ldr	r0, [pc, #556]	; (8006334 <mfs_test_001_006_execute+0x594>)
 8006106:	f7fe f94b 	bl	80043a0 <mfsReadRecord>
 800610a:	4603      	mov	r3, r0
 800610c:	f88d 301e 	strb.w	r3, [sp, #30]
        test_assert(err == MFS_ERR_NOT_FOUND, "found unexpected record");
 8006110:	f99d 301e 	ldrsb.w	r3, [sp, #30]
 8006114:	f113 0f03 	cmn.w	r3, #3
 8006118:	bf0c      	ite	eq
 800611a:	2301      	moveq	r3, #1
 800611c:	2300      	movne	r3, #0
 800611e:	b2db      	uxtb	r3, r3
 8006120:	4989      	ldr	r1, [pc, #548]	; (8006348 <mfs_test_001_006_execute+0x5a8>)
 8006122:	4618      	mov	r0, r3
 8006124:	f7fe fe5c 	bl	8004de0 <_test_assert>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d000      	beq.n	8006130 <mfs_test_001_006_execute+0x390>
        test_assert(err == MFS_NO_ERROR, "record not found");
 800612e:	e16b      	b.n	8006408 <mfs_test_001_006_execute+0x668>
    for (id = 1; id <= MFS_CFG_MAX_RECORDS; id++) {
 8006130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006132:	3301      	adds	r3, #1
 8006134:	930e      	str	r3, [sp, #56]	; 0x38
 8006136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006138:	2b20      	cmp	r3, #32
 800613a:	d99b      	bls.n	8006074 <mfs_test_001_006_execute+0x2d4>
    }
  }
  test_end_step(4);

  /* [1.6.5] Erasing one record, MFS_NO_ERROR is expected.*/
  test_set_step(5);
 800613c:	4b83      	ldr	r3, [pc, #524]	; (800634c <mfs_test_001_006_execute+0x5ac>)
 800613e:	2205      	movs	r2, #5
 8006140:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;

    err = mfsEraseRecord(&mfs1, 1);
 8006142:	2101      	movs	r1, #1
 8006144:	487b      	ldr	r0, [pc, #492]	; (8006334 <mfs_test_001_006_execute+0x594>)
 8006146:	f7fe fb13 	bl	8004770 <mfsEraseRecord>
 800614a:	4603      	mov	r3, r0
 800614c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    test_assert(err == MFS_NO_ERROR, "error erasing the record");
 8006150:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
 8006154:	2b00      	cmp	r3, #0
 8006156:	bf0c      	ite	eq
 8006158:	2301      	moveq	r3, #1
 800615a:	2300      	movne	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	497c      	ldr	r1, [pc, #496]	; (8006350 <mfs_test_001_006_execute+0x5b0>)
 8006160:	4618      	mov	r0, r3
 8006162:	f7fe fe3d 	bl	8004de0 <_test_assert>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d000      	beq.n	800616e <mfs_test_001_006_execute+0x3ce>
 800616c:	e14c      	b.n	8006408 <mfs_test_001_006_execute+0x668>
    size = sizeof mfs_buffer;
 800616e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006172:	9302      	str	r3, [sp, #8]
    err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 8006174:	aa02      	add	r2, sp, #8
 8006176:	4b6e      	ldr	r3, [pc, #440]	; (8006330 <mfs_test_001_006_execute+0x590>)
 8006178:	2101      	movs	r1, #1
 800617a:	486e      	ldr	r0, [pc, #440]	; (8006334 <mfs_test_001_006_execute+0x594>)
 800617c:	f7fe f910 	bl	80043a0 <mfsReadRecord>
 8006180:	4603      	mov	r3, r0
 8006182:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    test_assert(err == MFS_ERR_NOT_FOUND, "record not erased");
 8006186:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
 800618a:	f113 0f03 	cmn.w	r3, #3
 800618e:	bf0c      	ite	eq
 8006190:	2301      	moveq	r3, #1
 8006192:	2300      	movne	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	496f      	ldr	r1, [pc, #444]	; (8006354 <mfs_test_001_006_execute+0x5b4>)
 8006198:	4618      	mov	r0, r3
 800619a:	f7fe fe21 	bl	8004de0 <_test_assert>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d000      	beq.n	80061a6 <mfs_test_001_006_execute+0x406>
    test_assert(err == MFS_NO_ERROR, "error erasing the record");
 80061a4:	e130      	b.n	8006408 <mfs_test_001_006_execute+0x668>
  test_end_step(5);

  /* [1.6.6] Writing one more record triggers garbage collection,
     MFS_WARN_GC is expected, MFS object state is checked for
     correctness after the operation.*/
  test_set_step(6);
 80061a6:	4b69      	ldr	r3, [pc, #420]	; (800634c <mfs_test_001_006_execute+0x5ac>)
 80061a8:	2206      	movs	r2, #6
 80061aa:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;

    test_assert(mfs1.current_counter == 2, "not second instance");
 80061ac:	4b61      	ldr	r3, [pc, #388]	; (8006334 <mfs_test_001_006_execute+0x594>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	bf0c      	ite	eq
 80061b4:	2301      	moveq	r3, #1
 80061b6:	2300      	movne	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	4967      	ldr	r1, [pc, #412]	; (8006358 <mfs_test_001_006_execute+0x5b8>)
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fe fe0f 	bl	8004de0 <_test_assert>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f040 811e 	bne.w	8006406 <mfs_test_001_006_execute+0x666>
    err = mfsWriteRecord(&mfs1, 1, sizeof mfs_pattern512, mfs_pattern512);
 80061ca:	4b5d      	ldr	r3, [pc, #372]	; (8006340 <mfs_test_001_006_execute+0x5a0>)
 80061cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061d0:	2101      	movs	r1, #1
 80061d2:	4858      	ldr	r0, [pc, #352]	; (8006334 <mfs_test_001_006_execute+0x594>)
 80061d4:	f7fe f964 	bl	80044a0 <mfsWriteRecord>
 80061d8:	4603      	mov	r3, r0
 80061da:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    test_assert(err == MFS_WARN_GC, "error creating the record");
 80061de:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	bf0c      	ite	eq
 80061e6:	2301      	moveq	r3, #1
 80061e8:	2300      	movne	r3, #0
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	495b      	ldr	r1, [pc, #364]	; (800635c <mfs_test_001_006_execute+0x5bc>)
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe fdf6 	bl	8004de0 <_test_assert>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d000      	beq.n	80061fc <mfs_test_001_006_execute+0x45c>
    test_assert(mfs1.current_counter == 2, "not second instance");
 80061fa:	e105      	b.n	8006408 <mfs_test_001_006_execute+0x668>
    test_assert(mfs1.current_counter == 3, "not third instance");
 80061fc:	4b4d      	ldr	r3, [pc, #308]	; (8006334 <mfs_test_001_006_execute+0x594>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	2b03      	cmp	r3, #3
 8006202:	bf0c      	ite	eq
 8006204:	2301      	moveq	r3, #1
 8006206:	2300      	movne	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	4955      	ldr	r1, [pc, #340]	; (8006360 <mfs_test_001_006_execute+0x5c0>)
 800620c:	4618      	mov	r0, r3
 800620e:	f7fe fde7 	bl	8004de0 <_test_assert>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d000      	beq.n	800621a <mfs_test_001_006_execute+0x47a>
    test_assert(mfs1.current_counter == 2, "not second instance");
 8006218:	e0f6      	b.n	8006408 <mfs_test_001_006_execute+0x668>
    size = sizeof mfs_buffer;
 800621a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800621e:	9303      	str	r3, [sp, #12]
    err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 8006220:	aa03      	add	r2, sp, #12
 8006222:	4b43      	ldr	r3, [pc, #268]	; (8006330 <mfs_test_001_006_execute+0x590>)
 8006224:	2101      	movs	r1, #1
 8006226:	4843      	ldr	r0, [pc, #268]	; (8006334 <mfs_test_001_006_execute+0x594>)
 8006228:	f7fe f8ba 	bl	80043a0 <mfsReadRecord>
 800622c:	4603      	mov	r3, r0
 800622e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    test_assert(err == MFS_NO_ERROR, "record not found");
 8006232:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
 8006236:	2b00      	cmp	r3, #0
 8006238:	bf0c      	ite	eq
 800623a:	2301      	moveq	r3, #1
 800623c:	2300      	movne	r3, #0
 800623e:	b2db      	uxtb	r3, r3
 8006240:	493d      	ldr	r1, [pc, #244]	; (8006338 <mfs_test_001_006_execute+0x598>)
 8006242:	4618      	mov	r0, r3
 8006244:	f7fe fdcc 	bl	8004de0 <_test_assert>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d000      	beq.n	8006250 <mfs_test_001_006_execute+0x4b0>
    test_assert(mfs1.current_counter == 2, "not second instance");
 800624e:	e0db      	b.n	8006408 <mfs_test_001_006_execute+0x668>
    test_assert(size == sizeof mfs_pattern512, "unexpected record length");
 8006250:	9b03      	ldr	r3, [sp, #12]
 8006252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006256:	bf0c      	ite	eq
 8006258:	2301      	moveq	r3, #1
 800625a:	2300      	movne	r3, #0
 800625c:	b2db      	uxtb	r3, r3
 800625e:	4937      	ldr	r1, [pc, #220]	; (800633c <mfs_test_001_006_execute+0x59c>)
 8006260:	4618      	mov	r0, r3
 8006262:	f7fe fdbd 	bl	8004de0 <_test_assert>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d000      	beq.n	800626e <mfs_test_001_006_execute+0x4ce>
    test_assert(mfs1.current_counter == 2, "not second instance");
 800626c:	e0cc      	b.n	8006408 <mfs_test_001_006_execute+0x668>
    test_assert(memcmp(mfs_pattern512, mfs_buffer, size) == 0,
 800626e:	9b03      	ldr	r3, [sp, #12]
 8006270:	461a      	mov	r2, r3
 8006272:	492f      	ldr	r1, [pc, #188]	; (8006330 <mfs_test_001_006_execute+0x590>)
 8006274:	4832      	ldr	r0, [pc, #200]	; (8006340 <mfs_test_001_006_execute+0x5a0>)
 8006276:	f001 fb65 	bl	8007944 <memcmp>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	bf0c      	ite	eq
 8006280:	2301      	moveq	r3, #1
 8006282:	2300      	movne	r3, #0
 8006284:	b2db      	uxtb	r3, r3
 8006286:	492f      	ldr	r1, [pc, #188]	; (8006344 <mfs_test_001_006_execute+0x5a4>)
 8006288:	4618      	mov	r0, r3
 800628a:	f7fe fda9 	bl	8004de0 <_test_assert>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d000      	beq.n	8006296 <mfs_test_001_006_execute+0x4f6>
    test_assert(mfs1.current_counter == 2, "not second instance");
 8006294:	e0b8      	b.n	8006408 <mfs_test_001_006_execute+0x668>
                "wrong record content");
    test_assert(mfs1.current_bank == MFS_BANK_0, "unexpected bank");
 8006296:	4b27      	ldr	r3, [pc, #156]	; (8006334 <mfs_test_001_006_execute+0x594>)
 8006298:	7a1b      	ldrb	r3, [r3, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	bf0c      	ite	eq
 800629e:	2301      	moveq	r3, #1
 80062a0:	2300      	movne	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	492f      	ldr	r1, [pc, #188]	; (8006364 <mfs_test_001_006_execute+0x5c4>)
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe fd9a 	bl	8004de0 <_test_assert>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d000      	beq.n	80062b4 <mfs_test_001_006_execute+0x514>
    test_assert(mfs1.current_counter == 2, "not second instance");
 80062b2:	e0a9      	b.n	8006408 <mfs_test_001_006_execute+0x668>
    test_assert(bank_verify_erased(MFS_BANK_1) == FLASH_NO_ERROR, "bank 1 not erased");
 80062b4:	2001      	movs	r0, #1
 80062b6:	f7fe ffdb 	bl	8005270 <bank_verify_erased>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	bf0c      	ite	eq
 80062c0:	2301      	moveq	r3, #1
 80062c2:	2300      	movne	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	4928      	ldr	r1, [pc, #160]	; (8006368 <mfs_test_001_006_execute+0x5c8>)
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fe fd89 	bl	8004de0 <_test_assert>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d000      	beq.n	80062d6 <mfs_test_001_006_execute+0x536>
    test_assert(mfs1.current_counter == 2, "not second instance");
 80062d4:	e098      	b.n	8006408 <mfs_test_001_006_execute+0x668>
  }
  test_end_step(6);

  /* [1.6.7] Checking for all records in the new bank, MFS_NO_ERROR is
     expected for each record.*/
  test_set_step(7);
 80062d6:	4b1d      	ldr	r3, [pc, #116]	; (800634c <mfs_test_001_006_execute+0x5ac>)
 80062d8:	2207      	movs	r2, #7
 80062da:	601a      	str	r2, [r3, #0]
  {
    mfs_id_t id;
    mfs_id_t id_max = (mfscfg1.bank_size - (sizeof (mfs_bank_header_t) +
 80062dc:	4b23      	ldr	r3, [pc, #140]	; (800636c <mfs_test_001_006_execute+0x5cc>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	3b20      	subs	r3, #32
 80062e2:	4a23      	ldr	r2, [pc, #140]	; (8006370 <mfs_test_001_006_execute+0x5d0>)
 80062e4:	fba2 2303 	umull	r2, r3, r2, r3
 80062e8:	09db      	lsrs	r3, r3, #7
 80062ea:	9308      	str	r3, [sp, #32]
                                            sizeof (mfs_data_header_t))) /
                      (sizeof (mfs_data_header_t) + sizeof mfs_pattern512);

    for (id = 1; id <= MFS_CFG_MAX_RECORDS; id++) {
 80062ec:	2301      	movs	r3, #1
 80062ee:	930d      	str	r3, [sp, #52]	; 0x34
 80062f0:	e082      	b.n	80063f8 <mfs_test_001_006_execute+0x658>
      mfs_error_t err;
      size_t size;

      if (id <= id_max) {
 80062f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062f4:	9b08      	ldr	r3, [sp, #32]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d85f      	bhi.n	80063ba <mfs_test_001_006_execute+0x61a>
        size = sizeof mfs_buffer;
 80062fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062fe:	9306      	str	r3, [sp, #24]
        err = mfsReadRecord(&mfs1, id, &size, mfs_buffer);
 8006300:	aa06      	add	r2, sp, #24
 8006302:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <mfs_test_001_006_execute+0x590>)
 8006304:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006306:	480b      	ldr	r0, [pc, #44]	; (8006334 <mfs_test_001_006_execute+0x594>)
 8006308:	f7fe f84a 	bl	80043a0 <mfsReadRecord>
 800630c:	4603      	mov	r3, r0
 800630e:	f88d 301f 	strb.w	r3, [sp, #31]
        test_assert(err == MFS_NO_ERROR, "record not found");
 8006312:	f99d 301f 	ldrsb.w	r3, [sp, #31]
 8006316:	2b00      	cmp	r3, #0
 8006318:	bf0c      	ite	eq
 800631a:	2301      	moveq	r3, #1
 800631c:	2300      	movne	r3, #0
 800631e:	b2db      	uxtb	r3, r3
 8006320:	4905      	ldr	r1, [pc, #20]	; (8006338 <mfs_test_001_006_execute+0x598>)
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe fd5c 	bl	8004de0 <_test_assert>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d022      	beq.n	8006374 <mfs_test_001_006_execute+0x5d4>
 800632e:	e06b      	b.n	8006408 <mfs_test_001_006_execute+0x668>
 8006330:	20000c74 	.word	0x20000c74
 8006334:	20000a70 	.word	0x20000a70
 8006338:	08008f34 	.word	0x08008f34
 800633c:	08008f48 	.word	0x08008f48
 8006340:	08008c30 	.word	0x08008c30
 8006344:	08008f64 	.word	0x08008f64
 8006348:	080091c0 	.word	0x080091c0
 800634c:	20000a4c 	.word	0x20000a4c
 8006350:	08008f98 	.word	0x08008f98
 8006354:	08008fb4 	.word	0x08008fb4
 8006358:	08009188 	.word	0x08009188
 800635c:	08008f18 	.word	0x08008f18
 8006360:	080091d8 	.word	0x080091d8
 8006364:	0800919c 	.word	0x0800919c
 8006368:	080091ec 	.word	0x080091ec
 800636c:	0800949c 	.word	0x0800949c
 8006370:	3e0f83e1 	.word	0x3e0f83e1
        test_assert(size == sizeof mfs_pattern512, "unexpected record length");
 8006374:	9b06      	ldr	r3, [sp, #24]
 8006376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800637a:	bf0c      	ite	eq
 800637c:	2301      	moveq	r3, #1
 800637e:	2300      	movne	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	4923      	ldr	r1, [pc, #140]	; (8006410 <mfs_test_001_006_execute+0x670>)
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe fd2b 	bl	8004de0 <_test_assert>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d000      	beq.n	8006392 <mfs_test_001_006_execute+0x5f2>
        test_assert(err == MFS_NO_ERROR, "record not found");
 8006390:	e03a      	b.n	8006408 <mfs_test_001_006_execute+0x668>
        test_assert(memcmp(mfs_pattern512, mfs_buffer, size) == 0,
 8006392:	9b06      	ldr	r3, [sp, #24]
 8006394:	461a      	mov	r2, r3
 8006396:	491f      	ldr	r1, [pc, #124]	; (8006414 <mfs_test_001_006_execute+0x674>)
 8006398:	481f      	ldr	r0, [pc, #124]	; (8006418 <mfs_test_001_006_execute+0x678>)
 800639a:	f001 fad3 	bl	8007944 <memcmp>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	bf0c      	ite	eq
 80063a4:	2301      	moveq	r3, #1
 80063a6:	2300      	movne	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	491c      	ldr	r1, [pc, #112]	; (800641c <mfs_test_001_006_execute+0x67c>)
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fe fd17 	bl	8004de0 <_test_assert>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d01c      	beq.n	80063f2 <mfs_test_001_006_execute+0x652>
        test_assert(err == MFS_NO_ERROR, "record not found");
 80063b8:	e026      	b.n	8006408 <mfs_test_001_006_execute+0x668>
                    "wrong record content");
      }
      else {
        size = sizeof mfs_buffer;
 80063ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063be:	9306      	str	r3, [sp, #24]
        err = mfsReadRecord(&mfs1, id, &size, mfs_buffer);
 80063c0:	aa06      	add	r2, sp, #24
 80063c2:	4b14      	ldr	r3, [pc, #80]	; (8006414 <mfs_test_001_006_execute+0x674>)
 80063c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80063c6:	4816      	ldr	r0, [pc, #88]	; (8006420 <mfs_test_001_006_execute+0x680>)
 80063c8:	f7fd ffea 	bl	80043a0 <mfsReadRecord>
 80063cc:	4603      	mov	r3, r0
 80063ce:	f88d 301f 	strb.w	r3, [sp, #31]
        test_assert(err == MFS_ERR_NOT_FOUND, "found unexpected record");
 80063d2:	f99d 301f 	ldrsb.w	r3, [sp, #31]
 80063d6:	f113 0f03 	cmn.w	r3, #3
 80063da:	bf0c      	ite	eq
 80063dc:	2301      	moveq	r3, #1
 80063de:	2300      	movne	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	4910      	ldr	r1, [pc, #64]	; (8006424 <mfs_test_001_006_execute+0x684>)
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fe fcfb 	bl	8004de0 <_test_assert>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d000      	beq.n	80063f2 <mfs_test_001_006_execute+0x652>
        test_assert(err == MFS_NO_ERROR, "record not found");
 80063f0:	e00a      	b.n	8006408 <mfs_test_001_006_execute+0x668>
    for (id = 1; id <= MFS_CFG_MAX_RECORDS; id++) {
 80063f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063f4:	3301      	adds	r3, #1
 80063f6:	930d      	str	r3, [sp, #52]	; 0x34
 80063f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	f67f af79 	bls.w	80062f2 <mfs_test_001_006_execute+0x552>
 8006400:	e002      	b.n	8006408 <mfs_test_001_006_execute+0x668>
    test_assert(mfs1.current_counter == 1, "not first instance");
 8006402:	bf00      	nop
 8006404:	e000      	b.n	8006408 <mfs_test_001_006_execute+0x668>
    test_assert(mfs1.current_counter == 2, "not second instance");
 8006406:	bf00      	nop
      }
    }
  }
  test_end_step(7);
}
 8006408:	b011      	add	sp, #68	; 0x44
 800640a:	f85d fb04 	ldr.w	pc, [sp], #4
 800640e:	bf00      	nop
 8006410:	08008f48 	.word	0x08008f48
 8006414:	20000c74 	.word	0x20000c74
 8006418:	08008c30 	.word	0x08008c30
 800641c:	08008f64 	.word	0x08008f64
 8006420:	20000a70 	.word	0x20000a70
 8006424:	080091c0 	.word	0x080091c0
	...

08006430 <mfs_test_001_007_setup>:
 *   MFS_WARN_GC is expected, KS state is checked for correctness after
 *   the operation.
 * .
 */

static void mfs_test_001_007_setup(void) {
 8006430:	b508      	push	{r3, lr}
  mfsStart(&mfs1, &mfscfg1);
 8006432:	4904      	ldr	r1, [pc, #16]	; (8006444 <mfs_test_001_007_setup+0x14>)
 8006434:	4804      	ldr	r0, [pc, #16]	; (8006448 <mfs_test_001_007_setup+0x18>)
 8006436:	f7fd ff63 	bl	8004300 <mfsStart>
  mfsErase(&mfs1);
 800643a:	4803      	ldr	r0, [pc, #12]	; (8006448 <mfs_test_001_007_setup+0x18>)
 800643c:	f7fd ff80 	bl	8004340 <mfsErase>
}
 8006440:	bd08      	pop	{r3, pc}
 8006442:	bf00      	nop
 8006444:	0800949c 	.word	0x0800949c
 8006448:	20000a70 	.word	0x20000a70
 800644c:	00000000 	.word	0x00000000

08006450 <mfs_test_001_007_teardown>:

static void mfs_test_001_007_teardown(void) {
 8006450:	b508      	push	{r3, lr}
  mfsStop(&mfs1);
 8006452:	4802      	ldr	r0, [pc, #8]	; (800645c <mfs_test_001_007_teardown+0xc>)
 8006454:	f7fd ff64 	bl	8004320 <mfsStop>
}
 8006458:	bd08      	pop	{r3, pc}
 800645a:	bf00      	nop
 800645c:	20000a70 	.word	0x20000a70

08006460 <mfs_test_001_007_execute>:

static void mfs_test_001_007_execute(void) {
 8006460:	b500      	push	{lr}
 8006462:	b08b      	sub	sp, #44	; 0x2c

  /* [1.7.1] Filling up the storage by writing records with increasing
     IDs, MFS_NO_ERROR is expected.*/
  test_set_step(1);
 8006464:	4b9a      	ldr	r3, [pc, #616]	; (80066d0 <mfs_test_001_007_execute+0x270>)
 8006466:	2201      	movs	r2, #1
 8006468:	601a      	str	r2, [r3, #0]
  {
    mfs_id_t id;
    mfs_id_t id_max = (mfscfg1.bank_size - (sizeof (mfs_bank_header_t) +
 800646a:	4b9a      	ldr	r3, [pc, #616]	; (80066d4 <mfs_test_001_007_execute+0x274>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	3b20      	subs	r3, #32
 8006470:	4a99      	ldr	r2, [pc, #612]	; (80066d8 <mfs_test_001_007_execute+0x278>)
 8006472:	fba2 2303 	umull	r2, r3, r2, r3
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	9307      	str	r3, [sp, #28]
                                            sizeof (mfs_data_header_t))) /
                      (sizeof (mfs_data_header_t) + (sizeof mfs_pattern512 / 4));

    for (id = 1; id <= id_max; id++) {
 800647a:	2301      	movs	r3, #1
 800647c:	9309      	str	r3, [sp, #36]	; 0x24
 800647e:	e057      	b.n	8006530 <mfs_test_001_007_execute+0xd0>
      mfs_error_t err;
      size_t size;

      err = mfsWriteRecord(&mfs1, id, (sizeof mfs_pattern512 / 4), mfs_pattern512);
 8006480:	4b96      	ldr	r3, [pc, #600]	; (80066dc <mfs_test_001_007_execute+0x27c>)
 8006482:	2280      	movs	r2, #128	; 0x80
 8006484:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006486:	4896      	ldr	r0, [pc, #600]	; (80066e0 <mfs_test_001_007_execute+0x280>)
 8006488:	f7fe f80a 	bl	80044a0 <mfsWriteRecord>
 800648c:	4603      	mov	r3, r0
 800648e:	f88d 300d 	strb.w	r3, [sp, #13]
      test_assert(err == MFS_NO_ERROR, "error creating the record");
 8006492:	f99d 300d 	ldrsb.w	r3, [sp, #13]
 8006496:	2b00      	cmp	r3, #0
 8006498:	bf0c      	ite	eq
 800649a:	2301      	moveq	r3, #1
 800649c:	2300      	movne	r3, #0
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	4990      	ldr	r1, [pc, #576]	; (80066e4 <mfs_test_001_007_execute+0x284>)
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe fc9c 	bl	8004de0 <_test_assert>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d000      	beq.n	80064b0 <mfs_test_001_007_execute+0x50>
 80064ae:	e10b      	b.n	80066c8 <mfs_test_001_007_execute+0x268>
      size = sizeof mfs_buffer;
 80064b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064b4:	9302      	str	r3, [sp, #8]
      err = mfsReadRecord(&mfs1, id, &size, mfs_buffer);
 80064b6:	aa02      	add	r2, sp, #8
 80064b8:	4b8b      	ldr	r3, [pc, #556]	; (80066e8 <mfs_test_001_007_execute+0x288>)
 80064ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064bc:	4888      	ldr	r0, [pc, #544]	; (80066e0 <mfs_test_001_007_execute+0x280>)
 80064be:	f7fd ff6f 	bl	80043a0 <mfsReadRecord>
 80064c2:	4603      	mov	r3, r0
 80064c4:	f88d 300d 	strb.w	r3, [sp, #13]
      test_assert(err == MFS_NO_ERROR, "record not found");
 80064c8:	f99d 300d 	ldrsb.w	r3, [sp, #13]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	bf0c      	ite	eq
 80064d0:	2301      	moveq	r3, #1
 80064d2:	2300      	movne	r3, #0
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	4985      	ldr	r1, [pc, #532]	; (80066ec <mfs_test_001_007_execute+0x28c>)
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fe fc81 	bl	8004de0 <_test_assert>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d000      	beq.n	80064e6 <mfs_test_001_007_execute+0x86>
      test_assert(err == MFS_NO_ERROR, "error creating the record");
 80064e4:	e0f0      	b.n	80066c8 <mfs_test_001_007_execute+0x268>
      test_assert(size == (sizeof mfs_pattern512 / 4), "unexpected record length");
 80064e6:	9b02      	ldr	r3, [sp, #8]
 80064e8:	2b80      	cmp	r3, #128	; 0x80
 80064ea:	bf0c      	ite	eq
 80064ec:	2301      	moveq	r3, #1
 80064ee:	2300      	movne	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	497f      	ldr	r1, [pc, #508]	; (80066f0 <mfs_test_001_007_execute+0x290>)
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fe fc73 	bl	8004de0 <_test_assert>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d000      	beq.n	8006502 <mfs_test_001_007_execute+0xa2>
      test_assert(err == MFS_NO_ERROR, "error creating the record");
 8006500:	e0e2      	b.n	80066c8 <mfs_test_001_007_execute+0x268>
      test_assert(memcmp(mfs_pattern512, mfs_buffer, size) == 0,
 8006502:	9b02      	ldr	r3, [sp, #8]
 8006504:	461a      	mov	r2, r3
 8006506:	4978      	ldr	r1, [pc, #480]	; (80066e8 <mfs_test_001_007_execute+0x288>)
 8006508:	4874      	ldr	r0, [pc, #464]	; (80066dc <mfs_test_001_007_execute+0x27c>)
 800650a:	f001 fa1b 	bl	8007944 <memcmp>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	bf0c      	ite	eq
 8006514:	2301      	moveq	r3, #1
 8006516:	2300      	movne	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	4976      	ldr	r1, [pc, #472]	; (80066f4 <mfs_test_001_007_execute+0x294>)
 800651c:	4618      	mov	r0, r3
 800651e:	f7fe fc5f 	bl	8004de0 <_test_assert>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d000      	beq.n	800652a <mfs_test_001_007_execute+0xca>
      test_assert(err == MFS_NO_ERROR, "error creating the record");
 8006528:	e0ce      	b.n	80066c8 <mfs_test_001_007_execute+0x268>
    for (id = 1; id <= id_max; id++) {
 800652a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800652c:	3301      	adds	r3, #1
 800652e:	9309      	str	r3, [sp, #36]	; 0x24
 8006530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006532:	9b07      	ldr	r3, [sp, #28]
 8006534:	429a      	cmp	r2, r3
 8006536:	d9a3      	bls.n	8006480 <mfs_test_001_007_execute+0x20>
    }
  }
  test_end_step(1);

  /* [1.7.2] Erase records until the flash bank is filled entirely.*/
  test_set_step(2);
 8006538:	4b65      	ldr	r3, [pc, #404]	; (80066d0 <mfs_test_001_007_execute+0x270>)
 800653a:	2202      	movs	r2, #2
 800653c:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;
    mfs_id_t id;
    mfs_id_t id_max = (mfscfg1.bank_size - (sizeof (mfs_bank_header_t) +
 800653e:	4b65      	ldr	r3, [pc, #404]	; (80066d4 <mfs_test_001_007_execute+0x274>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	3b20      	subs	r3, #32
 8006544:	4a64      	ldr	r2, [pc, #400]	; (80066d8 <mfs_test_001_007_execute+0x278>)
 8006546:	fba2 2303 	umull	r2, r3, r2, r3
 800654a:	095b      	lsrs	r3, r3, #5
 800654c:	9306      	str	r3, [sp, #24]
                                            sizeof (mfs_data_header_t))) /
                      (sizeof (mfs_data_header_t) + (sizeof mfs_pattern512 / 4));
    mfs_id_t n = ((mfscfg1.bank_size - sizeof (mfs_bank_header_t)) -
 800654e:	4b61      	ldr	r3, [pc, #388]	; (80066d4 <mfs_test_001_007_execute+0x274>)
 8006550:	6899      	ldr	r1, [r3, #8]
                  (id_max * (sizeof (mfs_data_header_t) + (sizeof mfs_pattern512 / 4)))) /
 8006552:	9a06      	ldr	r2, [sp, #24]
 8006554:	4613      	mov	r3, r2
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	4413      	add	r3, r2
 800655a:	011b      	lsls	r3, r3, #4
    mfs_id_t n = ((mfscfg1.bank_size - sizeof (mfs_bank_header_t)) -
 800655c:	1acb      	subs	r3, r1, r3
 800655e:	3b10      	subs	r3, #16
 8006560:	091b      	lsrs	r3, r3, #4
 8006562:	9305      	str	r3, [sp, #20]
                 sizeof (mfs_data_header_t);

    for (id = 1; id <= n; id++) {
 8006564:	2301      	movs	r3, #1
 8006566:	9308      	str	r3, [sp, #32]
 8006568:	e034      	b.n	80065d4 <mfs_test_001_007_execute+0x174>
      err = mfsEraseRecord(&mfs1, id);
 800656a:	9908      	ldr	r1, [sp, #32]
 800656c:	485c      	ldr	r0, [pc, #368]	; (80066e0 <mfs_test_001_007_execute+0x280>)
 800656e:	f7fe f8ff 	bl	8004770 <mfsEraseRecord>
 8006572:	4603      	mov	r3, r0
 8006574:	f88d 300e 	strb.w	r3, [sp, #14]
      test_assert(err == MFS_NO_ERROR, "error erasing the record");
 8006578:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 800657c:	2b00      	cmp	r3, #0
 800657e:	bf0c      	ite	eq
 8006580:	2301      	moveq	r3, #1
 8006582:	2300      	movne	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	495c      	ldr	r1, [pc, #368]	; (80066f8 <mfs_test_001_007_execute+0x298>)
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe fc29 	bl	8004de0 <_test_assert>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d000      	beq.n	8006596 <mfs_test_001_007_execute+0x136>
 8006594:	e098      	b.n	80066c8 <mfs_test_001_007_execute+0x268>
      size = sizeof mfs_buffer;
 8006596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800659a:	9300      	str	r3, [sp, #0]
      err = mfsReadRecord(&mfs1, id, &size, mfs_buffer);
 800659c:	466a      	mov	r2, sp
 800659e:	4b52      	ldr	r3, [pc, #328]	; (80066e8 <mfs_test_001_007_execute+0x288>)
 80065a0:	9908      	ldr	r1, [sp, #32]
 80065a2:	484f      	ldr	r0, [pc, #316]	; (80066e0 <mfs_test_001_007_execute+0x280>)
 80065a4:	f7fd fefc 	bl	80043a0 <mfsReadRecord>
 80065a8:	4603      	mov	r3, r0
 80065aa:	f88d 300e 	strb.w	r3, [sp, #14]
      test_assert(err == MFS_ERR_NOT_FOUND, "record not erased");
 80065ae:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 80065b2:	f113 0f03 	cmn.w	r3, #3
 80065b6:	bf0c      	ite	eq
 80065b8:	2301      	moveq	r3, #1
 80065ba:	2300      	movne	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	494f      	ldr	r1, [pc, #316]	; (80066fc <mfs_test_001_007_execute+0x29c>)
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7fe fc0d 	bl	8004de0 <_test_assert>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d000      	beq.n	80065ce <mfs_test_001_007_execute+0x16e>
      test_assert(err == MFS_NO_ERROR, "error erasing the record");
 80065cc:	e07c      	b.n	80066c8 <mfs_test_001_007_execute+0x268>
    for (id = 1; id <= n; id++) {
 80065ce:	9b08      	ldr	r3, [sp, #32]
 80065d0:	3301      	adds	r3, #1
 80065d2:	9308      	str	r3, [sp, #32]
 80065d4:	9a08      	ldr	r2, [sp, #32]
 80065d6:	9b05      	ldr	r3, [sp, #20]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d9c6      	bls.n	800656a <mfs_test_001_007_execute+0x10a>
  test_end_step(2);

  /* [1.7.3] Erasing one more record triggers garbage collection,
     MFS_WARN_GC is expected, KS state is checked for correctness after
     the operation.*/
  test_set_step(3);
 80065dc:	4b3c      	ldr	r3, [pc, #240]	; (80066d0 <mfs_test_001_007_execute+0x270>)
 80065de:	2203      	movs	r2, #3
 80065e0:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;
    mfs_id_t id_max = (mfscfg1.bank_size - (sizeof (mfs_bank_header_t) +
 80065e2:	4b3c      	ldr	r3, [pc, #240]	; (80066d4 <mfs_test_001_007_execute+0x274>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	3b20      	subs	r3, #32
 80065e8:	4a3b      	ldr	r2, [pc, #236]	; (80066d8 <mfs_test_001_007_execute+0x278>)
 80065ea:	fba2 2303 	umull	r2, r3, r2, r3
 80065ee:	095b      	lsrs	r3, r3, #5
 80065f0:	9304      	str	r3, [sp, #16]
                                            sizeof (mfs_data_header_t))) /
                      (sizeof (mfs_data_header_t) + (sizeof mfs_pattern512 / 4));

    test_assert(mfs1.current_counter == 1, "not first instance");
 80065f2:	4b3b      	ldr	r3, [pc, #236]	; (80066e0 <mfs_test_001_007_execute+0x280>)
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	bf0c      	ite	eq
 80065fa:	2301      	moveq	r3, #1
 80065fc:	2300      	movne	r3, #0
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	493f      	ldr	r1, [pc, #252]	; (8006700 <mfs_test_001_007_execute+0x2a0>)
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe fbec 	bl	8004de0 <_test_assert>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d15b      	bne.n	80066c6 <mfs_test_001_007_execute+0x266>
    err = mfsEraseRecord(&mfs1, id_max);
 800660e:	9904      	ldr	r1, [sp, #16]
 8006610:	4833      	ldr	r0, [pc, #204]	; (80066e0 <mfs_test_001_007_execute+0x280>)
 8006612:	f7fe f8ad 	bl	8004770 <mfsEraseRecord>
 8006616:	4603      	mov	r3, r0
 8006618:	f88d 300f 	strb.w	r3, [sp, #15]
    test_assert(err == MFS_WARN_GC, "error erasing the record");
 800661c:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 8006620:	2b02      	cmp	r3, #2
 8006622:	bf0c      	ite	eq
 8006624:	2301      	moveq	r3, #1
 8006626:	2300      	movne	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	4933      	ldr	r1, [pc, #204]	; (80066f8 <mfs_test_001_007_execute+0x298>)
 800662c:	4618      	mov	r0, r3
 800662e:	f7fe fbd7 	bl	8004de0 <_test_assert>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d147      	bne.n	80066c8 <mfs_test_001_007_execute+0x268>
    test_assert(mfs1.current_counter == 2, "not second instance");
 8006638:	4b29      	ldr	r3, [pc, #164]	; (80066e0 <mfs_test_001_007_execute+0x280>)
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	2b02      	cmp	r3, #2
 800663e:	bf0c      	ite	eq
 8006640:	2301      	moveq	r3, #1
 8006642:	2300      	movne	r3, #0
 8006644:	b2db      	uxtb	r3, r3
 8006646:	492f      	ldr	r1, [pc, #188]	; (8006704 <mfs_test_001_007_execute+0x2a4>)
 8006648:	4618      	mov	r0, r3
 800664a:	f7fe fbc9 	bl	8004de0 <_test_assert>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d139      	bne.n	80066c8 <mfs_test_001_007_execute+0x268>
    size = sizeof mfs_buffer;
 8006654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006658:	9301      	str	r3, [sp, #4]
    err = mfsReadRecord(&mfs1, id_max, &size, mfs_buffer);
 800665a:	aa01      	add	r2, sp, #4
 800665c:	4b22      	ldr	r3, [pc, #136]	; (80066e8 <mfs_test_001_007_execute+0x288>)
 800665e:	9904      	ldr	r1, [sp, #16]
 8006660:	481f      	ldr	r0, [pc, #124]	; (80066e0 <mfs_test_001_007_execute+0x280>)
 8006662:	f7fd fe9d 	bl	80043a0 <mfsReadRecord>
 8006666:	4603      	mov	r3, r0
 8006668:	f88d 300f 	strb.w	r3, [sp, #15]
    test_assert(err == MFS_ERR_NOT_FOUND, "record not erased");
 800666c:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 8006670:	f113 0f03 	cmn.w	r3, #3
 8006674:	bf0c      	ite	eq
 8006676:	2301      	moveq	r3, #1
 8006678:	2300      	movne	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	491f      	ldr	r1, [pc, #124]	; (80066fc <mfs_test_001_007_execute+0x29c>)
 800667e:	4618      	mov	r0, r3
 8006680:	f7fe fbae 	bl	8004de0 <_test_assert>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d11e      	bne.n	80066c8 <mfs_test_001_007_execute+0x268>
    test_assert(mfs1.current_bank == MFS_BANK_1, "unexpected bank");
 800668a:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <mfs_test_001_007_execute+0x280>)
 800668c:	7a1b      	ldrb	r3, [r3, #8]
 800668e:	2b01      	cmp	r3, #1
 8006690:	bf0c      	ite	eq
 8006692:	2301      	moveq	r3, #1
 8006694:	2300      	movne	r3, #0
 8006696:	b2db      	uxtb	r3, r3
 8006698:	491b      	ldr	r1, [pc, #108]	; (8006708 <mfs_test_001_007_execute+0x2a8>)
 800669a:	4618      	mov	r0, r3
 800669c:	f7fe fba0 	bl	8004de0 <_test_assert>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d110      	bne.n	80066c8 <mfs_test_001_007_execute+0x268>
    test_assert(bank_verify_erased(MFS_BANK_0) == FLASH_NO_ERROR, "bank 0 not erased");
 80066a6:	2000      	movs	r0, #0
 80066a8:	f7fe fde2 	bl	8005270 <bank_verify_erased>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	bf0c      	ite	eq
 80066b2:	2301      	moveq	r3, #1
 80066b4:	2300      	movne	r3, #0
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	4914      	ldr	r1, [pc, #80]	; (800670c <mfs_test_001_007_execute+0x2ac>)
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fe fb90 	bl	8004de0 <_test_assert>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	e000      	b.n	80066c8 <mfs_test_001_007_execute+0x268>
    test_assert(mfs1.current_counter == 1, "not first instance");
 80066c6:	bf00      	nop
  }
  test_end_step(3);
}
 80066c8:	b00b      	add	sp, #44	; 0x2c
 80066ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80066ce:	bf00      	nop
 80066d0:	20000a4c 	.word	0x20000a4c
 80066d4:	0800949c 	.word	0x0800949c
 80066d8:	38e38e39 	.word	0x38e38e39
 80066dc:	08008c30 	.word	0x08008c30
 80066e0:	20000a70 	.word	0x20000a70
 80066e4:	08008f18 	.word	0x08008f18
 80066e8:	20000c74 	.word	0x20000c74
 80066ec:	08008f34 	.word	0x08008f34
 80066f0:	08008f48 	.word	0x08008f48
 80066f4:	08008f64 	.word	0x08008f64
 80066f8:	08008f98 	.word	0x08008f98
 80066fc:	08008fb4 	.word	0x08008fb4
 8006700:	08009174 	.word	0x08009174
 8006704:	08009188 	.word	0x08009188
 8006708:	0800919c 	.word	0x0800919c
 800670c:	080091ac 	.word	0x080091ac

08006710 <mfs_test_002_001_setup>:
 *   change.
 * - [2.1.10] Testing outcome again after garbage collection.
 * .
 */

static void mfs_test_002_001_setup(void) {
 8006710:	b508      	push	{r3, lr}
  bank_erase(MFS_BANK_0);
 8006712:	2000      	movs	r0, #0
 8006714:	f7fe fd64 	bl	80051e0 <bank_erase>
  bank_erase(MFS_BANK_1);
 8006718:	2001      	movs	r0, #1
 800671a:	f7fe fd61 	bl	80051e0 <bank_erase>
  mfsStart(&mfs1, &mfscfg1);
 800671e:	4902      	ldr	r1, [pc, #8]	; (8006728 <mfs_test_002_001_setup+0x18>)
 8006720:	4802      	ldr	r0, [pc, #8]	; (800672c <mfs_test_002_001_setup+0x1c>)
 8006722:	f7fd fded 	bl	8004300 <mfsStart>
}
 8006726:	bd08      	pop	{r3, pc}
 8006728:	0800949c 	.word	0x0800949c
 800672c:	20000a70 	.word	0x20000a70

08006730 <mfs_test_002_001_teardown>:

static void mfs_test_002_001_teardown(void) {
 8006730:	b508      	push	{r3, lr}
  mfsStop(&mfs1);
 8006732:	4802      	ldr	r0, [pc, #8]	; (800673c <mfs_test_002_001_teardown+0xc>)
 8006734:	f7fd fdf4 	bl	8004320 <mfsStop>
}
 8006738:	bd08      	pop	{r3, pc}
 800673a:	bf00      	nop
 800673c:	20000a70 	.word	0x20000a70

08006740 <mfs_test_002_001_execute>:

static void mfs_test_002_001_execute(void) {
 8006740:	b500      	push	{lr}
 8006742:	b08d      	sub	sp, #52	; 0x34
  uint32_t current_counter;
  uint32_t used_space;

  /* [2.1.1] Records 1, 2 and 3 are created, MFS_NO_ERROR is
     expected.*/
  test_set_step(1);
 8006744:	4bb1      	ldr	r3, [pc, #708]	; (8006a0c <mfs_test_002_001_execute+0x2cc>)
 8006746:	2201      	movs	r2, #1
 8006748:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;

    err = mfsWriteRecord(&mfs1, 1, sizeof mfs_pattern16, mfs_pattern16);
 800674a:	4bb1      	ldr	r3, [pc, #708]	; (8006a10 <mfs_test_002_001_execute+0x2d0>)
 800674c:	2210      	movs	r2, #16
 800674e:	2101      	movs	r1, #1
 8006750:	48b0      	ldr	r0, [pc, #704]	; (8006a14 <mfs_test_002_001_execute+0x2d4>)
 8006752:	f7fd fea5 	bl	80044a0 <mfsWriteRecord>
 8006756:	4603      	mov	r3, r0
 8006758:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    test_assert(err == MFS_NO_ERROR, "error creating record 1");
 800675c:	f99d 302f 	ldrsb.w	r3, [sp, #47]	; 0x2f
 8006760:	2b00      	cmp	r3, #0
 8006762:	bf0c      	ite	eq
 8006764:	2301      	moveq	r3, #1
 8006766:	2300      	movne	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	49ab      	ldr	r1, [pc, #684]	; (8006a18 <mfs_test_002_001_execute+0x2d8>)
 800676c:	4618      	mov	r0, r3
 800676e:	f7fe fb37 	bl	8004de0 <_test_assert>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	f040 83ed 	bne.w	8006f54 <mfs_test_002_001_execute+0x814>
    err = mfsWriteRecord(&mfs1, 2, sizeof mfs_pattern16, mfs_pattern16);
 800677a:	4ba5      	ldr	r3, [pc, #660]	; (8006a10 <mfs_test_002_001_execute+0x2d0>)
 800677c:	2210      	movs	r2, #16
 800677e:	2102      	movs	r1, #2
 8006780:	48a4      	ldr	r0, [pc, #656]	; (8006a14 <mfs_test_002_001_execute+0x2d4>)
 8006782:	f7fd fe8d 	bl	80044a0 <mfsWriteRecord>
 8006786:	4603      	mov	r3, r0
 8006788:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    test_assert(err == MFS_NO_ERROR, "error creating record 2");
 800678c:	f99d 302f 	ldrsb.w	r3, [sp, #47]	; 0x2f
 8006790:	2b00      	cmp	r3, #0
 8006792:	bf0c      	ite	eq
 8006794:	2301      	moveq	r3, #1
 8006796:	2300      	movne	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	49a0      	ldr	r1, [pc, #640]	; (8006a1c <mfs_test_002_001_execute+0x2dc>)
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe fb1f 	bl	8004de0 <_test_assert>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f040 83d5 	bne.w	8006f54 <mfs_test_002_001_execute+0x814>
    err = mfsWriteRecord(&mfs1, 3, sizeof mfs_pattern16, mfs_pattern16);
 80067aa:	4b99      	ldr	r3, [pc, #612]	; (8006a10 <mfs_test_002_001_execute+0x2d0>)
 80067ac:	2210      	movs	r2, #16
 80067ae:	2103      	movs	r1, #3
 80067b0:	4898      	ldr	r0, [pc, #608]	; (8006a14 <mfs_test_002_001_execute+0x2d4>)
 80067b2:	f7fd fe75 	bl	80044a0 <mfsWriteRecord>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    test_assert(err == MFS_NO_ERROR, "error creating record 3");
 80067bc:	f99d 302f 	ldrsb.w	r3, [sp, #47]	; 0x2f
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	bf0c      	ite	eq
 80067c4:	2301      	moveq	r3, #1
 80067c6:	2300      	movne	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	4995      	ldr	r1, [pc, #596]	; (8006a20 <mfs_test_002_001_execute+0x2e0>)
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fe fb07 	bl	8004de0 <_test_assert>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f040 83bd 	bne.w	8006f54 <mfs_test_002_001_execute+0x814>
  }
  test_end_step(1);

  /* [2.1.2] Presence of records 1, 2 and 3 is verified, MFS_NO_ERROR
     is expected.*/
  test_set_step(2);
 80067da:	4b8c      	ldr	r3, [pc, #560]	; (8006a0c <mfs_test_002_001_execute+0x2cc>)
 80067dc:	2202      	movs	r2, #2
 80067de:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;

    size = sizeof mfs_buffer;
 80067e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067e4:	9301      	str	r3, [sp, #4]
    err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 80067e6:	aa01      	add	r2, sp, #4
 80067e8:	4b8e      	ldr	r3, [pc, #568]	; (8006a24 <mfs_test_002_001_execute+0x2e4>)
 80067ea:	2101      	movs	r1, #1
 80067ec:	4889      	ldr	r0, [pc, #548]	; (8006a14 <mfs_test_002_001_execute+0x2d4>)
 80067ee:	f7fd fdd7 	bl	80043a0 <mfsReadRecord>
 80067f2:	4603      	mov	r3, r0
 80067f4:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    test_assert(err == MFS_NO_ERROR, "record not found");
 80067f8:	f99d 302e 	ldrsb.w	r3, [sp, #46]	; 0x2e
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bf0c      	ite	eq
 8006800:	2301      	moveq	r3, #1
 8006802:	2300      	movne	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	4988      	ldr	r1, [pc, #544]	; (8006a28 <mfs_test_002_001_execute+0x2e8>)
 8006808:	4618      	mov	r0, r3
 800680a:	f7fe fae9 	bl	8004de0 <_test_assert>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d000      	beq.n	8006816 <mfs_test_002_001_execute+0xd6>
 8006814:	e39e      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    size = sizeof mfs_buffer;
 8006816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800681a:	9301      	str	r3, [sp, #4]
    err = mfsReadRecord(&mfs1, 2, &size, mfs_buffer);
 800681c:	aa01      	add	r2, sp, #4
 800681e:	4b81      	ldr	r3, [pc, #516]	; (8006a24 <mfs_test_002_001_execute+0x2e4>)
 8006820:	2102      	movs	r1, #2
 8006822:	487c      	ldr	r0, [pc, #496]	; (8006a14 <mfs_test_002_001_execute+0x2d4>)
 8006824:	f7fd fdbc 	bl	80043a0 <mfsReadRecord>
 8006828:	4603      	mov	r3, r0
 800682a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    test_assert(err == MFS_NO_ERROR, "record not found");
 800682e:	f99d 302e 	ldrsb.w	r3, [sp, #46]	; 0x2e
 8006832:	2b00      	cmp	r3, #0
 8006834:	bf0c      	ite	eq
 8006836:	2301      	moveq	r3, #1
 8006838:	2300      	movne	r3, #0
 800683a:	b2db      	uxtb	r3, r3
 800683c:	497a      	ldr	r1, [pc, #488]	; (8006a28 <mfs_test_002_001_execute+0x2e8>)
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe face 	bl	8004de0 <_test_assert>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d000      	beq.n	800684c <mfs_test_002_001_execute+0x10c>
    test_assert(err == MFS_NO_ERROR, "record not found");
 800684a:	e383      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    size = sizeof mfs_buffer;
 800684c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006850:	9301      	str	r3, [sp, #4]
    err = mfsReadRecord(&mfs1, 3, &size, mfs_buffer);
 8006852:	aa01      	add	r2, sp, #4
 8006854:	4b73      	ldr	r3, [pc, #460]	; (8006a24 <mfs_test_002_001_execute+0x2e4>)
 8006856:	2103      	movs	r1, #3
 8006858:	486e      	ldr	r0, [pc, #440]	; (8006a14 <mfs_test_002_001_execute+0x2d4>)
 800685a:	f7fd fda1 	bl	80043a0 <mfsReadRecord>
 800685e:	4603      	mov	r3, r0
 8006860:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    test_assert(err == MFS_NO_ERROR, "record not found");
 8006864:	f99d 302e 	ldrsb.w	r3, [sp, #46]	; 0x2e
 8006868:	2b00      	cmp	r3, #0
 800686a:	bf0c      	ite	eq
 800686c:	2301      	moveq	r3, #1
 800686e:	2300      	movne	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	496d      	ldr	r1, [pc, #436]	; (8006a28 <mfs_test_002_001_execute+0x2e8>)
 8006874:	4618      	mov	r0, r3
 8006876:	f7fe fab3 	bl	8004de0 <_test_assert>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d000      	beq.n	8006882 <mfs_test_002_001_execute+0x142>
    test_assert(err == MFS_NO_ERROR, "record not found");
 8006880:	e368      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
  }
  test_end_step(2);

  /* [2.1.3] Starting a transaction with sufficient pre-allocated
     space, MFS_NO_ERROR is expected.*/
  test_set_step(3);
 8006882:	4b62      	ldr	r3, [pc, #392]	; (8006a0c <mfs_test_002_001_execute+0x2cc>)
 8006884:	2203      	movs	r2, #3
 8006886:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;

    err = mfsStartTransaction(&mfs1, 1024U);
 8006888:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800688c:	4861      	ldr	r0, [pc, #388]	; (8006a14 <mfs_test_002_001_execute+0x2d4>)
 800688e:	f7fe f8a7 	bl	80049e0 <mfsStartTransaction>
 8006892:	4603      	mov	r3, r0
 8006894:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    test_assert(err == MFS_NO_ERROR, "error starting transaction");
 8006898:	f99d 302d 	ldrsb.w	r3, [sp, #45]	; 0x2d
 800689c:	2b00      	cmp	r3, #0
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	4961      	ldr	r1, [pc, #388]	; (8006a2c <mfs_test_002_001_execute+0x2ec>)
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fe fa99 	bl	8004de0 <_test_assert>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f040 8348 	bne.w	8006f46 <mfs_test_002_001_execute+0x806>
  }
  test_end_step(3);

  /* [2.1.4] Atomically erasing record 1, updating record 2, reading
     record 3.*/
  test_set_step(4);
 80068b6:	4b55      	ldr	r3, [pc, #340]	; (8006a0c <mfs_test_002_001_execute+0x2cc>)
 80068b8:	2204      	movs	r2, #4
 80068ba:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;

    err = mfsEraseRecord(&mfs1, 1);
 80068bc:	2101      	movs	r1, #1
 80068be:	4855      	ldr	r0, [pc, #340]	; (8006a14 <mfs_test_002_001_execute+0x2d4>)
 80068c0:	f7fd ff56 	bl	8004770 <mfsEraseRecord>
 80068c4:	4603      	mov	r3, r0
 80068c6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    test_assert(err == MFS_NO_ERROR, "error erasing record 1");
 80068ca:	f99d 302c 	ldrsb.w	r3, [sp, #44]	; 0x2c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	bf0c      	ite	eq
 80068d2:	2301      	moveq	r3, #1
 80068d4:	2300      	movne	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	4955      	ldr	r1, [pc, #340]	; (8006a30 <mfs_test_002_001_execute+0x2f0>)
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fe fa80 	bl	8004de0 <_test_assert>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d000      	beq.n	80068e8 <mfs_test_002_001_execute+0x1a8>
 80068e6:	e335      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    err = mfsWriteRecord(&mfs1, 2, sizeof mfs_pattern32, mfs_pattern32);
 80068e8:	4b52      	ldr	r3, [pc, #328]	; (8006a34 <mfs_test_002_001_execute+0x2f4>)
 80068ea:	2220      	movs	r2, #32
 80068ec:	2102      	movs	r1, #2
 80068ee:	4849      	ldr	r0, [pc, #292]	; (8006a14 <mfs_test_002_001_execute+0x2d4>)
 80068f0:	f7fd fdd6 	bl	80044a0 <mfsWriteRecord>
 80068f4:	4603      	mov	r3, r0
 80068f6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    test_assert(err == MFS_NO_ERROR, "error writing record 2");
 80068fa:	f99d 302c 	ldrsb.w	r3, [sp, #44]	; 0x2c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	bf0c      	ite	eq
 8006902:	2301      	moveq	r3, #1
 8006904:	2300      	movne	r3, #0
 8006906:	b2db      	uxtb	r3, r3
 8006908:	494b      	ldr	r1, [pc, #300]	; (8006a38 <mfs_test_002_001_execute+0x2f8>)
 800690a:	4618      	mov	r0, r3
 800690c:	f7fe fa68 	bl	8004de0 <_test_assert>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d000      	beq.n	8006918 <mfs_test_002_001_execute+0x1d8>
    test_assert(err == MFS_NO_ERROR, "error erasing record 1");
 8006916:	e31d      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    size = sizeof mfs_buffer;
 8006918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800691c:	9302      	str	r3, [sp, #8]
    err = mfsReadRecord(&mfs1, 3, &size, mfs_buffer);
 800691e:	aa02      	add	r2, sp, #8
 8006920:	4b40      	ldr	r3, [pc, #256]	; (8006a24 <mfs_test_002_001_execute+0x2e4>)
 8006922:	2103      	movs	r1, #3
 8006924:	483b      	ldr	r0, [pc, #236]	; (8006a14 <mfs_test_002_001_execute+0x2d4>)
 8006926:	f7fd fd3b 	bl	80043a0 <mfsReadRecord>
 800692a:	4603      	mov	r3, r0
 800692c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    test_assert(err == MFS_NO_ERROR, "record not found");
 8006930:	f99d 302c 	ldrsb.w	r3, [sp, #44]	; 0x2c
 8006934:	2b00      	cmp	r3, #0
 8006936:	bf0c      	ite	eq
 8006938:	2301      	moveq	r3, #1
 800693a:	2300      	movne	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	493a      	ldr	r1, [pc, #232]	; (8006a28 <mfs_test_002_001_execute+0x2e8>)
 8006940:	4618      	mov	r0, r3
 8006942:	f7fe fa4d 	bl	8004de0 <_test_assert>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d000      	beq.n	800694e <mfs_test_002_001_execute+0x20e>
    test_assert(err == MFS_NO_ERROR, "error erasing record 1");
 800694c:	e302      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(size == sizeof mfs_pattern16, "unexpected record length");
 800694e:	9b02      	ldr	r3, [sp, #8]
 8006950:	2b10      	cmp	r3, #16
 8006952:	bf0c      	ite	eq
 8006954:	2301      	moveq	r3, #1
 8006956:	2300      	movne	r3, #0
 8006958:	b2db      	uxtb	r3, r3
 800695a:	4938      	ldr	r1, [pc, #224]	; (8006a3c <mfs_test_002_001_execute+0x2fc>)
 800695c:	4618      	mov	r0, r3
 800695e:	f7fe fa3f 	bl	8004de0 <_test_assert>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d000      	beq.n	800696a <mfs_test_002_001_execute+0x22a>
    test_assert(err == MFS_NO_ERROR, "error erasing record 1");
 8006968:	e2f4      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(memcmp(mfs_pattern16, mfs_buffer, size) == 0, "wrong record content");
 800696a:	9b02      	ldr	r3, [sp, #8]
 800696c:	461a      	mov	r2, r3
 800696e:	492d      	ldr	r1, [pc, #180]	; (8006a24 <mfs_test_002_001_execute+0x2e4>)
 8006970:	4827      	ldr	r0, [pc, #156]	; (8006a10 <mfs_test_002_001_execute+0x2d0>)
 8006972:	f000 ffe7 	bl	8007944 <memcmp>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	bf0c      	ite	eq
 800697c:	2301      	moveq	r3, #1
 800697e:	2300      	movne	r3, #0
 8006980:	b2db      	uxtb	r3, r3
 8006982:	492f      	ldr	r1, [pc, #188]	; (8006a40 <mfs_test_002_001_execute+0x300>)
 8006984:	4618      	mov	r0, r3
 8006986:	f7fe fa2b 	bl	8004de0 <_test_assert>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d000      	beq.n	8006992 <mfs_test_002_001_execute+0x252>
    test_assert(err == MFS_NO_ERROR, "error erasing record 1");
 8006990:	e2e0      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
  }
  test_end_step(4);

  /* [2.1.5] Committing the transaction, MFS_NO_ERROR is expected.*/
  test_set_step(5);
 8006992:	4b1e      	ldr	r3, [pc, #120]	; (8006a0c <mfs_test_002_001_execute+0x2cc>)
 8006994:	2205      	movs	r2, #5
 8006996:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;

    err = mfsCommitTransaction(&mfs1);
 8006998:	481e      	ldr	r0, [pc, #120]	; (8006a14 <mfs_test_002_001_execute+0x2d4>)
 800699a:	f7fe f881 	bl	8004aa0 <mfsCommitTransaction>
 800699e:	4603      	mov	r3, r0
 80069a0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    test_assert(err == MFS_NO_ERROR, "error committing transaction");
 80069a4:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	bf0c      	ite	eq
 80069ac:	2301      	moveq	r3, #1
 80069ae:	2300      	movne	r3, #0
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	4924      	ldr	r1, [pc, #144]	; (8006a44 <mfs_test_002_001_execute+0x304>)
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe fa13 	bl	8004de0 <_test_assert>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f040 82c4 	bne.w	8006f4a <mfs_test_002_001_execute+0x80a>

    /* Saving some internal state for successive checks.*/
    current_counter = mfs1.current_counter;
 80069c2:	4b14      	ldr	r3, [pc, #80]	; (8006a14 <mfs_test_002_001_execute+0x2d4>)
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	9309      	str	r3, [sp, #36]	; 0x24
    used_space      = mfs1.used_space;
 80069c8:	4b12      	ldr	r3, [pc, #72]	; (8006a14 <mfs_test_002_001_execute+0x2d4>)
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	9308      	str	r3, [sp, #32]
  }
  test_end_step(5);

  /* [2.1.6] Testing outcome, records 1 must not be present, record 2
     must contain the new value and record 3 must be unchanged.*/
  test_set_step(6);
 80069ce:	4b0f      	ldr	r3, [pc, #60]	; (8006a0c <mfs_test_002_001_execute+0x2cc>)
 80069d0:	2206      	movs	r2, #6
 80069d2:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;

    /* Record 1 must not be present.*/
    size = sizeof mfs_buffer;
 80069d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069d8:	9303      	str	r3, [sp, #12]
    err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 80069da:	aa03      	add	r2, sp, #12
 80069dc:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <mfs_test_002_001_execute+0x2e4>)
 80069de:	2101      	movs	r1, #1
 80069e0:	480c      	ldr	r0, [pc, #48]	; (8006a14 <mfs_test_002_001_execute+0x2d4>)
 80069e2:	f7fd fcdd 	bl	80043a0 <mfsReadRecord>
 80069e6:	4603      	mov	r3, r0
 80069e8:	f88d 301f 	strb.w	r3, [sp, #31]
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 80069ec:	f99d 301f 	ldrsb.w	r3, [sp, #31]
 80069f0:	f113 0f03 	cmn.w	r3, #3
 80069f4:	bf0c      	ite	eq
 80069f6:	2301      	moveq	r3, #1
 80069f8:	2300      	movne	r3, #0
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	4912      	ldr	r1, [pc, #72]	; (8006a48 <mfs_test_002_001_execute+0x308>)
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe f9ee 	bl	8004de0 <_test_assert>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d020      	beq.n	8006a4c <mfs_test_002_001_execute+0x30c>
 8006a0a:	e2a3      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
 8006a0c:	20000a4c 	.word	0x20000a4c
 8006a10:	08008bf4 	.word	0x08008bf4
 8006a14:	20000a70 	.word	0x20000a70
 8006a18:	08008fd8 	.word	0x08008fd8
 8006a1c:	08008ff0 	.word	0x08008ff0
 8006a20:	08009008 	.word	0x08009008
 8006a24:	20000c74 	.word	0x20000c74
 8006a28:	08008f34 	.word	0x08008f34
 8006a2c:	08009248 	.word	0x08009248
 8006a30:	08009264 	.word	0x08009264
 8006a34:	08008c04 	.word	0x08008c04
 8006a38:	0800927c 	.word	0x0800927c
 8006a3c:	08008f48 	.word	0x08008f48
 8006a40:	08008f64 	.word	0x08008f64
 8006a44:	08009294 	.word	0x08009294
 8006a48:	080092b4 	.word	0x080092b4

    /* Record 2 must contain the new value.*/
    size = sizeof mfs_buffer;
 8006a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a50:	9303      	str	r3, [sp, #12]
    err = mfsReadRecord(&mfs1, 2, &size, mfs_buffer);
 8006a52:	aa03      	add	r2, sp, #12
 8006a54:	4bab      	ldr	r3, [pc, #684]	; (8006d04 <mfs_test_002_001_execute+0x5c4>)
 8006a56:	2102      	movs	r1, #2
 8006a58:	48ab      	ldr	r0, [pc, #684]	; (8006d08 <mfs_test_002_001_execute+0x5c8>)
 8006a5a:	f7fd fca1 	bl	80043a0 <mfsReadRecord>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	f88d 301f 	strb.w	r3, [sp, #31]
    test_assert(err == MFS_NO_ERROR, "record not found");
 8006a64:	f99d 301f 	ldrsb.w	r3, [sp, #31]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	bf0c      	ite	eq
 8006a6c:	2301      	moveq	r3, #1
 8006a6e:	2300      	movne	r3, #0
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	49a6      	ldr	r1, [pc, #664]	; (8006d0c <mfs_test_002_001_execute+0x5cc>)
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7fe f9b3 	bl	8004de0 <_test_assert>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d000      	beq.n	8006a82 <mfs_test_002_001_execute+0x342>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006a80:	e268      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(size == sizeof mfs_pattern32, "unexpected record length");
 8006a82:	9b03      	ldr	r3, [sp, #12]
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	bf0c      	ite	eq
 8006a88:	2301      	moveq	r3, #1
 8006a8a:	2300      	movne	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	49a0      	ldr	r1, [pc, #640]	; (8006d10 <mfs_test_002_001_execute+0x5d0>)
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fe f9a5 	bl	8004de0 <_test_assert>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d000      	beq.n	8006a9e <mfs_test_002_001_execute+0x35e>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006a9c:	e25a      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(memcmp(mfs_pattern32, mfs_buffer, size) == 0, "wrong record content");
 8006a9e:	9b03      	ldr	r3, [sp, #12]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	4998      	ldr	r1, [pc, #608]	; (8006d04 <mfs_test_002_001_execute+0x5c4>)
 8006aa4:	489b      	ldr	r0, [pc, #620]	; (8006d14 <mfs_test_002_001_execute+0x5d4>)
 8006aa6:	f000 ff4d 	bl	8007944 <memcmp>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	bf0c      	ite	eq
 8006ab0:	2301      	moveq	r3, #1
 8006ab2:	2300      	movne	r3, #0
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	4998      	ldr	r1, [pc, #608]	; (8006d18 <mfs_test_002_001_execute+0x5d8>)
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fe f991 	bl	8004de0 <_test_assert>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d000      	beq.n	8006ac6 <mfs_test_002_001_execute+0x386>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006ac4:	e246      	b.n	8006f54 <mfs_test_002_001_execute+0x814>

    /* Record 3 must be unchanged.*/
    size = sizeof mfs_buffer;
 8006ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aca:	9303      	str	r3, [sp, #12]
    err = mfsReadRecord(&mfs1, 3, &size, mfs_buffer);
 8006acc:	aa03      	add	r2, sp, #12
 8006ace:	4b8d      	ldr	r3, [pc, #564]	; (8006d04 <mfs_test_002_001_execute+0x5c4>)
 8006ad0:	2103      	movs	r1, #3
 8006ad2:	488d      	ldr	r0, [pc, #564]	; (8006d08 <mfs_test_002_001_execute+0x5c8>)
 8006ad4:	f7fd fc64 	bl	80043a0 <mfsReadRecord>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	f88d 301f 	strb.w	r3, [sp, #31]
    test_assert(err == MFS_NO_ERROR, "record not found");
 8006ade:	f99d 301f 	ldrsb.w	r3, [sp, #31]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	bf0c      	ite	eq
 8006ae6:	2301      	moveq	r3, #1
 8006ae8:	2300      	movne	r3, #0
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	4987      	ldr	r1, [pc, #540]	; (8006d0c <mfs_test_002_001_execute+0x5cc>)
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fe f976 	bl	8004de0 <_test_assert>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d000      	beq.n	8006afc <mfs_test_002_001_execute+0x3bc>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006afa:	e22b      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(size == sizeof mfs_pattern16, "unexpected record length");
 8006afc:	9b03      	ldr	r3, [sp, #12]
 8006afe:	2b10      	cmp	r3, #16
 8006b00:	bf0c      	ite	eq
 8006b02:	2301      	moveq	r3, #1
 8006b04:	2300      	movne	r3, #0
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	4981      	ldr	r1, [pc, #516]	; (8006d10 <mfs_test_002_001_execute+0x5d0>)
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fe f968 	bl	8004de0 <_test_assert>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d000      	beq.n	8006b18 <mfs_test_002_001_execute+0x3d8>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006b16:	e21d      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(memcmp(mfs_pattern16, mfs_buffer, size) == 0, "wrong record content");
 8006b18:	9b03      	ldr	r3, [sp, #12]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	4979      	ldr	r1, [pc, #484]	; (8006d04 <mfs_test_002_001_execute+0x5c4>)
 8006b1e:	487f      	ldr	r0, [pc, #508]	; (8006d1c <mfs_test_002_001_execute+0x5dc>)
 8006b20:	f000 ff10 	bl	8007944 <memcmp>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bf0c      	ite	eq
 8006b2a:	2301      	moveq	r3, #1
 8006b2c:	2300      	movne	r3, #0
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	4979      	ldr	r1, [pc, #484]	; (8006d18 <mfs_test_002_001_execute+0x5d8>)
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fe f954 	bl	8004de0 <_test_assert>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d000      	beq.n	8006b40 <mfs_test_002_001_execute+0x400>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006b3e:	e209      	b.n	8006f54 <mfs_test_002_001_execute+0x814>

    /* Checking internal data.*/
    test_assert(MFS_BANK_0 == mfs1.current_bank, "internal data mismatch");
 8006b40:	4b71      	ldr	r3, [pc, #452]	; (8006d08 <mfs_test_002_001_execute+0x5c8>)
 8006b42:	7a1b      	ldrb	r3, [r3, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	bf0c      	ite	eq
 8006b48:	2301      	moveq	r3, #1
 8006b4a:	2300      	movne	r3, #0
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	4974      	ldr	r1, [pc, #464]	; (8006d20 <mfs_test_002_001_execute+0x5e0>)
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fe f945 	bl	8004de0 <_test_assert>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d000      	beq.n	8006b5e <mfs_test_002_001_execute+0x41e>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006b5c:	e1fa      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(current_counter == mfs1.current_counter, "internal data mismatch");
 8006b5e:	4b6a      	ldr	r3, [pc, #424]	; (8006d08 <mfs_test_002_001_execute+0x5c8>)
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b64:	429a      	cmp	r2, r3
 8006b66:	bf0c      	ite	eq
 8006b68:	2301      	moveq	r3, #1
 8006b6a:	2300      	movne	r3, #0
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	496c      	ldr	r1, [pc, #432]	; (8006d20 <mfs_test_002_001_execute+0x5e0>)
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fe f935 	bl	8004de0 <_test_assert>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d000      	beq.n	8006b7e <mfs_test_002_001_execute+0x43e>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006b7c:	e1ea      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(used_space == mfs1.used_space, "internal data mismatch");
 8006b7e:	4b62      	ldr	r3, [pc, #392]	; (8006d08 <mfs_test_002_001_execute+0x5c8>)
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	9a08      	ldr	r2, [sp, #32]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	bf0c      	ite	eq
 8006b88:	2301      	moveq	r3, #1
 8006b8a:	2300      	movne	r3, #0
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	4964      	ldr	r1, [pc, #400]	; (8006d20 <mfs_test_002_001_execute+0x5e0>)
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fe f925 	bl	8004de0 <_test_assert>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d000      	beq.n	8006b9e <mfs_test_002_001_execute+0x45e>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006b9c:	e1da      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
  }
  test_end_step(6);

  /* [2.1.7] Re-mounting the manage storage, MFS_NO_ERROR is
     expected.*/
  test_set_step(7);
 8006b9e:	4b61      	ldr	r3, [pc, #388]	; (8006d24 <mfs_test_002_001_execute+0x5e4>)
 8006ba0:	2207      	movs	r2, #7
 8006ba2:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;

    err = mfsStart(&mfs1, &mfscfg1);
 8006ba4:	4960      	ldr	r1, [pc, #384]	; (8006d28 <mfs_test_002_001_execute+0x5e8>)
 8006ba6:	4858      	ldr	r0, [pc, #352]	; (8006d08 <mfs_test_002_001_execute+0x5c8>)
 8006ba8:	f7fd fbaa 	bl	8004300 <mfsStart>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f88d 301e 	strb.w	r3, [sp, #30]
    test_assert(err == MFS_NO_ERROR, "re-start failed");
 8006bb2:	f99d 301e 	ldrsb.w	r3, [sp, #30]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	bf0c      	ite	eq
 8006bba:	2301      	moveq	r3, #1
 8006bbc:	2300      	movne	r3, #0
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	495a      	ldr	r1, [pc, #360]	; (8006d2c <mfs_test_002_001_execute+0x5ec>)
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe f90c 	bl	8004de0 <_test_assert>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f040 81bf 	bne.w	8006f4e <mfs_test_002_001_execute+0x80e>
  }
  test_end_step(7);

  /* [2.1.8] Testing outcome again after re-start.*/
  test_set_step(8);
 8006bd0:	4b54      	ldr	r3, [pc, #336]	; (8006d24 <mfs_test_002_001_execute+0x5e4>)
 8006bd2:	2208      	movs	r2, #8
 8006bd4:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;

    /* Record 1 must not be present.*/
    size = sizeof mfs_buffer;
 8006bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bda:	9304      	str	r3, [sp, #16]
    err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 8006bdc:	aa04      	add	r2, sp, #16
 8006bde:	4b49      	ldr	r3, [pc, #292]	; (8006d04 <mfs_test_002_001_execute+0x5c4>)
 8006be0:	2101      	movs	r1, #1
 8006be2:	4849      	ldr	r0, [pc, #292]	; (8006d08 <mfs_test_002_001_execute+0x5c8>)
 8006be4:	f7fd fbdc 	bl	80043a0 <mfsReadRecord>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f88d 301d 	strb.w	r3, [sp, #29]
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006bee:	f99d 301d 	ldrsb.w	r3, [sp, #29]
 8006bf2:	f113 0f03 	cmn.w	r3, #3
 8006bf6:	bf0c      	ite	eq
 8006bf8:	2301      	moveq	r3, #1
 8006bfa:	2300      	movne	r3, #0
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	494c      	ldr	r1, [pc, #304]	; (8006d30 <mfs_test_002_001_execute+0x5f0>)
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fe f8ed 	bl	8004de0 <_test_assert>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d000      	beq.n	8006c0e <mfs_test_002_001_execute+0x4ce>
 8006c0c:	e1a2      	b.n	8006f54 <mfs_test_002_001_execute+0x814>

    /* Record 2 must contain the new value.*/
    size = sizeof mfs_buffer;
 8006c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c12:	9304      	str	r3, [sp, #16]
    err = mfsReadRecord(&mfs1, 2, &size, mfs_buffer);
 8006c14:	aa04      	add	r2, sp, #16
 8006c16:	4b3b      	ldr	r3, [pc, #236]	; (8006d04 <mfs_test_002_001_execute+0x5c4>)
 8006c18:	2102      	movs	r1, #2
 8006c1a:	483b      	ldr	r0, [pc, #236]	; (8006d08 <mfs_test_002_001_execute+0x5c8>)
 8006c1c:	f7fd fbc0 	bl	80043a0 <mfsReadRecord>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f88d 301d 	strb.w	r3, [sp, #29]
    test_assert(err == MFS_NO_ERROR, "record not found");
 8006c26:	f99d 301d 	ldrsb.w	r3, [sp, #29]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	bf0c      	ite	eq
 8006c2e:	2301      	moveq	r3, #1
 8006c30:	2300      	movne	r3, #0
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	4935      	ldr	r1, [pc, #212]	; (8006d0c <mfs_test_002_001_execute+0x5cc>)
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe f8d2 	bl	8004de0 <_test_assert>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d000      	beq.n	8006c44 <mfs_test_002_001_execute+0x504>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006c42:	e187      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(size == sizeof mfs_pattern32, "unexpected record length");
 8006c44:	9b04      	ldr	r3, [sp, #16]
 8006c46:	2b20      	cmp	r3, #32
 8006c48:	bf0c      	ite	eq
 8006c4a:	2301      	moveq	r3, #1
 8006c4c:	2300      	movne	r3, #0
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	492f      	ldr	r1, [pc, #188]	; (8006d10 <mfs_test_002_001_execute+0x5d0>)
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fe f8c4 	bl	8004de0 <_test_assert>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d000      	beq.n	8006c60 <mfs_test_002_001_execute+0x520>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006c5e:	e179      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(memcmp(mfs_pattern32, mfs_buffer, size) == 0, "wrong record content");
 8006c60:	9b04      	ldr	r3, [sp, #16]
 8006c62:	461a      	mov	r2, r3
 8006c64:	4927      	ldr	r1, [pc, #156]	; (8006d04 <mfs_test_002_001_execute+0x5c4>)
 8006c66:	482b      	ldr	r0, [pc, #172]	; (8006d14 <mfs_test_002_001_execute+0x5d4>)
 8006c68:	f000 fe6c 	bl	8007944 <memcmp>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	bf0c      	ite	eq
 8006c72:	2301      	moveq	r3, #1
 8006c74:	2300      	movne	r3, #0
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	4927      	ldr	r1, [pc, #156]	; (8006d18 <mfs_test_002_001_execute+0x5d8>)
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fe f8b0 	bl	8004de0 <_test_assert>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d000      	beq.n	8006c88 <mfs_test_002_001_execute+0x548>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006c86:	e165      	b.n	8006f54 <mfs_test_002_001_execute+0x814>

    /* Record 3 must be unchanged.*/
    size = sizeof mfs_buffer;
 8006c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c8c:	9304      	str	r3, [sp, #16]
    err = mfsReadRecord(&mfs1, 3, &size, mfs_buffer);
 8006c8e:	aa04      	add	r2, sp, #16
 8006c90:	4b1c      	ldr	r3, [pc, #112]	; (8006d04 <mfs_test_002_001_execute+0x5c4>)
 8006c92:	2103      	movs	r1, #3
 8006c94:	481c      	ldr	r0, [pc, #112]	; (8006d08 <mfs_test_002_001_execute+0x5c8>)
 8006c96:	f7fd fb83 	bl	80043a0 <mfsReadRecord>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f88d 301d 	strb.w	r3, [sp, #29]
    test_assert(err == MFS_NO_ERROR, "record not found");
 8006ca0:	f99d 301d 	ldrsb.w	r3, [sp, #29]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	bf0c      	ite	eq
 8006ca8:	2301      	moveq	r3, #1
 8006caa:	2300      	movne	r3, #0
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	4917      	ldr	r1, [pc, #92]	; (8006d0c <mfs_test_002_001_execute+0x5cc>)
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fe f895 	bl	8004de0 <_test_assert>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d000      	beq.n	8006cbe <mfs_test_002_001_execute+0x57e>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006cbc:	e14a      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(size == sizeof mfs_pattern16, "unexpected record length");
 8006cbe:	9b04      	ldr	r3, [sp, #16]
 8006cc0:	2b10      	cmp	r3, #16
 8006cc2:	bf0c      	ite	eq
 8006cc4:	2301      	moveq	r3, #1
 8006cc6:	2300      	movne	r3, #0
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	4911      	ldr	r1, [pc, #68]	; (8006d10 <mfs_test_002_001_execute+0x5d0>)
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fe f887 	bl	8004de0 <_test_assert>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d000      	beq.n	8006cda <mfs_test_002_001_execute+0x59a>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006cd8:	e13c      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(memcmp(mfs_pattern16, mfs_buffer, size) == 0, "wrong record content");
 8006cda:	9b04      	ldr	r3, [sp, #16]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	4909      	ldr	r1, [pc, #36]	; (8006d04 <mfs_test_002_001_execute+0x5c4>)
 8006ce0:	480e      	ldr	r0, [pc, #56]	; (8006d1c <mfs_test_002_001_execute+0x5dc>)
 8006ce2:	f000 fe2f 	bl	8007944 <memcmp>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	bf0c      	ite	eq
 8006cec:	2301      	moveq	r3, #1
 8006cee:	2300      	movne	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	4909      	ldr	r1, [pc, #36]	; (8006d18 <mfs_test_002_001_execute+0x5d8>)
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fe f873 	bl	8004de0 <_test_assert>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d019      	beq.n	8006d34 <mfs_test_002_001_execute+0x5f4>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006d00:	e128      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
 8006d02:	bf00      	nop
 8006d04:	20000c74 	.word	0x20000c74
 8006d08:	20000a70 	.word	0x20000a70
 8006d0c:	08008f34 	.word	0x08008f34
 8006d10:	08008f48 	.word	0x08008f48
 8006d14:	08008c04 	.word	0x08008c04
 8006d18:	08008f64 	.word	0x08008f64
 8006d1c:	08008bf4 	.word	0x08008bf4
 8006d20:	080092c4 	.word	0x080092c4
 8006d24:	20000a4c 	.word	0x20000a4c
 8006d28:	0800949c 	.word	0x0800949c
 8006d2c:	080092dc 	.word	0x080092dc
 8006d30:	080092b4 	.word	0x080092b4

    /* Checking internal data.*/
    test_assert(MFS_BANK_0 == mfs1.current_bank, "internal data mismatch");
 8006d34:	4b89      	ldr	r3, [pc, #548]	; (8006f5c <mfs_test_002_001_execute+0x81c>)
 8006d36:	7a1b      	ldrb	r3, [r3, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	bf0c      	ite	eq
 8006d3c:	2301      	moveq	r3, #1
 8006d3e:	2300      	movne	r3, #0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	4987      	ldr	r1, [pc, #540]	; (8006f60 <mfs_test_002_001_execute+0x820>)
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fe f84b 	bl	8004de0 <_test_assert>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d000      	beq.n	8006d52 <mfs_test_002_001_execute+0x612>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006d50:	e100      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(current_counter == mfs1.current_counter, "internal data mismatch");
 8006d52:	4b82      	ldr	r3, [pc, #520]	; (8006f5c <mfs_test_002_001_execute+0x81c>)
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	bf0c      	ite	eq
 8006d5c:	2301      	moveq	r3, #1
 8006d5e:	2300      	movne	r3, #0
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	497f      	ldr	r1, [pc, #508]	; (8006f60 <mfs_test_002_001_execute+0x820>)
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fe f83b 	bl	8004de0 <_test_assert>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d000      	beq.n	8006d72 <mfs_test_002_001_execute+0x632>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006d70:	e0f0      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(used_space == mfs1.used_space, "internal data mismatch");
 8006d72:	4b7a      	ldr	r3, [pc, #488]	; (8006f5c <mfs_test_002_001_execute+0x81c>)
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	9a08      	ldr	r2, [sp, #32]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	bf0c      	ite	eq
 8006d7c:	2301      	moveq	r3, #1
 8006d7e:	2300      	movne	r3, #0
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	4977      	ldr	r1, [pc, #476]	; (8006f60 <mfs_test_002_001_execute+0x820>)
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fe f82b 	bl	8004de0 <_test_assert>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d000      	beq.n	8006d92 <mfs_test_002_001_execute+0x652>
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006d90:	e0e0      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
  }
  test_end_step(8);

  /* [2.1.9] Performing a garbage collection, the result must not
     change.*/
  test_set_step(9);
 8006d92:	4b74      	ldr	r3, [pc, #464]	; (8006f64 <mfs_test_002_001_execute+0x824>)
 8006d94:	2209      	movs	r2, #9
 8006d96:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;

    err = mfsPerformGarbageCollection(&mfs1);
 8006d98:	4870      	ldr	r0, [pc, #448]	; (8006f5c <mfs_test_002_001_execute+0x81c>)
 8006d9a:	f7fd fe09 	bl	80049b0 <mfsPerformGarbageCollection>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f88d 301c 	strb.w	r3, [sp, #28]
    test_assert(err == MFS_NO_ERROR, "garbage collection failed");
 8006da4:	f99d 301c 	ldrsb.w	r3, [sp, #28]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	bf0c      	ite	eq
 8006dac:	2301      	moveq	r3, #1
 8006dae:	2300      	movne	r3, #0
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	496d      	ldr	r1, [pc, #436]	; (8006f68 <mfs_test_002_001_execute+0x828>)
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fe f813 	bl	8004de0 <_test_assert>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f040 80c8 	bne.w	8006f52 <mfs_test_002_001_execute+0x812>
  }
  test_end_step(9);

  /* [2.1.10] Testing outcome again after garbage collection.*/
  test_set_step(10);
 8006dc2:	4b68      	ldr	r3, [pc, #416]	; (8006f64 <mfs_test_002_001_execute+0x824>)
 8006dc4:	220a      	movs	r2, #10
 8006dc6:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;

    /* Record 1 must not be present.*/
    size = sizeof mfs_buffer;
 8006dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dcc:	9305      	str	r3, [sp, #20]
    err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 8006dce:	aa05      	add	r2, sp, #20
 8006dd0:	4b66      	ldr	r3, [pc, #408]	; (8006f6c <mfs_test_002_001_execute+0x82c>)
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	4861      	ldr	r0, [pc, #388]	; (8006f5c <mfs_test_002_001_execute+0x81c>)
 8006dd6:	f7fd fae3 	bl	80043a0 <mfsReadRecord>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f88d 301b 	strb.w	r3, [sp, #27]
    test_assert(err == MFS_ERR_NOT_FOUND, "record found");
 8006de0:	f99d 301b 	ldrsb.w	r3, [sp, #27]
 8006de4:	f113 0f03 	cmn.w	r3, #3
 8006de8:	bf0c      	ite	eq
 8006dea:	2301      	moveq	r3, #1
 8006dec:	2300      	movne	r3, #0
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	495f      	ldr	r1, [pc, #380]	; (8006f70 <mfs_test_002_001_execute+0x830>)
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fd fff4 	bl	8004de0 <_test_assert>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f040 80aa 	bne.w	8006f54 <mfs_test_002_001_execute+0x814>

    /* Record 2 must contain the new value.*/
    size = sizeof mfs_buffer;
 8006e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e04:	9305      	str	r3, [sp, #20]
    err = mfsReadRecord(&mfs1, 2, &size, mfs_buffer);
 8006e06:	aa05      	add	r2, sp, #20
 8006e08:	4b58      	ldr	r3, [pc, #352]	; (8006f6c <mfs_test_002_001_execute+0x82c>)
 8006e0a:	2102      	movs	r1, #2
 8006e0c:	4853      	ldr	r0, [pc, #332]	; (8006f5c <mfs_test_002_001_execute+0x81c>)
 8006e0e:	f7fd fac7 	bl	80043a0 <mfsReadRecord>
 8006e12:	4603      	mov	r3, r0
 8006e14:	f88d 301b 	strb.w	r3, [sp, #27]
    test_assert(err == MFS_NO_ERROR, "record not found");
 8006e18:	f99d 301b 	ldrsb.w	r3, [sp, #27]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	bf0c      	ite	eq
 8006e20:	2301      	moveq	r3, #1
 8006e22:	2300      	movne	r3, #0
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	4953      	ldr	r1, [pc, #332]	; (8006f74 <mfs_test_002_001_execute+0x834>)
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fd ffd9 	bl	8004de0 <_test_assert>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f040 808f 	bne.w	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(size == sizeof mfs_pattern32, "unexpected record length");
 8006e36:	9b05      	ldr	r3, [sp, #20]
 8006e38:	2b20      	cmp	r3, #32
 8006e3a:	bf0c      	ite	eq
 8006e3c:	2301      	moveq	r3, #1
 8006e3e:	2300      	movne	r3, #0
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	494d      	ldr	r1, [pc, #308]	; (8006f78 <mfs_test_002_001_execute+0x838>)
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fd ffcb 	bl	8004de0 <_test_assert>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f040 8081 	bne.w	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(memcmp(mfs_pattern32, mfs_buffer, size) == 0, "wrong record content");
 8006e52:	9b05      	ldr	r3, [sp, #20]
 8006e54:	461a      	mov	r2, r3
 8006e56:	4945      	ldr	r1, [pc, #276]	; (8006f6c <mfs_test_002_001_execute+0x82c>)
 8006e58:	4848      	ldr	r0, [pc, #288]	; (8006f7c <mfs_test_002_001_execute+0x83c>)
 8006e5a:	f000 fd73 	bl	8007944 <memcmp>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	bf0c      	ite	eq
 8006e64:	2301      	moveq	r3, #1
 8006e66:	2300      	movne	r3, #0
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	4945      	ldr	r1, [pc, #276]	; (8006f80 <mfs_test_002_001_execute+0x840>)
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fd ffb7 	bl	8004de0 <_test_assert>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d16d      	bne.n	8006f54 <mfs_test_002_001_execute+0x814>

    /* Record 3 must be unchanged.*/
    size = sizeof mfs_buffer;
 8006e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e7c:	9305      	str	r3, [sp, #20]
    err = mfsReadRecord(&mfs1, 3, &size, mfs_buffer);
 8006e7e:	aa05      	add	r2, sp, #20
 8006e80:	4b3a      	ldr	r3, [pc, #232]	; (8006f6c <mfs_test_002_001_execute+0x82c>)
 8006e82:	2103      	movs	r1, #3
 8006e84:	4835      	ldr	r0, [pc, #212]	; (8006f5c <mfs_test_002_001_execute+0x81c>)
 8006e86:	f7fd fa8b 	bl	80043a0 <mfsReadRecord>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	f88d 301b 	strb.w	r3, [sp, #27]
    test_assert(err == MFS_NO_ERROR, "record not found");
 8006e90:	f99d 301b 	ldrsb.w	r3, [sp, #27]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bf0c      	ite	eq
 8006e98:	2301      	moveq	r3, #1
 8006e9a:	2300      	movne	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	4935      	ldr	r1, [pc, #212]	; (8006f74 <mfs_test_002_001_execute+0x834>)
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7fd ff9d 	bl	8004de0 <_test_assert>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d153      	bne.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(size == sizeof mfs_pattern16, "unexpected record length");
 8006eac:	9b05      	ldr	r3, [sp, #20]
 8006eae:	2b10      	cmp	r3, #16
 8006eb0:	bf0c      	ite	eq
 8006eb2:	2301      	moveq	r3, #1
 8006eb4:	2300      	movne	r3, #0
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	492f      	ldr	r1, [pc, #188]	; (8006f78 <mfs_test_002_001_execute+0x838>)
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fd ff90 	bl	8004de0 <_test_assert>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d146      	bne.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(memcmp(mfs_pattern16, mfs_buffer, size) == 0, "wrong record content");
 8006ec6:	9b05      	ldr	r3, [sp, #20]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	4928      	ldr	r1, [pc, #160]	; (8006f6c <mfs_test_002_001_execute+0x82c>)
 8006ecc:	482d      	ldr	r0, [pc, #180]	; (8006f84 <mfs_test_002_001_execute+0x844>)
 8006ece:	f000 fd39 	bl	8007944 <memcmp>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bf0c      	ite	eq
 8006ed8:	2301      	moveq	r3, #1
 8006eda:	2300      	movne	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	4928      	ldr	r1, [pc, #160]	; (8006f80 <mfs_test_002_001_execute+0x840>)
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fd ff7d 	bl	8004de0 <_test_assert>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d133      	bne.n	8006f54 <mfs_test_002_001_execute+0x814>

    /* Checking internal data.*/
    test_assert(MFS_BANK_1 == mfs1.current_bank, "internal data mismatch");
 8006eec:	4b1b      	ldr	r3, [pc, #108]	; (8006f5c <mfs_test_002_001_execute+0x81c>)
 8006eee:	7a1b      	ldrb	r3, [r3, #8]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	bf0c      	ite	eq
 8006ef4:	2301      	moveq	r3, #1
 8006ef6:	2300      	movne	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	4919      	ldr	r1, [pc, #100]	; (8006f60 <mfs_test_002_001_execute+0x820>)
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fd ff6f 	bl	8004de0 <_test_assert>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d125      	bne.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(current_counter == mfs1.current_counter - 1, "internal data mismatch");
 8006f08:	4b14      	ldr	r3, [pc, #80]	; (8006f5c <mfs_test_002_001_execute+0x81c>)
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f10:	429a      	cmp	r2, r3
 8006f12:	bf0c      	ite	eq
 8006f14:	2301      	moveq	r3, #1
 8006f16:	2300      	movne	r3, #0
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	4911      	ldr	r1, [pc, #68]	; (8006f60 <mfs_test_002_001_execute+0x820>)
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fd ff5f 	bl	8004de0 <_test_assert>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d115      	bne.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(used_space == mfs1.used_space, "internal data mismatch");
 8006f28:	4b0c      	ldr	r3, [pc, #48]	; (8006f5c <mfs_test_002_001_execute+0x81c>)
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	9a08      	ldr	r2, [sp, #32]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	bf0c      	ite	eq
 8006f32:	2301      	moveq	r3, #1
 8006f34:	2300      	movne	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	4909      	ldr	r1, [pc, #36]	; (8006f60 <mfs_test_002_001_execute+0x820>)
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fd ff50 	bl	8004de0 <_test_assert>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	e006      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(err == MFS_NO_ERROR, "error starting transaction");
 8006f46:	bf00      	nop
 8006f48:	e004      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(err == MFS_NO_ERROR, "error committing transaction");
 8006f4a:	bf00      	nop
 8006f4c:	e002      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(err == MFS_NO_ERROR, "re-start failed");
 8006f4e:	bf00      	nop
 8006f50:	e000      	b.n	8006f54 <mfs_test_002_001_execute+0x814>
    test_assert(err == MFS_NO_ERROR, "garbage collection failed");
 8006f52:	bf00      	nop
  }
  test_end_step(10);
}
 8006f54:	b00d      	add	sp, #52	; 0x34
 8006f56:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f5a:	bf00      	nop
 8006f5c:	20000a70 	.word	0x20000a70
 8006f60:	080092c4 	.word	0x080092c4
 8006f64:	20000a4c 	.word	0x20000a4c
 8006f68:	080092ec 	.word	0x080092ec
 8006f6c:	20000c74 	.word	0x20000c74
 8006f70:	080092b4 	.word	0x080092b4
 8006f74:	08008f34 	.word	0x08008f34
 8006f78:	08008f48 	.word	0x08008f48
 8006f7c:	08008c04 	.word	0x08008c04
 8006f80:	08008f64 	.word	0x08008f64
 8006f84:	08008bf4 	.word	0x08008bf4
	...

08006f90 <mfs_test_002_002_setup>:
 * - [2.2.6] State must not have changed, records 1, 2 and 3 must still
 *   be there unchanged.
 * .
 */

static void mfs_test_002_002_setup(void) {
 8006f90:	b508      	push	{r3, lr}
  bank_erase(MFS_BANK_0);
 8006f92:	2000      	movs	r0, #0
 8006f94:	f7fe f924 	bl	80051e0 <bank_erase>
  bank_erase(MFS_BANK_1);
 8006f98:	2001      	movs	r0, #1
 8006f9a:	f7fe f921 	bl	80051e0 <bank_erase>
  mfsStart(&mfs1, &mfscfg1);
 8006f9e:	4902      	ldr	r1, [pc, #8]	; (8006fa8 <mfs_test_002_002_setup+0x18>)
 8006fa0:	4802      	ldr	r0, [pc, #8]	; (8006fac <mfs_test_002_002_setup+0x1c>)
 8006fa2:	f7fd f9ad 	bl	8004300 <mfsStart>
}
 8006fa6:	bd08      	pop	{r3, pc}
 8006fa8:	0800949c 	.word	0x0800949c
 8006fac:	20000a70 	.word	0x20000a70

08006fb0 <mfs_test_002_002_teardown>:

static void mfs_test_002_002_teardown(void) {
 8006fb0:	b508      	push	{r3, lr}
  mfsStop(&mfs1);
 8006fb2:	4802      	ldr	r0, [pc, #8]	; (8006fbc <mfs_test_002_002_teardown+0xc>)
 8006fb4:	f7fd f9b4 	bl	8004320 <mfsStop>
}
 8006fb8:	bd08      	pop	{r3, pc}
 8006fba:	bf00      	nop
 8006fbc:	20000a70 	.word	0x20000a70

08006fc0 <mfs_test_002_002_execute>:

static void mfs_test_002_002_execute(void) {
 8006fc0:	b500      	push	{lr}
 8006fc2:	b089      	sub	sp, #36	; 0x24
  uint32_t current_counter;
  uint32_t used_space;

  /* [2.2.1] Records 1, 2 and 3 are created, MFS_NO_ERROR is
     expected.*/
  test_set_step(1);
 8006fc4:	4b93      	ldr	r3, [pc, #588]	; (8007214 <mfs_test_002_002_execute+0x254>)
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;

    err = mfsWriteRecord(&mfs1, 1, sizeof mfs_pattern16, mfs_pattern16);
 8006fca:	4b93      	ldr	r3, [pc, #588]	; (8007218 <mfs_test_002_002_execute+0x258>)
 8006fcc:	2210      	movs	r2, #16
 8006fce:	2101      	movs	r1, #1
 8006fd0:	4892      	ldr	r0, [pc, #584]	; (800721c <mfs_test_002_002_execute+0x25c>)
 8006fd2:	f7fd fa65 	bl	80044a0 <mfsWriteRecord>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	f88d 301f 	strb.w	r3, [sp, #31]
    test_assert(err == MFS_NO_ERROR, "error creating record 1");
 8006fdc:	f99d 301f 	ldrsb.w	r3, [sp, #31]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bf0c      	ite	eq
 8006fe4:	2301      	moveq	r3, #1
 8006fe6:	2300      	movne	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	498d      	ldr	r1, [pc, #564]	; (8007220 <mfs_test_002_002_execute+0x260>)
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fd fef7 	bl	8004de0 <_test_assert>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f040 81f0 	bne.w	80073da <mfs_test_002_002_execute+0x41a>
    err = mfsWriteRecord(&mfs1, 2, sizeof mfs_pattern16, mfs_pattern16);
 8006ffa:	4b87      	ldr	r3, [pc, #540]	; (8007218 <mfs_test_002_002_execute+0x258>)
 8006ffc:	2210      	movs	r2, #16
 8006ffe:	2102      	movs	r1, #2
 8007000:	4886      	ldr	r0, [pc, #536]	; (800721c <mfs_test_002_002_execute+0x25c>)
 8007002:	f7fd fa4d 	bl	80044a0 <mfsWriteRecord>
 8007006:	4603      	mov	r3, r0
 8007008:	f88d 301f 	strb.w	r3, [sp, #31]
    test_assert(err == MFS_NO_ERROR, "error creating record 2");
 800700c:	f99d 301f 	ldrsb.w	r3, [sp, #31]
 8007010:	2b00      	cmp	r3, #0
 8007012:	bf0c      	ite	eq
 8007014:	2301      	moveq	r3, #1
 8007016:	2300      	movne	r3, #0
 8007018:	b2db      	uxtb	r3, r3
 800701a:	4982      	ldr	r1, [pc, #520]	; (8007224 <mfs_test_002_002_execute+0x264>)
 800701c:	4618      	mov	r0, r3
 800701e:	f7fd fedf 	bl	8004de0 <_test_assert>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	f040 81d8 	bne.w	80073da <mfs_test_002_002_execute+0x41a>
    err = mfsWriteRecord(&mfs1, 3, sizeof mfs_pattern16, mfs_pattern16);
 800702a:	4b7b      	ldr	r3, [pc, #492]	; (8007218 <mfs_test_002_002_execute+0x258>)
 800702c:	2210      	movs	r2, #16
 800702e:	2103      	movs	r1, #3
 8007030:	487a      	ldr	r0, [pc, #488]	; (800721c <mfs_test_002_002_execute+0x25c>)
 8007032:	f7fd fa35 	bl	80044a0 <mfsWriteRecord>
 8007036:	4603      	mov	r3, r0
 8007038:	f88d 301f 	strb.w	r3, [sp, #31]
    test_assert(err == MFS_NO_ERROR, "error creating record 3");
 800703c:	f99d 301f 	ldrsb.w	r3, [sp, #31]
 8007040:	2b00      	cmp	r3, #0
 8007042:	bf0c      	ite	eq
 8007044:	2301      	moveq	r3, #1
 8007046:	2300      	movne	r3, #0
 8007048:	b2db      	uxtb	r3, r3
 800704a:	4977      	ldr	r1, [pc, #476]	; (8007228 <mfs_test_002_002_execute+0x268>)
 800704c:	4618      	mov	r0, r3
 800704e:	f7fd fec7 	bl	8004de0 <_test_assert>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	f040 81c0 	bne.w	80073da <mfs_test_002_002_execute+0x41a>
  }
  test_end_step(1);

  /* [2.2.2] Presence of records 1, 2 and 3 is verified, MFS_NO_ERROR
     is expected.*/
  test_set_step(2);
 800705a:	4b6e      	ldr	r3, [pc, #440]	; (8007214 <mfs_test_002_002_execute+0x254>)
 800705c:	2202      	movs	r2, #2
 800705e:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;

    size = sizeof mfs_buffer;
 8007060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007064:	9301      	str	r3, [sp, #4]
    err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 8007066:	aa01      	add	r2, sp, #4
 8007068:	4b70      	ldr	r3, [pc, #448]	; (800722c <mfs_test_002_002_execute+0x26c>)
 800706a:	2101      	movs	r1, #1
 800706c:	486b      	ldr	r0, [pc, #428]	; (800721c <mfs_test_002_002_execute+0x25c>)
 800706e:	f7fd f997 	bl	80043a0 <mfsReadRecord>
 8007072:	4603      	mov	r3, r0
 8007074:	f88d 301e 	strb.w	r3, [sp, #30]
    test_assert(err == MFS_NO_ERROR, "record not found");
 8007078:	f99d 301e 	ldrsb.w	r3, [sp, #30]
 800707c:	2b00      	cmp	r3, #0
 800707e:	bf0c      	ite	eq
 8007080:	2301      	moveq	r3, #1
 8007082:	2300      	movne	r3, #0
 8007084:	b2db      	uxtb	r3, r3
 8007086:	496a      	ldr	r1, [pc, #424]	; (8007230 <mfs_test_002_002_execute+0x270>)
 8007088:	4618      	mov	r0, r3
 800708a:	f7fd fea9 	bl	8004de0 <_test_assert>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d000      	beq.n	8007096 <mfs_test_002_002_execute+0xd6>
 8007094:	e1a1      	b.n	80073da <mfs_test_002_002_execute+0x41a>
    size = sizeof mfs_buffer;
 8007096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800709a:	9301      	str	r3, [sp, #4]
    err = mfsReadRecord(&mfs1, 2, &size, mfs_buffer);
 800709c:	aa01      	add	r2, sp, #4
 800709e:	4b63      	ldr	r3, [pc, #396]	; (800722c <mfs_test_002_002_execute+0x26c>)
 80070a0:	2102      	movs	r1, #2
 80070a2:	485e      	ldr	r0, [pc, #376]	; (800721c <mfs_test_002_002_execute+0x25c>)
 80070a4:	f7fd f97c 	bl	80043a0 <mfsReadRecord>
 80070a8:	4603      	mov	r3, r0
 80070aa:	f88d 301e 	strb.w	r3, [sp, #30]
    test_assert(err == MFS_NO_ERROR, "record not found");
 80070ae:	f99d 301e 	ldrsb.w	r3, [sp, #30]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	bf0c      	ite	eq
 80070b6:	2301      	moveq	r3, #1
 80070b8:	2300      	movne	r3, #0
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	495c      	ldr	r1, [pc, #368]	; (8007230 <mfs_test_002_002_execute+0x270>)
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fd fe8e 	bl	8004de0 <_test_assert>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d000      	beq.n	80070cc <mfs_test_002_002_execute+0x10c>
    test_assert(err == MFS_NO_ERROR, "record not found");
 80070ca:	e186      	b.n	80073da <mfs_test_002_002_execute+0x41a>
    size = sizeof mfs_buffer;
 80070cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070d0:	9301      	str	r3, [sp, #4]
    err = mfsReadRecord(&mfs1, 3, &size, mfs_buffer);
 80070d2:	aa01      	add	r2, sp, #4
 80070d4:	4b55      	ldr	r3, [pc, #340]	; (800722c <mfs_test_002_002_execute+0x26c>)
 80070d6:	2103      	movs	r1, #3
 80070d8:	4850      	ldr	r0, [pc, #320]	; (800721c <mfs_test_002_002_execute+0x25c>)
 80070da:	f7fd f961 	bl	80043a0 <mfsReadRecord>
 80070de:	4603      	mov	r3, r0
 80070e0:	f88d 301e 	strb.w	r3, [sp, #30]
    test_assert(err == MFS_NO_ERROR, "record not found");
 80070e4:	f99d 301e 	ldrsb.w	r3, [sp, #30]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	bf0c      	ite	eq
 80070ec:	2301      	moveq	r3, #1
 80070ee:	2300      	movne	r3, #0
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	494f      	ldr	r1, [pc, #316]	; (8007230 <mfs_test_002_002_execute+0x270>)
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7fd fe73 	bl	8004de0 <_test_assert>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d000      	beq.n	8007102 <mfs_test_002_002_execute+0x142>
    test_assert(err == MFS_NO_ERROR, "record not found");
 8007100:	e16b      	b.n	80073da <mfs_test_002_002_execute+0x41a>
  }
  test_end_step(2);

  /* [2.2.3] Starting a transaction with sufficient pre-allocated
     space, MFS_NO_ERROR is expected..*/
  test_set_step(3);
 8007102:	4b44      	ldr	r3, [pc, #272]	; (8007214 <mfs_test_002_002_execute+0x254>)
 8007104:	2203      	movs	r2, #3
 8007106:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;

    err = mfsStartTransaction(&mfs1, 1024U);
 8007108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800710c:	4843      	ldr	r0, [pc, #268]	; (800721c <mfs_test_002_002_execute+0x25c>)
 800710e:	f7fd fc67 	bl	80049e0 <mfsStartTransaction>
 8007112:	4603      	mov	r3, r0
 8007114:	f88d 301d 	strb.w	r3, [sp, #29]
    test_assert(err == MFS_NO_ERROR, "error starting transaction");
 8007118:	f99d 301d 	ldrsb.w	r3, [sp, #29]
 800711c:	2b00      	cmp	r3, #0
 800711e:	bf0c      	ite	eq
 8007120:	2301      	moveq	r3, #1
 8007122:	2300      	movne	r3, #0
 8007124:	b2db      	uxtb	r3, r3
 8007126:	4943      	ldr	r1, [pc, #268]	; (8007234 <mfs_test_002_002_execute+0x274>)
 8007128:	4618      	mov	r0, r3
 800712a:	f7fd fe59 	bl	8004de0 <_test_assert>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	f040 814f 	bne.w	80073d4 <mfs_test_002_002_execute+0x414>
  }
  test_end_step(3);

  /* [2.2.4] Atomically erasing record 1, updating record 2, reading
     record 3.*/
  test_set_step(4);
 8007136:	4b37      	ldr	r3, [pc, #220]	; (8007214 <mfs_test_002_002_execute+0x254>)
 8007138:	2204      	movs	r2, #4
 800713a:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;

    err = mfsEraseRecord(&mfs1, 1);
 800713c:	2101      	movs	r1, #1
 800713e:	4837      	ldr	r0, [pc, #220]	; (800721c <mfs_test_002_002_execute+0x25c>)
 8007140:	f7fd fb16 	bl	8004770 <mfsEraseRecord>
 8007144:	4603      	mov	r3, r0
 8007146:	f88d 301c 	strb.w	r3, [sp, #28]
    test_assert(err == MFS_NO_ERROR, "error erasing record 1");
 800714a:	f99d 301c 	ldrsb.w	r3, [sp, #28]
 800714e:	2b00      	cmp	r3, #0
 8007150:	bf0c      	ite	eq
 8007152:	2301      	moveq	r3, #1
 8007154:	2300      	movne	r3, #0
 8007156:	b2db      	uxtb	r3, r3
 8007158:	4937      	ldr	r1, [pc, #220]	; (8007238 <mfs_test_002_002_execute+0x278>)
 800715a:	4618      	mov	r0, r3
 800715c:	f7fd fe40 	bl	8004de0 <_test_assert>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d000      	beq.n	8007168 <mfs_test_002_002_execute+0x1a8>
 8007166:	e138      	b.n	80073da <mfs_test_002_002_execute+0x41a>
    err = mfsWriteRecord(&mfs1, 2, sizeof mfs_pattern32, mfs_pattern32);
 8007168:	4b34      	ldr	r3, [pc, #208]	; (800723c <mfs_test_002_002_execute+0x27c>)
 800716a:	2220      	movs	r2, #32
 800716c:	2102      	movs	r1, #2
 800716e:	482b      	ldr	r0, [pc, #172]	; (800721c <mfs_test_002_002_execute+0x25c>)
 8007170:	f7fd f996 	bl	80044a0 <mfsWriteRecord>
 8007174:	4603      	mov	r3, r0
 8007176:	f88d 301c 	strb.w	r3, [sp, #28]
    test_assert(err == MFS_NO_ERROR, "error writing record 2");
 800717a:	f99d 301c 	ldrsb.w	r3, [sp, #28]
 800717e:	2b00      	cmp	r3, #0
 8007180:	bf0c      	ite	eq
 8007182:	2301      	moveq	r3, #1
 8007184:	2300      	movne	r3, #0
 8007186:	b2db      	uxtb	r3, r3
 8007188:	492d      	ldr	r1, [pc, #180]	; (8007240 <mfs_test_002_002_execute+0x280>)
 800718a:	4618      	mov	r0, r3
 800718c:	f7fd fe28 	bl	8004de0 <_test_assert>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d000      	beq.n	8007198 <mfs_test_002_002_execute+0x1d8>
    test_assert(err == MFS_NO_ERROR, "error erasing record 1");
 8007196:	e120      	b.n	80073da <mfs_test_002_002_execute+0x41a>
    size = sizeof mfs_buffer;
 8007198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800719c:	9302      	str	r3, [sp, #8]
    err = mfsReadRecord(&mfs1, 3, &size, mfs_buffer);
 800719e:	aa02      	add	r2, sp, #8
 80071a0:	4b22      	ldr	r3, [pc, #136]	; (800722c <mfs_test_002_002_execute+0x26c>)
 80071a2:	2103      	movs	r1, #3
 80071a4:	481d      	ldr	r0, [pc, #116]	; (800721c <mfs_test_002_002_execute+0x25c>)
 80071a6:	f7fd f8fb 	bl	80043a0 <mfsReadRecord>
 80071aa:	4603      	mov	r3, r0
 80071ac:	f88d 301c 	strb.w	r3, [sp, #28]
    test_assert(err == MFS_NO_ERROR, "record not found");
 80071b0:	f99d 301c 	ldrsb.w	r3, [sp, #28]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	bf0c      	ite	eq
 80071b8:	2301      	moveq	r3, #1
 80071ba:	2300      	movne	r3, #0
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	491c      	ldr	r1, [pc, #112]	; (8007230 <mfs_test_002_002_execute+0x270>)
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fd fe0d 	bl	8004de0 <_test_assert>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d000      	beq.n	80071ce <mfs_test_002_002_execute+0x20e>
    test_assert(err == MFS_NO_ERROR, "error erasing record 1");
 80071cc:	e105      	b.n	80073da <mfs_test_002_002_execute+0x41a>
    test_assert(size == sizeof mfs_pattern16, "unexpected record length");
 80071ce:	9b02      	ldr	r3, [sp, #8]
 80071d0:	2b10      	cmp	r3, #16
 80071d2:	bf0c      	ite	eq
 80071d4:	2301      	moveq	r3, #1
 80071d6:	2300      	movne	r3, #0
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	491a      	ldr	r1, [pc, #104]	; (8007244 <mfs_test_002_002_execute+0x284>)
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fd fdff 	bl	8004de0 <_test_assert>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d000      	beq.n	80071ea <mfs_test_002_002_execute+0x22a>
    test_assert(err == MFS_NO_ERROR, "error erasing record 1");
 80071e8:	e0f7      	b.n	80073da <mfs_test_002_002_execute+0x41a>
    test_assert(memcmp(mfs_pattern16, mfs_buffer, size) == 0, "wrong record content");
 80071ea:	9b02      	ldr	r3, [sp, #8]
 80071ec:	461a      	mov	r2, r3
 80071ee:	490f      	ldr	r1, [pc, #60]	; (800722c <mfs_test_002_002_execute+0x26c>)
 80071f0:	4809      	ldr	r0, [pc, #36]	; (8007218 <mfs_test_002_002_execute+0x258>)
 80071f2:	f000 fba7 	bl	8007944 <memcmp>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	bf0c      	ite	eq
 80071fc:	2301      	moveq	r3, #1
 80071fe:	2300      	movne	r3, #0
 8007200:	b2db      	uxtb	r3, r3
 8007202:	4911      	ldr	r1, [pc, #68]	; (8007248 <mfs_test_002_002_execute+0x288>)
 8007204:	4618      	mov	r0, r3
 8007206:	f7fd fdeb 	bl	8004de0 <_test_assert>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d01d      	beq.n	800724c <mfs_test_002_002_execute+0x28c>
    test_assert(err == MFS_NO_ERROR, "error erasing record 1");
 8007210:	e0e3      	b.n	80073da <mfs_test_002_002_execute+0x41a>
 8007212:	bf00      	nop
 8007214:	20000a4c 	.word	0x20000a4c
 8007218:	08008bf4 	.word	0x08008bf4
 800721c:	20000a70 	.word	0x20000a70
 8007220:	08008fd8 	.word	0x08008fd8
 8007224:	08008ff0 	.word	0x08008ff0
 8007228:	08009008 	.word	0x08009008
 800722c:	20000c74 	.word	0x20000c74
 8007230:	08008f34 	.word	0x08008f34
 8007234:	08009248 	.word	0x08009248
 8007238:	08009264 	.word	0x08009264
 800723c:	08008c04 	.word	0x08008c04
 8007240:	0800927c 	.word	0x0800927c
 8007244:	08008f48 	.word	0x08008f48
 8007248:	08008f64 	.word	0x08008f64

    /* Saving some internal state for successive checks.*/
    current_counter = mfs1.current_counter;
 800724c:	4b64      	ldr	r3, [pc, #400]	; (80073e0 <mfs_test_002_002_execute+0x420>)
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	9306      	str	r3, [sp, #24]
    used_space      = mfs1.used_space;
 8007252:	4b63      	ldr	r3, [pc, #396]	; (80073e0 <mfs_test_002_002_execute+0x420>)
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	9305      	str	r3, [sp, #20]
  }
  test_end_step(4);

  /* [2.2.5] Rolling back the transaction, MFS_NO_ERROR is expected.*/
  test_set_step(5);
 8007258:	4b62      	ldr	r3, [pc, #392]	; (80073e4 <mfs_test_002_002_execute+0x424>)
 800725a:	2205      	movs	r2, #5
 800725c:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;

    err = mfsRollbackTransaction(&mfs1);
 800725e:	4860      	ldr	r0, [pc, #384]	; (80073e0 <mfs_test_002_002_execute+0x420>)
 8007260:	f7fd fcd6 	bl	8004c10 <mfsRollbackTransaction>
 8007264:	4603      	mov	r3, r0
 8007266:	f88d 3013 	strb.w	r3, [sp, #19]
    test_assert(err == MFS_NO_ERROR, "error rolling back transaction");
 800726a:	f99d 3013 	ldrsb.w	r3, [sp, #19]
 800726e:	2b00      	cmp	r3, #0
 8007270:	bf0c      	ite	eq
 8007272:	2301      	moveq	r3, #1
 8007274:	2300      	movne	r3, #0
 8007276:	b2db      	uxtb	r3, r3
 8007278:	495b      	ldr	r1, [pc, #364]	; (80073e8 <mfs_test_002_002_execute+0x428>)
 800727a:	4618      	mov	r0, r3
 800727c:	f7fd fdb0 	bl	8004de0 <_test_assert>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	f040 80a8 	bne.w	80073d8 <mfs_test_002_002_execute+0x418>
  }
  test_end_step(5);

  /* [2.2.6] State must not have changed, records 1, 2 and 3 must still
     be there unchanged.*/
  test_set_step(6);
 8007288:	4b56      	ldr	r3, [pc, #344]	; (80073e4 <mfs_test_002_002_execute+0x424>)
 800728a:	2206      	movs	r2, #6
 800728c:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;

    size = sizeof mfs_buffer;
 800728e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007292:	9303      	str	r3, [sp, #12]
    err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 8007294:	aa03      	add	r2, sp, #12
 8007296:	4b55      	ldr	r3, [pc, #340]	; (80073ec <mfs_test_002_002_execute+0x42c>)
 8007298:	2101      	movs	r1, #1
 800729a:	4851      	ldr	r0, [pc, #324]	; (80073e0 <mfs_test_002_002_execute+0x420>)
 800729c:	f7fd f880 	bl	80043a0 <mfsReadRecord>
 80072a0:	4603      	mov	r3, r0
 80072a2:	f88d 3012 	strb.w	r3, [sp, #18]
    test_assert(err == MFS_NO_ERROR, "record not found");
 80072a6:	f99d 3012 	ldrsb.w	r3, [sp, #18]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	bf0c      	ite	eq
 80072ae:	2301      	moveq	r3, #1
 80072b0:	2300      	movne	r3, #0
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	494e      	ldr	r1, [pc, #312]	; (80073f0 <mfs_test_002_002_execute+0x430>)
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fd fd92 	bl	8004de0 <_test_assert>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f040 808b 	bne.w	80073da <mfs_test_002_002_execute+0x41a>
    test_assert(size == sizeof mfs_pattern16, "size changed");
 80072c4:	9b03      	ldr	r3, [sp, #12]
 80072c6:	2b10      	cmp	r3, #16
 80072c8:	bf0c      	ite	eq
 80072ca:	2301      	moveq	r3, #1
 80072cc:	2300      	movne	r3, #0
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	4948      	ldr	r1, [pc, #288]	; (80073f4 <mfs_test_002_002_execute+0x434>)
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fd fd84 	bl	8004de0 <_test_assert>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d17d      	bne.n	80073da <mfs_test_002_002_execute+0x41a>
    size = sizeof mfs_buffer;
 80072de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072e2:	9303      	str	r3, [sp, #12]
    err = mfsReadRecord(&mfs1, 2, &size, mfs_buffer);
 80072e4:	aa03      	add	r2, sp, #12
 80072e6:	4b41      	ldr	r3, [pc, #260]	; (80073ec <mfs_test_002_002_execute+0x42c>)
 80072e8:	2102      	movs	r1, #2
 80072ea:	483d      	ldr	r0, [pc, #244]	; (80073e0 <mfs_test_002_002_execute+0x420>)
 80072ec:	f7fd f858 	bl	80043a0 <mfsReadRecord>
 80072f0:	4603      	mov	r3, r0
 80072f2:	f88d 3012 	strb.w	r3, [sp, #18]
    test_assert(err == MFS_NO_ERROR, "record not found");
 80072f6:	f99d 3012 	ldrsb.w	r3, [sp, #18]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	bf0c      	ite	eq
 80072fe:	2301      	moveq	r3, #1
 8007300:	2300      	movne	r3, #0
 8007302:	b2db      	uxtb	r3, r3
 8007304:	493a      	ldr	r1, [pc, #232]	; (80073f0 <mfs_test_002_002_execute+0x430>)
 8007306:	4618      	mov	r0, r3
 8007308:	f7fd fd6a 	bl	8004de0 <_test_assert>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d163      	bne.n	80073da <mfs_test_002_002_execute+0x41a>
    test_assert(size == sizeof mfs_pattern16, "size changed");
 8007312:	9b03      	ldr	r3, [sp, #12]
 8007314:	2b10      	cmp	r3, #16
 8007316:	bf0c      	ite	eq
 8007318:	2301      	moveq	r3, #1
 800731a:	2300      	movne	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	4935      	ldr	r1, [pc, #212]	; (80073f4 <mfs_test_002_002_execute+0x434>)
 8007320:	4618      	mov	r0, r3
 8007322:	f7fd fd5d 	bl	8004de0 <_test_assert>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d156      	bne.n	80073da <mfs_test_002_002_execute+0x41a>
    size = sizeof mfs_buffer;
 800732c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007330:	9303      	str	r3, [sp, #12]
    err = mfsReadRecord(&mfs1, 3, &size, mfs_buffer);
 8007332:	aa03      	add	r2, sp, #12
 8007334:	4b2d      	ldr	r3, [pc, #180]	; (80073ec <mfs_test_002_002_execute+0x42c>)
 8007336:	2103      	movs	r1, #3
 8007338:	4829      	ldr	r0, [pc, #164]	; (80073e0 <mfs_test_002_002_execute+0x420>)
 800733a:	f7fd f831 	bl	80043a0 <mfsReadRecord>
 800733e:	4603      	mov	r3, r0
 8007340:	f88d 3012 	strb.w	r3, [sp, #18]
    test_assert(err == MFS_NO_ERROR, "record not found");
 8007344:	f99d 3012 	ldrsb.w	r3, [sp, #18]
 8007348:	2b00      	cmp	r3, #0
 800734a:	bf0c      	ite	eq
 800734c:	2301      	moveq	r3, #1
 800734e:	2300      	movne	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	4927      	ldr	r1, [pc, #156]	; (80073f0 <mfs_test_002_002_execute+0x430>)
 8007354:	4618      	mov	r0, r3
 8007356:	f7fd fd43 	bl	8004de0 <_test_assert>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d13c      	bne.n	80073da <mfs_test_002_002_execute+0x41a>
    test_assert(size == sizeof mfs_pattern16, "size changed");
 8007360:	9b03      	ldr	r3, [sp, #12]
 8007362:	2b10      	cmp	r3, #16
 8007364:	bf0c      	ite	eq
 8007366:	2301      	moveq	r3, #1
 8007368:	2300      	movne	r3, #0
 800736a:	b2db      	uxtb	r3, r3
 800736c:	4921      	ldr	r1, [pc, #132]	; (80073f4 <mfs_test_002_002_execute+0x434>)
 800736e:	4618      	mov	r0, r3
 8007370:	f7fd fd36 	bl	8004de0 <_test_assert>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d12f      	bne.n	80073da <mfs_test_002_002_execute+0x41a>

    /* Checking internal data.*/
    test_assert(MFS_BANK_1 == mfs1.current_bank, "internal data mismatch");
 800737a:	4b19      	ldr	r3, [pc, #100]	; (80073e0 <mfs_test_002_002_execute+0x420>)
 800737c:	7a1b      	ldrb	r3, [r3, #8]
 800737e:	2b01      	cmp	r3, #1
 8007380:	bf0c      	ite	eq
 8007382:	2301      	moveq	r3, #1
 8007384:	2300      	movne	r3, #0
 8007386:	b2db      	uxtb	r3, r3
 8007388:	491b      	ldr	r1, [pc, #108]	; (80073f8 <mfs_test_002_002_execute+0x438>)
 800738a:	4618      	mov	r0, r3
 800738c:	f7fd fd28 	bl	8004de0 <_test_assert>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d121      	bne.n	80073da <mfs_test_002_002_execute+0x41a>
    test_assert(current_counter == mfs1.current_counter - 1, "internal data mismatch");
 8007396:	4b12      	ldr	r3, [pc, #72]	; (80073e0 <mfs_test_002_002_execute+0x420>)
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	3b01      	subs	r3, #1
 800739c:	9a06      	ldr	r2, [sp, #24]
 800739e:	429a      	cmp	r2, r3
 80073a0:	bf0c      	ite	eq
 80073a2:	2301      	moveq	r3, #1
 80073a4:	2300      	movne	r3, #0
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	4913      	ldr	r1, [pc, #76]	; (80073f8 <mfs_test_002_002_execute+0x438>)
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fd fd18 	bl	8004de0 <_test_assert>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d111      	bne.n	80073da <mfs_test_002_002_execute+0x41a>
    test_assert(used_space == mfs1.used_space, "internal data mismatch");
 80073b6:	4b0a      	ldr	r3, [pc, #40]	; (80073e0 <mfs_test_002_002_execute+0x420>)
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	9a05      	ldr	r2, [sp, #20]
 80073bc:	429a      	cmp	r2, r3
 80073be:	bf0c      	ite	eq
 80073c0:	2301      	moveq	r3, #1
 80073c2:	2300      	movne	r3, #0
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	490c      	ldr	r1, [pc, #48]	; (80073f8 <mfs_test_002_002_execute+0x438>)
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fd fd09 	bl	8004de0 <_test_assert>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	e002      	b.n	80073da <mfs_test_002_002_execute+0x41a>
    test_assert(err == MFS_NO_ERROR, "error starting transaction");
 80073d4:	bf00      	nop
 80073d6:	e000      	b.n	80073da <mfs_test_002_002_execute+0x41a>
    test_assert(err == MFS_NO_ERROR, "error rolling back transaction");
 80073d8:	bf00      	nop
  }
  test_end_step(6);
}
 80073da:	b009      	add	sp, #36	; 0x24
 80073dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80073e0:	20000a70 	.word	0x20000a70
 80073e4:	20000a4c 	.word	0x20000a4c
 80073e8:	08009318 	.word	0x08009318
 80073ec:	20000c74 	.word	0x20000c74
 80073f0:	08008f34 	.word	0x08008f34
 80073f4:	08008bcc 	.word	0x08008bcc
 80073f8:	080092c4 	.word	0x080092c4
 80073fc:	00000000 	.word	0x00000000

08007400 <mfs_test_002_003_setup>:
 *   header, MFS_NO_ERROR is expected.
 * - [2.3.6] Rolling back, MFS_NO_ERROR is expected.
 * .
 */

static void mfs_test_002_003_setup(void) {
 8007400:	b508      	push	{r3, lr}
  bank_erase(MFS_BANK_0);
 8007402:	2000      	movs	r0, #0
 8007404:	f7fd feec 	bl	80051e0 <bank_erase>
  bank_erase(MFS_BANK_1);
 8007408:	2001      	movs	r0, #1
 800740a:	f7fd fee9 	bl	80051e0 <bank_erase>
  mfsStart(&mfs1, &mfscfg1);
 800740e:	4902      	ldr	r1, [pc, #8]	; (8007418 <mfs_test_002_003_setup+0x18>)
 8007410:	4802      	ldr	r0, [pc, #8]	; (800741c <mfs_test_002_003_setup+0x1c>)
 8007412:	f7fc ff75 	bl	8004300 <mfsStart>
}
 8007416:	bd08      	pop	{r3, pc}
 8007418:	0800949c 	.word	0x0800949c
 800741c:	20000a70 	.word	0x20000a70

08007420 <mfs_test_002_003_teardown>:

static void mfs_test_002_003_teardown(void) {
 8007420:	b508      	push	{r3, lr}
  mfsStop(&mfs1);
 8007422:	4802      	ldr	r0, [pc, #8]	; (800742c <mfs_test_002_003_teardown+0xc>)
 8007424:	f7fc ff7c 	bl	8004320 <mfsStop>
}
 8007428:	bd08      	pop	{r3, pc}
 800742a:	bf00      	nop
 800742c:	20000a70 	.word	0x20000a70

08007430 <mfs_test_002_003_execute>:

static void mfs_test_002_003_execute(void) {
 8007430:	b500      	push	{lr}
 8007432:	b08d      	sub	sp, #52	; 0x34

  /* [2.3.1] Filling up the storage by writing records with increasing
     IDs, MFS_NO_ERROR is expected.*/
  test_set_step(1);
 8007434:	4b8e      	ldr	r3, [pc, #568]	; (8007670 <mfs_test_002_003_execute+0x240>)
 8007436:	2201      	movs	r2, #1
 8007438:	601a      	str	r2, [r3, #0]
  {
    mfs_id_t id;
    mfs_id_t id_max = (mfscfg1.bank_size - (sizeof (mfs_bank_header_t) +
 800743a:	4b8e      	ldr	r3, [pc, #568]	; (8007674 <mfs_test_002_003_execute+0x244>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	3b20      	subs	r3, #32
 8007440:	4a8d      	ldr	r2, [pc, #564]	; (8007678 <mfs_test_002_003_execute+0x248>)
 8007442:	fba2 2303 	umull	r2, r3, r2, r3
 8007446:	09db      	lsrs	r3, r3, #7
 8007448:	930a      	str	r3, [sp, #40]	; 0x28
                                            sizeof (mfs_data_header_t))) /
                      (sizeof (mfs_data_header_t) + sizeof mfs_pattern512);

    for (id = 1; id <= id_max; id++) {
 800744a:	2301      	movs	r3, #1
 800744c:	930b      	str	r3, [sp, #44]	; 0x2c
 800744e:	e059      	b.n	8007504 <mfs_test_002_003_execute+0xd4>
      mfs_error_t err;
      size_t size;

      err = mfsWriteRecord(&mfs1, id, sizeof mfs_pattern512, mfs_pattern512);
 8007450:	4b8a      	ldr	r3, [pc, #552]	; (800767c <mfs_test_002_003_execute+0x24c>)
 8007452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007456:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007458:	4889      	ldr	r0, [pc, #548]	; (8007680 <mfs_test_002_003_execute+0x250>)
 800745a:	f7fd f821 	bl	80044a0 <mfsWriteRecord>
 800745e:	4603      	mov	r3, r0
 8007460:	f88d 300d 	strb.w	r3, [sp, #13]
      test_assert(err == MFS_NO_ERROR, "error creating the record");
 8007464:	f99d 300d 	ldrsb.w	r3, [sp, #13]
 8007468:	2b00      	cmp	r3, #0
 800746a:	bf0c      	ite	eq
 800746c:	2301      	moveq	r3, #1
 800746e:	2300      	movne	r3, #0
 8007470:	b2db      	uxtb	r3, r3
 8007472:	4984      	ldr	r1, [pc, #528]	; (8007684 <mfs_test_002_003_execute+0x254>)
 8007474:	4618      	mov	r0, r3
 8007476:	f7fd fcb3 	bl	8004de0 <_test_assert>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d000      	beq.n	8007482 <mfs_test_002_003_execute+0x52>
 8007480:	e0f2      	b.n	8007668 <mfs_test_002_003_execute+0x238>
      size = sizeof mfs_buffer;
 8007482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007486:	9302      	str	r3, [sp, #8]
      err = mfsReadRecord(&mfs1, id, &size, mfs_buffer);
 8007488:	aa02      	add	r2, sp, #8
 800748a:	4b7f      	ldr	r3, [pc, #508]	; (8007688 <mfs_test_002_003_execute+0x258>)
 800748c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800748e:	487c      	ldr	r0, [pc, #496]	; (8007680 <mfs_test_002_003_execute+0x250>)
 8007490:	f7fc ff86 	bl	80043a0 <mfsReadRecord>
 8007494:	4603      	mov	r3, r0
 8007496:	f88d 300d 	strb.w	r3, [sp, #13]
      test_assert(err == MFS_NO_ERROR,
 800749a:	f99d 300d 	ldrsb.w	r3, [sp, #13]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	bf0c      	ite	eq
 80074a2:	2301      	moveq	r3, #1
 80074a4:	2300      	movne	r3, #0
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	4978      	ldr	r1, [pc, #480]	; (800768c <mfs_test_002_003_execute+0x25c>)
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fd fc98 	bl	8004de0 <_test_assert>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d000      	beq.n	80074b8 <mfs_test_002_003_execute+0x88>
      test_assert(err == MFS_NO_ERROR, "error creating the record");
 80074b6:	e0d7      	b.n	8007668 <mfs_test_002_003_execute+0x238>
                  "record not found");
      test_assert(size == sizeof mfs_pattern512,
 80074b8:	9b02      	ldr	r3, [sp, #8]
 80074ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074be:	bf0c      	ite	eq
 80074c0:	2301      	moveq	r3, #1
 80074c2:	2300      	movne	r3, #0
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	4972      	ldr	r1, [pc, #456]	; (8007690 <mfs_test_002_003_execute+0x260>)
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7fd fc89 	bl	8004de0 <_test_assert>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d000      	beq.n	80074d6 <mfs_test_002_003_execute+0xa6>
      test_assert(err == MFS_NO_ERROR, "error creating the record");
 80074d4:	e0c8      	b.n	8007668 <mfs_test_002_003_execute+0x238>
                  "unexpected record length");
      test_assert(memcmp(mfs_pattern512, mfs_buffer, size) == 0,
 80074d6:	9b02      	ldr	r3, [sp, #8]
 80074d8:	461a      	mov	r2, r3
 80074da:	496b      	ldr	r1, [pc, #428]	; (8007688 <mfs_test_002_003_execute+0x258>)
 80074dc:	4867      	ldr	r0, [pc, #412]	; (800767c <mfs_test_002_003_execute+0x24c>)
 80074de:	f000 fa31 	bl	8007944 <memcmp>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	bf0c      	ite	eq
 80074e8:	2301      	moveq	r3, #1
 80074ea:	2300      	movne	r3, #0
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	4969      	ldr	r1, [pc, #420]	; (8007694 <mfs_test_002_003_execute+0x264>)
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fd fc75 	bl	8004de0 <_test_assert>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d000      	beq.n	80074fe <mfs_test_002_003_execute+0xce>
      test_assert(err == MFS_NO_ERROR, "error creating the record");
 80074fc:	e0b4      	b.n	8007668 <mfs_test_002_003_execute+0x238>
    for (id = 1; id <= id_max; id++) {
 80074fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007500:	3301      	adds	r3, #1
 8007502:	930b      	str	r3, [sp, #44]	; 0x2c
 8007504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007508:	429a      	cmp	r2, r3
 800750a:	d9a1      	bls.n	8007450 <mfs_test_002_003_execute+0x20>
    }
  }
  test_end_step(1);

  /* [2.3.2] Erasing one record, MFS_NO_ERROR is expected.*/
  test_set_step(2);
 800750c:	4b58      	ldr	r3, [pc, #352]	; (8007670 <mfs_test_002_003_execute+0x240>)
 800750e:	2202      	movs	r2, #2
 8007510:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size;

    err = mfsEraseRecord(&mfs1, 1);
 8007512:	2101      	movs	r1, #1
 8007514:	485a      	ldr	r0, [pc, #360]	; (8007680 <mfs_test_002_003_execute+0x250>)
 8007516:	f7fd f92b 	bl	8004770 <mfsEraseRecord>
 800751a:	4603      	mov	r3, r0
 800751c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    test_assert(err == MFS_NO_ERROR, "error erasing the record");
 8007520:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
 8007524:	2b00      	cmp	r3, #0
 8007526:	bf0c      	ite	eq
 8007528:	2301      	moveq	r3, #1
 800752a:	2300      	movne	r3, #0
 800752c:	b2db      	uxtb	r3, r3
 800752e:	495a      	ldr	r1, [pc, #360]	; (8007698 <mfs_test_002_003_execute+0x268>)
 8007530:	4618      	mov	r0, r3
 8007532:	f7fd fc55 	bl	8004de0 <_test_assert>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d000      	beq.n	800753e <mfs_test_002_003_execute+0x10e>
 800753c:	e094      	b.n	8007668 <mfs_test_002_003_execute+0x238>
    size = sizeof mfs_buffer;
 800753e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007542:	9301      	str	r3, [sp, #4]
    err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 8007544:	aa01      	add	r2, sp, #4
 8007546:	4b50      	ldr	r3, [pc, #320]	; (8007688 <mfs_test_002_003_execute+0x258>)
 8007548:	2101      	movs	r1, #1
 800754a:	484d      	ldr	r0, [pc, #308]	; (8007680 <mfs_test_002_003_execute+0x250>)
 800754c:	f7fc ff28 	bl	80043a0 <mfsReadRecord>
 8007550:	4603      	mov	r3, r0
 8007552:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    test_assert(err == MFS_ERR_NOT_FOUND, "record not erased");
 8007556:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
 800755a:	f113 0f03 	cmn.w	r3, #3
 800755e:	bf0c      	ite	eq
 8007560:	2301      	moveq	r3, #1
 8007562:	2300      	movne	r3, #0
 8007564:	b2db      	uxtb	r3, r3
 8007566:	494d      	ldr	r1, [pc, #308]	; (800769c <mfs_test_002_003_execute+0x26c>)
 8007568:	4618      	mov	r0, r3
 800756a:	f7fd fc39 	bl	8004de0 <_test_assert>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d000      	beq.n	8007576 <mfs_test_002_003_execute+0x146>
    test_assert(err == MFS_NO_ERROR, "error erasing the record");
 8007574:	e078      	b.n	8007668 <mfs_test_002_003_execute+0x238>
  }
  test_end_step(2);

  /* [2.3.3] Starting a transaction with the whole remaining space,
     MFS_ERR_OUT_OF_MEM is expected.*/
  test_set_step(3);
 8007576:	4b3e      	ldr	r3, [pc, #248]	; (8007670 <mfs_test_002_003_execute+0x240>)
 8007578:	2203      	movs	r2, #3
 800757a:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size = mfs1.config->bank_size - mfs1.used_space;
 800757c:	4b40      	ldr	r3, [pc, #256]	; (8007680 <mfs_test_002_003_execute+0x250>)
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	689a      	ldr	r2, [r3, #8]
 8007582:	4b3f      	ldr	r3, [pc, #252]	; (8007680 <mfs_test_002_003_execute+0x250>)
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	9308      	str	r3, [sp, #32]

    err = mfsStartTransaction(&mfs1, size);
 800758a:	9908      	ldr	r1, [sp, #32]
 800758c:	483c      	ldr	r0, [pc, #240]	; (8007680 <mfs_test_002_003_execute+0x250>)
 800758e:	f7fd fa27 	bl	80049e0 <mfsStartTransaction>
 8007592:	4603      	mov	r3, r0
 8007594:	f88d 301f 	strb.w	r3, [sp, #31]
    test_assert(err == MFS_ERR_OUT_OF_MEM, "invalid error code");
 8007598:	f99d 301f 	ldrsb.w	r3, [sp, #31]
 800759c:	f113 0f04 	cmn.w	r3, #4
 80075a0:	bf0c      	ite	eq
 80075a2:	2301      	moveq	r3, #1
 80075a4:	2300      	movne	r3, #0
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	493d      	ldr	r1, [pc, #244]	; (80076a0 <mfs_test_002_003_execute+0x270>)
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fd fc18 	bl	8004de0 <_test_assert>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d157      	bne.n	8007666 <mfs_test_002_003_execute+0x236>
  }
  test_end_step(3);

  /* [2.3.4] Starting a transaction with insufficient space for one
     more header, MFS_ERR_OUT_OF_MEM is expected.*/
  test_set_step(4);
 80075b6:	4b2e      	ldr	r3, [pc, #184]	; (8007670 <mfs_test_002_003_execute+0x240>)
 80075b8:	2204      	movs	r2, #4
 80075ba:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size = ((mfs1.config->bank_size - mfs1.used_space) - sizeof (mfs_data_header_t)) + 1;
 80075bc:	4b30      	ldr	r3, [pc, #192]	; (8007680 <mfs_test_002_003_execute+0x250>)
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	689a      	ldr	r2, [r3, #8]
 80075c2:	4b2f      	ldr	r3, [pc, #188]	; (8007680 <mfs_test_002_003_execute+0x250>)
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	3b0f      	subs	r3, #15
 80075ca:	9306      	str	r3, [sp, #24]

    err = mfsStartTransaction(&mfs1, size);
 80075cc:	9906      	ldr	r1, [sp, #24]
 80075ce:	482c      	ldr	r0, [pc, #176]	; (8007680 <mfs_test_002_003_execute+0x250>)
 80075d0:	f7fd fa06 	bl	80049e0 <mfsStartTransaction>
 80075d4:	4603      	mov	r3, r0
 80075d6:	f88d 3017 	strb.w	r3, [sp, #23]
    test_assert(err == MFS_ERR_OUT_OF_MEM, "invalid error code");
 80075da:	f99d 3017 	ldrsb.w	r3, [sp, #23]
 80075de:	f113 0f04 	cmn.w	r3, #4
 80075e2:	bf0c      	ite	eq
 80075e4:	2301      	moveq	r3, #1
 80075e6:	2300      	movne	r3, #0
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	492d      	ldr	r1, [pc, #180]	; (80076a0 <mfs_test_002_003_execute+0x270>)
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fd fbf7 	bl	8004de0 <_test_assert>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d137      	bne.n	8007668 <mfs_test_002_003_execute+0x238>
  }
  test_end_step(4);

  /* [2.3.5] Starting a transaction with just enough space for one more
     header, MFS_NO_ERROR is expected.*/
  test_set_step(5);
 80075f8:	4b1d      	ldr	r3, [pc, #116]	; (8007670 <mfs_test_002_003_execute+0x240>)
 80075fa:	2205      	movs	r2, #5
 80075fc:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;
    size_t size = (mfs1.config->bank_size - mfs1.used_space) - sizeof (mfs_data_header_t);
 80075fe:	4b20      	ldr	r3, [pc, #128]	; (8007680 <mfs_test_002_003_execute+0x250>)
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	689a      	ldr	r2, [r3, #8]
 8007604:	4b1e      	ldr	r3, [pc, #120]	; (8007680 <mfs_test_002_003_execute+0x250>)
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	3b10      	subs	r3, #16
 800760c:	9304      	str	r3, [sp, #16]

    err = mfsStartTransaction(&mfs1, size);
 800760e:	9904      	ldr	r1, [sp, #16]
 8007610:	481b      	ldr	r0, [pc, #108]	; (8007680 <mfs_test_002_003_execute+0x250>)
 8007612:	f7fd f9e5 	bl	80049e0 <mfsStartTransaction>
 8007616:	4603      	mov	r3, r0
 8007618:	f88d 300f 	strb.w	r3, [sp, #15]
    test_assert(err == MFS_NO_ERROR, "error starting transaction");
 800761c:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 8007620:	2b00      	cmp	r3, #0
 8007622:	bf0c      	ite	eq
 8007624:	2301      	moveq	r3, #1
 8007626:	2300      	movne	r3, #0
 8007628:	b2db      	uxtb	r3, r3
 800762a:	491e      	ldr	r1, [pc, #120]	; (80076a4 <mfs_test_002_003_execute+0x274>)
 800762c:	4618      	mov	r0, r3
 800762e:	f7fd fbd7 	bl	8004de0 <_test_assert>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d117      	bne.n	8007668 <mfs_test_002_003_execute+0x238>
  }
  test_end_step(5);

  /* [2.3.6] Rolling back, MFS_NO_ERROR is expected.*/
  test_set_step(6);
 8007638:	4b0d      	ldr	r3, [pc, #52]	; (8007670 <mfs_test_002_003_execute+0x240>)
 800763a:	2206      	movs	r2, #6
 800763c:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;

    err = mfsRollbackTransaction(&mfs1);
 800763e:	4810      	ldr	r0, [pc, #64]	; (8007680 <mfs_test_002_003_execute+0x250>)
 8007640:	f7fd fae6 	bl	8004c10 <mfsRollbackTransaction>
 8007644:	4603      	mov	r3, r0
 8007646:	f88d 300e 	strb.w	r3, [sp, #14]
    test_assert(err == MFS_NO_ERROR, "error rolling back transaction");
 800764a:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 800764e:	2b00      	cmp	r3, #0
 8007650:	bf0c      	ite	eq
 8007652:	2301      	moveq	r3, #1
 8007654:	2300      	movne	r3, #0
 8007656:	b2db      	uxtb	r3, r3
 8007658:	4913      	ldr	r1, [pc, #76]	; (80076a8 <mfs_test_002_003_execute+0x278>)
 800765a:	4618      	mov	r0, r3
 800765c:	f7fd fbc0 	bl	8004de0 <_test_assert>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	e000      	b.n	8007668 <mfs_test_002_003_execute+0x238>
    test_assert(err == MFS_ERR_OUT_OF_MEM, "invalid error code");
 8007666:	bf00      	nop
  }
  test_end_step(6);
}
 8007668:	b00d      	add	sp, #52	; 0x34
 800766a:	f85d fb04 	ldr.w	pc, [sp], #4
 800766e:	bf00      	nop
 8007670:	20000a4c 	.word	0x20000a4c
 8007674:	0800949c 	.word	0x0800949c
 8007678:	3e0f83e1 	.word	0x3e0f83e1
 800767c:	08008c30 	.word	0x08008c30
 8007680:	20000a70 	.word	0x20000a70
 8007684:	08008f18 	.word	0x08008f18
 8007688:	20000c74 	.word	0x20000c74
 800768c:	08008f34 	.word	0x08008f34
 8007690:	08008f48 	.word	0x08008f48
 8007694:	08008f64 	.word	0x08008f64
 8007698:	08008f98 	.word	0x08008f98
 800769c:	08008fb4 	.word	0x08008fb4
 80076a0:	08009348 	.word	0x08009348
 80076a4:	08009248 	.word	0x08009248
 80076a8:	08009318 	.word	0x08009318
 80076ac:	00000000 	.word	0x00000000

080076b0 <mfs_test_003_001_execute>:
 * - [3.1.5] The function mfsPerformGarbageCollection() is called,
 *   MFS_ERR_INV_STATE is expected.
 * .
 */

static void mfs_test_003_001_execute(void) {
 80076b0:	b500      	push	{lr}
 80076b2:	b085      	sub	sp, #20

  /* [3.1.1] The function mfsErase() is called, MFS_ERR_INV_STATE is
     expected.*/
  test_set_step(1);
 80076b4:	4b41      	ldr	r3, [pc, #260]	; (80077bc <mfs_test_003_001_execute+0x10c>)
 80076b6:	2201      	movs	r2, #1
 80076b8:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err = mfsErase(&mfs1);
 80076ba:	4841      	ldr	r0, [pc, #260]	; (80077c0 <mfs_test_003_001_execute+0x110>)
 80076bc:	f7fc fe40 	bl	8004340 <mfsErase>
 80076c0:	4603      	mov	r3, r0
 80076c2:	f88d 300f 	strb.w	r3, [sp, #15]
    test_assert(err == MFS_ERR_INV_STATE, "mfsErase() returned wrong status");
 80076c6:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 80076ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ce:	bf0c      	ite	eq
 80076d0:	2301      	moveq	r3, #1
 80076d2:	2300      	movne	r3, #0
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	493b      	ldr	r1, [pc, #236]	; (80077c4 <mfs_test_003_001_execute+0x114>)
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fd fb81 	bl	8004de0 <_test_assert>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d168      	bne.n	80077b6 <mfs_test_003_001_execute+0x106>
  }
  test_end_step(1);

  /* [3.1.2] The function mfsWriteRecord() is called, MFS_ERR_INV_STATE
     is expected.*/
  test_set_step(2);
 80076e4:	4b35      	ldr	r3, [pc, #212]	; (80077bc <mfs_test_003_001_execute+0x10c>)
 80076e6:	2202      	movs	r2, #2
 80076e8:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err = mfsWriteRecord(&mfs1, 1, 16, mfs_buffer);
 80076ea:	4b37      	ldr	r3, [pc, #220]	; (80077c8 <mfs_test_003_001_execute+0x118>)
 80076ec:	2210      	movs	r2, #16
 80076ee:	2101      	movs	r1, #1
 80076f0:	4833      	ldr	r0, [pc, #204]	; (80077c0 <mfs_test_003_001_execute+0x110>)
 80076f2:	f7fc fed5 	bl	80044a0 <mfsWriteRecord>
 80076f6:	4603      	mov	r3, r0
 80076f8:	f88d 300e 	strb.w	r3, [sp, #14]
    test_assert(err == MFS_ERR_INV_STATE, "mfsWriteRecord() returned wrong status");
 80076fc:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 8007700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007704:	bf0c      	ite	eq
 8007706:	2301      	moveq	r3, #1
 8007708:	2300      	movne	r3, #0
 800770a:	b2db      	uxtb	r3, r3
 800770c:	492f      	ldr	r1, [pc, #188]	; (80077cc <mfs_test_003_001_execute+0x11c>)
 800770e:	4618      	mov	r0, r3
 8007710:	f7fd fb66 	bl	8004de0 <_test_assert>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d14d      	bne.n	80077b6 <mfs_test_003_001_execute+0x106>
  }
  test_end_step(2);

  /* [3.1.3] The function mfsEraseRecord() is called, MFS_ERR_INV_STATE
     is expected.*/
  test_set_step(3);
 800771a:	4b28      	ldr	r3, [pc, #160]	; (80077bc <mfs_test_003_001_execute+0x10c>)
 800771c:	2203      	movs	r2, #3
 800771e:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err = mfsEraseRecord(&mfs1, 1);
 8007720:	2101      	movs	r1, #1
 8007722:	4827      	ldr	r0, [pc, #156]	; (80077c0 <mfs_test_003_001_execute+0x110>)
 8007724:	f7fd f824 	bl	8004770 <mfsEraseRecord>
 8007728:	4603      	mov	r3, r0
 800772a:	f88d 300d 	strb.w	r3, [sp, #13]
    test_assert(err == MFS_ERR_INV_STATE, "mfsEraseRecord() returned wrong status");
 800772e:	f99d 300d 	ldrsb.w	r3, [sp, #13]
 8007732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007736:	bf0c      	ite	eq
 8007738:	2301      	moveq	r3, #1
 800773a:	2300      	movne	r3, #0
 800773c:	b2db      	uxtb	r3, r3
 800773e:	4924      	ldr	r1, [pc, #144]	; (80077d0 <mfs_test_003_001_execute+0x120>)
 8007740:	4618      	mov	r0, r3
 8007742:	f7fd fb4d 	bl	8004de0 <_test_assert>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d134      	bne.n	80077b6 <mfs_test_003_001_execute+0x106>
  }
  test_end_step(3);

  /* [3.1.4] The function mfsReadRecord() is called, MFS_ERR_INV_STATE
     is expected.*/
  test_set_step(4);
 800774c:	4b1b      	ldr	r3, [pc, #108]	; (80077bc <mfs_test_003_001_execute+0x10c>)
 800774e:	2204      	movs	r2, #4
 8007750:	601a      	str	r2, [r3, #0]
  {
    size_t size = sizeof mfs_buffer;
 8007752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007756:	9301      	str	r3, [sp, #4]
    mfs_error_t err = mfsReadRecord(&mfs1, 1, &size, mfs_buffer);
 8007758:	aa01      	add	r2, sp, #4
 800775a:	4b1b      	ldr	r3, [pc, #108]	; (80077c8 <mfs_test_003_001_execute+0x118>)
 800775c:	2101      	movs	r1, #1
 800775e:	4818      	ldr	r0, [pc, #96]	; (80077c0 <mfs_test_003_001_execute+0x110>)
 8007760:	f7fc fe1e 	bl	80043a0 <mfsReadRecord>
 8007764:	4603      	mov	r3, r0
 8007766:	f88d 300c 	strb.w	r3, [sp, #12]
    test_assert(err == MFS_ERR_INV_STATE, "mfsReadRecord() returned wrong status");
 800776a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
 800776e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007772:	bf0c      	ite	eq
 8007774:	2301      	moveq	r3, #1
 8007776:	2300      	movne	r3, #0
 8007778:	b2db      	uxtb	r3, r3
 800777a:	4916      	ldr	r1, [pc, #88]	; (80077d4 <mfs_test_003_001_execute+0x124>)
 800777c:	4618      	mov	r0, r3
 800777e:	f7fd fb2f 	bl	8004de0 <_test_assert>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d116      	bne.n	80077b6 <mfs_test_003_001_execute+0x106>
  }
  test_end_step(4);

  /* [3.1.5] The function mfsPerformGarbageCollection() is called,
     MFS_ERR_INV_STATE is expected.*/
  test_set_step(5);
 8007788:	4b0c      	ldr	r3, [pc, #48]	; (80077bc <mfs_test_003_001_execute+0x10c>)
 800778a:	2205      	movs	r2, #5
 800778c:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err = mfsPerformGarbageCollection(&mfs1);
 800778e:	480c      	ldr	r0, [pc, #48]	; (80077c0 <mfs_test_003_001_execute+0x110>)
 8007790:	f7fd f90e 	bl	80049b0 <mfsPerformGarbageCollection>
 8007794:	4603      	mov	r3, r0
 8007796:	f88d 300b 	strb.w	r3, [sp, #11]
    test_assert(err == MFS_ERR_INV_STATE, "mfsPerformGarbageCollection() returned wrong status");
 800779a:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 800779e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a2:	bf0c      	ite	eq
 80077a4:	2301      	moveq	r3, #1
 80077a6:	2300      	movne	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	490b      	ldr	r1, [pc, #44]	; (80077d8 <mfs_test_003_001_execute+0x128>)
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fd fb17 	bl	8004de0 <_test_assert>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
  }
  test_end_step(5);
}
 80077b6:	b005      	add	sp, #20
 80077b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80077bc:	20000a4c 	.word	0x20000a4c
 80077c0:	20000a70 	.word	0x20000a70
 80077c4:	08009384 	.word	0x08009384
 80077c8:	20000c74 	.word	0x20000c74
 80077cc:	080093a8 	.word	0x080093a8
 80077d0:	080093d0 	.word	0x080093d0
 80077d4:	080093f8 	.word	0x080093f8
 80077d8:	08009420 	.word	0x08009420
 80077dc:	00000000 	.word	0x00000000

080077e0 <mfs_test_003_002_setup>:
 * - [3.2.1] Record one is erased, the error MFS_ERR_NOT_FOUND is
 *   expected.
 * .
 */

static void mfs_test_003_002_setup(void) {
 80077e0:	b508      	push	{r3, lr}
  mfsStart(&mfs1, &mfscfg1);
 80077e2:	4904      	ldr	r1, [pc, #16]	; (80077f4 <mfs_test_003_002_setup+0x14>)
 80077e4:	4804      	ldr	r0, [pc, #16]	; (80077f8 <mfs_test_003_002_setup+0x18>)
 80077e6:	f7fc fd8b 	bl	8004300 <mfsStart>
  mfsErase(&mfs1);
 80077ea:	4803      	ldr	r0, [pc, #12]	; (80077f8 <mfs_test_003_002_setup+0x18>)
 80077ec:	f7fc fda8 	bl	8004340 <mfsErase>
}
 80077f0:	bd08      	pop	{r3, pc}
 80077f2:	bf00      	nop
 80077f4:	0800949c 	.word	0x0800949c
 80077f8:	20000a70 	.word	0x20000a70
 80077fc:	00000000 	.word	0x00000000

08007800 <mfs_test_003_002_teardown>:

static void mfs_test_003_002_teardown(void) {
 8007800:	b508      	push	{r3, lr}
  mfsStop(&mfs1);
 8007802:	4802      	ldr	r0, [pc, #8]	; (800780c <mfs_test_003_002_teardown+0xc>)
 8007804:	f7fc fd8c 	bl	8004320 <mfsStop>
}
 8007808:	bd08      	pop	{r3, pc}
 800780a:	bf00      	nop
 800780c:	20000a70 	.word	0x20000a70

08007810 <mfs_test_003_002_execute>:

static void mfs_test_003_002_execute(void) {
 8007810:	b500      	push	{lr}
 8007812:	b083      	sub	sp, #12

  /* [3.2.1] Record one is erased, the error MFS_ERR_NOT_FOUND is
     expected.*/
  test_set_step(1);
 8007814:	4b14      	ldr	r3, [pc, #80]	; (8007868 <mfs_test_003_002_execute+0x58>)
 8007816:	2201      	movs	r2, #1
 8007818:	601a      	str	r2, [r3, #0]
  {
    mfs_error_t err;

    err = mfsEraseRecord(&mfs1, 1);
 800781a:	2101      	movs	r1, #1
 800781c:	4813      	ldr	r0, [pc, #76]	; (800786c <mfs_test_003_002_execute+0x5c>)
 800781e:	f7fc ffa7 	bl	8004770 <mfsEraseRecord>
 8007822:	4603      	mov	r3, r0
 8007824:	f88d 3007 	strb.w	r3, [sp, #7]
    test_assert(err != MFS_NO_ERROR, "record was present");
 8007828:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800782c:	2b00      	cmp	r3, #0
 800782e:	bf14      	ite	ne
 8007830:	2301      	movne	r3, #1
 8007832:	2300      	moveq	r3, #0
 8007834:	b2db      	uxtb	r3, r3
 8007836:	490e      	ldr	r1, [pc, #56]	; (8007870 <mfs_test_003_002_execute+0x60>)
 8007838:	4618      	mov	r0, r3
 800783a:	f7fd fad1 	bl	8004de0 <_test_assert>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10d      	bne.n	8007860 <mfs_test_003_002_execute+0x50>
    test_assert(err == MFS_ERR_NOT_FOUND, "invalid error code");
 8007844:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8007848:	f113 0f03 	cmn.w	r3, #3
 800784c:	bf0c      	ite	eq
 800784e:	2301      	moveq	r3, #1
 8007850:	2300      	movne	r3, #0
 8007852:	b2db      	uxtb	r3, r3
 8007854:	4907      	ldr	r1, [pc, #28]	; (8007874 <mfs_test_003_002_execute+0x64>)
 8007856:	4618      	mov	r0, r3
 8007858:	f7fd fac2 	bl	8004de0 <_test_assert>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
  }
  test_end_step(1);
}
 8007860:	b003      	add	sp, #12
 8007862:	f85d fb04 	ldr.w	pc, [sp], #4
 8007866:	bf00      	nop
 8007868:	20000a4c 	.word	0x20000a4c
 800786c:	20000a70 	.word	0x20000a70
 8007870:	08009464 	.word	0x08009464
 8007874:	08009348 	.word	0x08009348
	...

08007880 <chRegSetThreadName>:
 *
 * @param[in] name      thread name as a zero terminated string
 *
 * @api
 */
static inline void chRegSetThreadName(const char *name) {
 8007880:	b082      	sub	sp, #8
 8007882:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8007884:	4b02      	ldr	r3, [pc, #8]	; (8007890 <chRegSetThreadName+0x10>)
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	9a01      	ldr	r2, [sp, #4]
 800788a:	619a      	str	r2, [r3, #24]
#else
  (void)name;
#endif
}
 800788c:	b002      	add	sp, #8
 800788e:	4770      	bx	lr
 8007890:	20000968 	.word	0x20000968
	...

080078a0 <Thread1.lto_priv.2>:
  .bank1_start      = 130U,
  .bank1_sectors    = 2U
};

static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 80078a0:	b500      	push	{lr}
 80078a2:	b083      	sub	sp, #12
 80078a4:	9001      	str	r0, [sp, #4]

  (void)arg;
  chRegSetThreadName("blinker");
 80078a6:	480a      	ldr	r0, [pc, #40]	; (80078d0 <Thread1.lto_priv.2+0x30>)
 80078a8:	f7ff ffea 	bl	8007880 <chRegSetThreadName>
  while (true) {
    palClearLine(LINE_LED_GREEN);
 80078ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078b0:	2220      	movs	r2, #32
 80078b2:	835a      	strh	r2, [r3, #26]
    chThdSleepMilliseconds(500);
 80078b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80078b8:	f7fb fb82 	bl	8002fc0 <chThdSleep>
    palSetLine(LINE_LED_GREEN);
 80078bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078c0:	2220      	movs	r2, #32
 80078c2:	831a      	strh	r2, [r3, #24]
    chThdSleepMilliseconds(500);
 80078c4:	f241 3088 	movw	r0, #5000	; 0x1388
 80078c8:	f7fb fb7a 	bl	8002fc0 <chThdSleep>
 80078cc:	e7ee      	b.n	80078ac <Thread1.lto_priv.2+0xc>
 80078ce:	bf00      	nop
 80078d0:	080094b8 	.word	0x080094b8
	...

080078e0 <main>:
  }
}

int main(void) {
 80078e0:	b500      	push	{lr}
 80078e2:	b083      	sub	sp, #12

  halInit();
 80078e4:	f7f8 ff54 	bl	8000790 <halInit>
  chSysInit();
 80078e8:	f7fa fe2a 	bl	8002540 <chSysInit>
  eflStart(&EFLD1, NULL);
 80078ec:	2100      	movs	r1, #0
 80078ee:	480f      	ldr	r0, [pc, #60]	; (800792c <main+0x4c>)
 80078f0:	f7f9 fb9e 	bl	8001030 <eflStart>

  sdStart(&SD2, NULL);
 80078f4:	2100      	movs	r1, #0
 80078f6:	480e      	ldr	r0, [pc, #56]	; (8007930 <main+0x50>)
 80078f8:	f7f9 fcda 	bl	80012b0 <sdStart>

  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 80078fc:	2300      	movs	r3, #0
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	4b0c      	ldr	r3, [pc, #48]	; (8007934 <main+0x54>)
 8007902:	2280      	movs	r2, #128	; 0x80
 8007904:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007908:	480b      	ldr	r0, [pc, #44]	; (8007938 <main+0x58>)
 800790a:	f7fb fad1 	bl	8002eb0 <chThdCreateStatic>

  while (true) {
    if (!palReadLine(LINE_BUTTON)) {
 800790e:	4b0b      	ldr	r3, [pc, #44]	; (800793c <main+0x5c>)
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d103      	bne.n	8007922 <main+0x42>
      test_execute((BaseSequentialStream *)&SD2, &mfs_test_suite);
 800791a:	4909      	ldr	r1, [pc, #36]	; (8007940 <main+0x60>)
 800791c:	4804      	ldr	r0, [pc, #16]	; (8007930 <main+0x50>)
 800791e:	f7fd faf7 	bl	8004f10 <test_execute>
    }
    chThdSleepMilliseconds(500);
 8007922:	f241 3088 	movw	r0, #5000	; 0x1388
 8007926:	f7fb fb4b 	bl	8002fc0 <chThdSleep>
 800792a:	e7f0      	b.n	800790e <main+0x2e>
 800792c:	20000800 	.word	0x20000800
 8007930:	20000810 	.word	0x20000810
 8007934:	080078a1 	.word	0x080078a1
 8007938:	20000e78 	.word	0x20000e78
 800793c:	48000800 	.word	0x48000800
 8007940:	08008bec 	.word	0x08008bec

08007944 <memcmp>:
 8007944:	2a03      	cmp	r2, #3
 8007946:	b470      	push	{r4, r5, r6}
 8007948:	d912      	bls.n	8007970 <memcmp+0x2c>
 800794a:	ea40 0501 	orr.w	r5, r0, r1
 800794e:	07ad      	lsls	r5, r5, #30
 8007950:	4604      	mov	r4, r0
 8007952:	460b      	mov	r3, r1
 8007954:	d11e      	bne.n	8007994 <memcmp+0x50>
 8007956:	4619      	mov	r1, r3
 8007958:	4620      	mov	r0, r4
 800795a:	f853 5b04 	ldr.w	r5, [r3], #4
 800795e:	f854 6b04 	ldr.w	r6, [r4], #4
 8007962:	42ae      	cmp	r6, r5
 8007964:	d116      	bne.n	8007994 <memcmp+0x50>
 8007966:	3a04      	subs	r2, #4
 8007968:	2a03      	cmp	r2, #3
 800796a:	4620      	mov	r0, r4
 800796c:	4619      	mov	r1, r3
 800796e:	d8f2      	bhi.n	8007956 <memcmp+0x12>
 8007970:	1e56      	subs	r6, r2, #1
 8007972:	b1a2      	cbz	r2, 800799e <memcmp+0x5a>
 8007974:	3901      	subs	r1, #1
 8007976:	1e44      	subs	r4, r0, #1
 8007978:	e001      	b.n	800797e <memcmp+0x3a>
 800797a:	18c3      	adds	r3, r0, r3
 800797c:	d00c      	beq.n	8007998 <memcmp+0x54>
 800797e:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8007982:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007986:	4295      	cmp	r5, r2
 8007988:	eba6 0304 	sub.w	r3, r6, r4
 800798c:	d0f5      	beq.n	800797a <memcmp+0x36>
 800798e:	1aa8      	subs	r0, r5, r2
 8007990:	bc70      	pop	{r4, r5, r6}
 8007992:	4770      	bx	lr
 8007994:	1e56      	subs	r6, r2, #1
 8007996:	e7ed      	b.n	8007974 <memcmp+0x30>
 8007998:	4618      	mov	r0, r3
 800799a:	bc70      	pop	{r4, r5, r6}
 800799c:	4770      	bx	lr
 800799e:	4610      	mov	r0, r2
 80079a0:	e7f6      	b.n	8007990 <memcmp+0x4c>
 80079a2:	bf00      	nop
